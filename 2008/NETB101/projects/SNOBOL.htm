<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns:dt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882" xmlns:st1="urn:schemas-microsoft-com:office:smarttags" xmlns="http://www.w3.org/TR/REC-html40">
<head>


<meta name="Microsoft Theme 2.00" content="blends 011">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="Original-File" href="file:///C:/Users/David/Desktop/Some%20Docs/SNOBOL%20Project/NETB131%20Programming%20Project.doc">
<meta name="ProgId" content="Word.Document">
<meta name="Generator" content="Microsoft Word 10">
<meta name="Originator" content="Microsoft Word 10">
<link rel="File-List" href="file:///C:/Users/David/AppData/Local/Temp/WordWebPagePreview/NETB131%20Programming%20Project_files/filelist.xml">
<title>NETB131 Programming Project</title>

<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="PlaceType"></smarttagtype>
<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="PlaceName"></smarttagtype>
<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="State"></smarttagtype>
<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="City"></smarttagtype>
<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"></smarttagtype>
<smarttagtype namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="date"></smarttagtype><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Yoan</o:Author>
  <o:LastAuthor>Yoan</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>387</o:TotalTime>
  <o:Created>2007-12-30T19:40:00Z</o:Created>
  <o:LastSaved>2008-01-23T01:39:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>3846</o:Words>
  <o:Characters>21926</o:Characters>
  <o:Company>Hewlett-Packard</o:Company>
  <o:Lines>182</o:Lines>
  <o:Paragraphs>51</o:Paragraphs>
  <o:CharactersWithSpaces>25721</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:DefaultTableStyle Number="155">Table Theme</w:DefaultTableStyle>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:ApplyBreakingRules/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->

<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:647 0 0 0 159 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 680460288 22 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	mso-fareast-font-family:SimSun;
	mso-bidi-font-family:"Times New Roman";
	color:black;}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:#330099;
	mso-font-kerning:16.0pt;
	font-weight:normal;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:18.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:#330099;
	font-weight:normal;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:14.0pt;
	font-family:"Trebuchet MS";
	mso-bidi-font-family:Arial;
	color:#330099;
	font-weight:normal;}
h4
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Trebuchet MS";
	color:#330099;
	font-weight:normal;}
h5
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:5;
	font-size:10.0pt;
	font-family:"Trebuchet MS";
	color:#330099;
	font-weight:normal;}
h6
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:6;
	font-size:8.0pt;
	font-family:"Trebuchet MS";
	color:#330099;
	font-weight:normal;}
a:link, span.MsoHyperlink
	{color:#993300;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
p
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
address
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-style:italic;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:SimSun;
	color:black;}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:SimSun;
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:69430581;
	mso-list-template-ids:-1655513966;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:235366152;
	mso-list-template-ids:-1347384422;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:418648257;
	mso-list-template-ids:-1314770324;}
@list l2:level1
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image001.gif");
	mso-level-text:\F076;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level2
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image002.gif");
	mso-level-text:\F0D8;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level3
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image003.gif");
	mso-level-text:\F0A7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2:level5
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l2:level8
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l2:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3
	{mso-list-id:565535978;
	mso-list-template-ids:-1314770324;}
@list l3:level1
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image001.gif");
	mso-level-text:\F076;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3:level2
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image002.gif");
	mso-level-text:\F0D8;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3:level3
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image003.gif");
	mso-level-text:\F0A7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3:level5
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l3:level8
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l3:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4
	{mso-list-id:1086195842;
	mso-list-template-ids:-1314770324;}
@list l4:level1
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image001.gif");
	mso-level-text:\F076;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4:level2
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image002.gif");
	mso-level-text:\F0D8;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4:level3
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image003.gif");
	mso-level-text:\F0A7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4:level5
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l4:level8
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l4:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5
	{mso-list-id:1095398618;
	mso-list-template-ids:-1314770324;}
@list l5:level1
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image001.gif");
	mso-level-text:\F076;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l5:level2
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image002.gif");
	mso-level-text:\F0D8;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l5:level3
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image003.gif");
	mso-level-text:\F0A7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l5:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5:level5
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l5:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l5:level8
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l5:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l6
	{mso-list-id:1136144811;
	mso-list-template-ids:1365800334;}
@list l6:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l7
	{mso-list-id:1863933729;
	mso-list-template-ids:1544343130;}
@list l7:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l8
	{mso-list-id:1894462018;
	mso-list-template-ids:-1314770324;}
@list l8:level1
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image001.gif");
	mso-level-text:\F076;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level2
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image002.gif");
	mso-level-text:\F0D8;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	margin-left:.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level3
	{mso-level-number-format:image;
	list-style-image:url("NETB131%20Programming%20Project_files/image003.gif");
	mso-level-text:\F0A7;
	mso-level-tab-stop:.75in;
	mso-level-number-position:left;
	margin-left:.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:1.0in;
	mso-level-number-position:left;
	margin-left:1.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l8:level5
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:1.25in;
	mso-level-number-position:left;
	margin-left:1.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l8:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:1.5in;
	mso-level-number-position:left;
	margin-left:1.5in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:1.75in;
	mso-level-number-position:left;
	margin-left:1.75in;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l8:level8
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:2.0in;
	mso-level-number-position:left;
	margin-left:2.0in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l8:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A8;
	mso-level-tab-stop:2.25in;
	mso-level-number-position:left;
	margin-left:2.25in;
	text-indent:-.25in;
	font-family:Symbol;}
@list l9
	{mso-list-id:1963532735;
	mso-list-template-ids:-1853555046;}
@list l9:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l10
	{mso-list-id:1990089760;
	mso-list-template-ids:209322516;}
@list l10:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l11
	{mso-list-id:2032603396;
	mso-list-template-ids:-325038946;}
@list l11:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l12
	{mso-list-id:2141414992;
	mso-list-template-ids:-1422232096;}
@list l12:level1
	{mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
table.MsoTableTheme
	{mso-style-name:"Table Theme";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	border:solid #999999 1.0pt;
	mso-border-alt:solid #999999 .5pt;
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-border-insideh:.5pt solid #999999;
	mso-border-insidev:.5pt solid #999999;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>
<body style="" background="NETB131%20Programming%20Project_files/image004.gif" bgcolor="white" lang="EN-US" link="#993300" vlink="blue">
<!--[if gte mso 9]><xml>
 <v:background id="_x0000_s1025" o:bwmode="white" o:targetscreensize="800,600">
  <v:fill src="NETB131%20Programming%20Project_files/image004.gif" o:title="blegtext"
   type="frame"/>
 </v:background></xml><![endif]-->

<div class="Section1">

<table class="MsoTableTheme" style="border: medium none ; margin-left: 9pt; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">
 <tbody>
<tr style="height: 60.75pt;">
  <td style="border: medium none ; padding: 0in 5.4pt; width: 764.95pt; height: 60.75pt;" valign="top" width="1020">
  <p class="MsoNormal"><b>NETB131 Programming Project<span style="">               </span><span style="">                    </span><p></p></b></p>
  <p class="MsoNormal"><b>Programming language SNOBOL<p></p></b></p>
  <p class="MsoNormal"><b>An overview<p></p></b></p>
  </td>
 </tr>
</tbody>
</table>

<p class="MsoNormal" style="margin-left: 9pt;"><b><br>
</b>Yoan Grass Batista, F42225<br>
<br>
<b><span style="font-size: 14pt; color: rgb(0, 51, 102);">1. History and Special Features<p></p></span></b></p>

<h4 style="margin-left: 9pt;">
<a name="history"><b><span style="color: windowtext;">SNOBOL,</span></b>
</a><span style=""><span style="color: black;">which is the
acronym for String-Oriented Symbolic Language</span></span><span style="color: black;"> was designed in the early 1960s by three people at Bell
Laboratories: (D.J. Farber, R.E. Griswold, and F.P. Polonsky (Farber et al.,
1964).<p></p></span>
</h4>

<p class="MsoNormal" style="margin-left: 9pt;">SNOBOL is a special purposed
language developed to provide a powerful means of doing <b>character string
manipulation</b>. Accordingly SNOBOL has a collection of powerful operations
for doing string pattern matching. The most common early application of SNOBOL
was to write text editors. Because of the dynamic nature of SNOBOL and its
interpreter implementation, it is now considered too slow for such applications.
In fact SNOBOL is now close to being completely unused.</p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;">SNOBOL4 was implemented using
string macros. This realized a virtual machine so that it could be implemented
on a variety of different machines.</p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;">It is really a combination of two
kinds of languages: a conventional language, with several data types and a
simple but powerful control structure, and a pattern language, with a structure
all its own. The conventional language is not block structured, and may appear
old-fashioned. The pattern language, however, remains unsurpassed, and is
unique to SNOBOL4.</p>

<h2 style="margin-left: 27pt;"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Significant Language Features<p></p></span></b></h2>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><strong><span style='font-family: "Trebuchet MS";'>String Manipulation
Operations</span></strong> - has several of these operations which allow a
string to be tested for contents and make replacements in the string. </span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><strong><span style='font-family: "Trebuchet MS";'>Pattern Matching</span></strong>-
involves examining substrings, for the occurrences of specified substrings.
Substrings are also known as patterns. </span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><strong><span style='font-family: "Trebuchet MS";'>Dynamically typed</span></strong>
- SNOBOL4 has no type declarations and no restrictions on the data type of the
value of any variable. </span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><strong><span style='font-family: "Trebuchet MS";'>Interpretive language </span></strong>-
The compiler translates the program into a notation that the interpreter can
easily execute. </span></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><p> </p></span></b></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">2. "Hello World" Program<p></p></span></b></p>

<h2 style="margin-left: 9pt;"><a name="desc"><span style="font-size: 12pt; color: rgb(0, 51, 102);">Description<p></p></span></a></h2>

<p class="MsoNormal" style="margin-left: 9pt;"><span style="">This
program demonstrates the text output function of the SNOBOL4 programming
language by displaying the message "Hello world!<span class="GramE">".</span>
</span></p>

<h2 style="margin-left: 9pt;"><a name="source"><span style="font-size: 12pt; color: rgb(0, 51, 102);">Source Code<p></p></span></a></h2>

<span style=""></span>
 <table class="MsoTableTheme" style="border: medium none ; background: rgb(215, 242, 245) none repeat scroll 0%; margin-left: 9pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">
 <tbody>
<tr style="height: 27.5pt;">
  <td style="border: 1pt solid navy; padding: 0in 5.4pt; width: 181.2pt; height: 27.5pt;" valign="top" width="242">
<pre style="margin-left: 9pt;"><span style=""><b><span style="color: rgb(0, 51, 102);">OUTPUT = 'Hello World!'<p></p></span></b></span></pre>
<pre style="margin-left: 9pt;"><span style=""><b><span style="color: rgb(0, 51, 102);">END</span></b><p></p></span></pre>
</td>
  </tr>
</tbody>
</table>

<span style=""></span>

<h2 style="margin-left: 9pt;"><a name="testrun"><span style="font-size: 12pt; color: rgb(0, 51, 102);">Sample Run<p></p></span></a></h2>

<span style=""></span>
 <table class="MsoTableTheme" style="border: medium none ; background: rgb(185, 237, 187) none repeat scroll 0%; margin-left: 9pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">
 <tbody>
<tr style="height: 12.65pt;">
  <td style="border: 1pt solid rgb(0, 51, 0); padding: 0in 5.4pt; background: rgb(218, 246, 219) none repeat scroll 0%; width: 109.05pt; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; height: 12.65pt;" valign="top" width="145"><pre style="margin-left: 9pt;"><span style=""><b><span style="color: green;">Hello world!<p></p></span></b></span></pre></td>
  </tr>
</tbody>
</table>

<span style=""></span>

<h2 style="margin-left: 9pt;"><a name="notes"><span style="font-size: 12pt; color: rgb(0, 51, 102);">Program Notes<p></p></span></a></h2>

<p class="MsoNormal" style="margin-left: 9pt;"><span style="">This
program was complied and tested using Vanilla SNOBOL</span>.</p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">3. Fundamental Data Types<br style="">
<!--[if !supportLineBreakNewLine]--><br style="">
<!--[endif]--></span></b><span style='font-family: "Times New Roman"; color: windowtext;'><p></p></span></p>

<p class="MsoNormal" style="margin-left: 9pt;"><span style="color: rgb(0, 51, 102);">The
data types used by SNOBOL Language are as follows: <p></p></span></p>

<p class="MsoNormal" style="margin-left: 9pt;"><span style='font-size: 10pt; font-family: "Courier New";'><span style=""> </span><p></p></span></p>

<p class="MsoNormal" style="margin-left: 27pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">  </span>Data Type<span style="">            </span><span style="">            </span><span style="">       </span><span style="">    </span>Formal Identification<p></p></span></b></p>

<p class="MsoNormal" style="margin-left: 27pt;"><span style='font-size: 10pt; font-family: "Courier New";'><p> </p></span></p>

<table class="MsoTableTheme" style="border: medium none ; margin-left: 27pt; border-collapse: collapse;" border="1" cellpadding="0" cellspacing="0">
 <tbody>
<tr style="">
  <td style="border: 1pt solid rgb(153, 153, 153); padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>string<p></p></span></b></p>
  </td>
  <td style="border-style: solid solid solid none; border-color: rgb(153, 153, 153) rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: 1pt 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>STRING<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>integer<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>INTEGER<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>real
  number<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>REAL<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>pattern
  structure<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>PATTERN<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>array<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>ARRAY<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>table<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>TABLE<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>created
  Name<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>NAME<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>unevaluated
  expression<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>EXPRESSION<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>object
  code<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>CODE<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>programmer-defined<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>Data
  type name<p></p></span></b></p>
  </td>
 </tr>
 <tr style="">
  <td style="border-style: none solid solid; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153); border-width: medium 1pt 1pt; padding: 0in 5.4pt; width: 188.6pt;" valign="top" width="251">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>external<p></p></span></b></p>
  </td>
  <td style="border-style: none solid solid none; border-color: -moz-use-text-color rgb(153, 153, 153) rgb(153, 153, 153) -moz-use-text-color; border-width: medium 1pt 1pt medium; padding: 0in 5.4pt; width: 1.75in;" valign="top" width="168">
  <p class="MsoNormal"><b><span style='font-family: "Courier New"; color: rgb(0, 51, 102);'>EXTERNAL<p></p></span></b></p>
  </td>
 </tr>
</tbody>
</table>

<p class="MsoNormal" style="margin-left: 27pt;"><span style='font-size: 10pt; font-family: "Courier New";'><p> </p></span></p>

<p class="MsoNormal" style="margin-left: 9pt;">Integers, reals, strings,
patterns, arrays, and tables are types of data objects that are built into the
SNOBOL4 language. Facilities are provided in the language to permit a
programmer to define additional types of data. This facilitates representation
of structural relationships inherent in data. </p>

<p class="MsoNormal" style="margin-left: 0.25in;"><b><span style="color: rgb(0, 51, 102);">Modular Units: <p></p></span></b></p>

<p class="MsoNormal" style="margin-left: 0.25in;">Many SNOBOL4 procedures are invoked by functions built into
the system, called primitive functions. Operations that occur frequently are
implemented as primitive functions for efficiency. In addition, facilities are
available for a programmer to define his own source language function. A
programmer defined function in SNOBOL4 must include: <br>
i) a call to the primitive function DEFINE for each programmer-defined
function. <br>
ii) <span class="GramE">a</span> procedure, written in SNOBOL$, for each
function. <br>
Many functions are conveniently defined recursively. For example, factorials
may be defined as <br>
<span class="GramE">fact(</span>0) = 1 <br>
fact(n) = n*fact(n-1) for n&gt;0 <p></p></p>

<h3 style="margin-left: 9pt;">
<a name="1.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Simple Data Type </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p class="MsoNormal" style="margin-left: 9pt;">SNOBOL4 has several different
basic types, but has a mechanism to define hundreds more as aggregates of
others. Initially, we'll discuss the two most basic: integers and strings. </p>

<h3 style="margin-left: 9pt;">
<a name="1.1.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Integers </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p class="MsoNormal" style="margin-left: 9pt;">An integer is a simple whole
number, without a fractional part. In SNOBOL4, its value can range from -32767
to +32767. It appears without quotation marks, and commas should not be used to
group digits. Here are some acceptable integers: </p>

<pre style="margin-left: 9pt;"><span style="">    </span>14<span style="">    </span>-234<span style="">    </span>0<span style="">    </span>0012<span style="">    </span>+12832<span style="">    </span>-9395<span style="">    </span>+0</pre>

<p class="MsoNormal" style="margin-left: 9pt;">These are incorrect in SNOBOL4: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE">13.4<span style="">             </span>fractional part</span> is not allowed</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>49723<span style="">            </span>larger than 32767</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>-<span style="">                </span><span class="GramE">number</span> must contain at least one digit</pre>
<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE">3,076<span style="">            </span>comma</span> is not allowed</pre>

<p class="MsoNormal" style="margin-left: 9pt;">Use the CODE.SNO program to test
different integer values. Try both legal and illegal values. Here are some
sample test lines: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><b><span style="color: rgb(0, 51, 102);">Enter SNOBOL4 statements:<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = 42<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>42<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = -825<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>-825<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = 73768<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Compilation error: Erroneous integer, re-enter:<p></p></span></b></pre>

<h3 style="margin-left: 9pt;"><a name="1.1.2"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Reals </span></b></a></h3>

<p class="MsoNormal" style="margin-left: 9pt;">Vanilla SNOBOL4 does not include
real numbers. They are available in SNOBOL4+, <span class="SpellE">Catspaw's</span>
highly enhanced implementation of the SNOBOL4 programming language. </p>

<h3 style="margin-left: 9pt;"><a name="1.1.3"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Strings </span></b></a></h3>

<p class="MsoNormal" style="margin-left: 9pt;">A string is an ordered sequence of
characters. The order of the characters is important: the strings AB and BA are
different. Characters are not restricted to printing characters; all of the 256
combinations possible in an 8-bit byte are allowed. </p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Normally, the maximum length of a string is 5,000 characters,
although you can tell SNOBOL4 to accept longer strings. A string of length zero
(no characters) is called the null string. At first, you may find the idea of
an empty string disturbing: it's a string, but it has no characters. Its role
in SNOBOL4 is similar to the role of zero in the natural number system. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Strings may appear literally in your program, or may be created
during execution. To place a literal string in your program, enclose it in
apostrophes ('<span class="GramE">)</span><a name="R1"></a><a href="http://burks.bton.ac.uk/burks/language/snobol/catspaw/tutorial/ch1.htm#F1"><span style=""><span style="color: black; text-decoration: none;">1</span></span></a><span style=""></span>
or double quotation marks ("). Either may be used, but the beginning and
ending marks must be the same. The string itself may contain one type of mark
if the other is used to enclose the string. The null string is represented by
two successive marks, with no intervening characters. Here are some samples to try
with CODE.SNO: <p></p></span></p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = 'STRING LITERAL'<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>STRING LITERAL<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = "So is this"<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>So is this<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = ''<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><p> </p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = 'WHO COINED THE WORD "BYTE"?'<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>WHO COINED THE WORD "BYTE"?<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = "WON'T"<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>WON'T<p></p></span></b></pre>

<h3>
<a name="1.3"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Variables </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p>A variable is a place to store an item of data. The number of variables you
may have is unlimited, provided you give each one a unique name. Think of a
variable as a box, marked on the outside with a permanent name, able to hold
any data value or type. Many programming languages require that you formally
declare what kind of entity the box will contain -- integer, real, string, etc.
-- but SNOBOL4 is more flexible. A variable's contents may change repeatedly
during program execution. The size of the box contracts or expands as
necessary. One moment it might contain an integer, then a 2,000 character
string, then the null string; in fact, any SNOBOL4 data type. </p>

<p>There are only a few rules about composing a variable's name when it appears
in your program: </p>

<ol start="1" type="1">
 <li class="MsoNormal" style="">The name must begin with an
     upper- or lower-case letter. </li>
 <li class="MsoNormal" style="">If it is more than one
     character long, the remaining characters may be any combination of
     letters, numbers, or the characters period (.) and underscore (_). </li>
 <li class="MsoNormal" style="">The name may not be longer
     than the maximum line length (120 characters). </li>
</ol>

<p>Here are some correct SNOBOL4 names: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><b><span style="color: rgb(0, 51, 102);">WAGER<span style="">     </span>P23<span style="">     </span><span class="SpellE">VerbClause</span><span style="">     </span>SUM.OF.SQUARES<span style="">     </span>Buffer</span></b></pre>

<p class="MsoNormal">Normally, SNOBOL4 performs "case-folding" on
names. Lower-case alphabetic characters are changed to upper-case when they
appear in names -- Buffer and BUFFER are equivalent. Naturally, <span class="SpellE">casefolding</span> of data does not occur within a string literal.
<span class="SpellE">Casefolding</span> can be disabled by the command line
option /C. </p>

<p>In some languages, the initial value of a new variable is undefined. SNOBOL4
guarantees that a new variable's initial value is the null string. However,
except in very small programs, you should always initialize variables. This
prevents unexpected results when a program is modified or a program segment is <span class="SpellE">reexecuted</span>. </p>

<p>You store something in a variable by making it the object of an assignment
operation. You can retrieve its contents simply by using it wherever its value
is needed. Using a variable's value is nondestructive; the value in the box
remains unchanged. Try creating some variables using CODE.SNO: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><b><span style="color: rgb(0, 51, 102);">?<span style="">       </span>ABC = 'EGG'<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = ABC<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>EGG<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>D = 'SHELL'<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="SpellE"><span class="GramE">abc</span></span> d<span style="">             </span>(Same as ABC D)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>EGGSHELL<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = NONESUCH<span style="">          </span>(New variable is null)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">     </span><p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = ABC NULL D<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>EGGSHELL<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>N1 = 43<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>D = 17<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = N1 + D<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>60<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">output</span> = ABC D<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>EGG17<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><p> </p></span></b></pre>

<p class="MsoNormal">OUTPUT is a variable with special properties; when a value
is stored in its box, it is also displayed on your screen. There is a
corresponding variable named INPUT, which reads data from your keyboard. Its
box has no permanent contents. Whenever SNOBOL4 is asked to fetch its value, a
complete line is read from the keyboard and used instead. If INPUT were used
twice in one statement, two separate lines of input would be read. Try these
examples: </p>

<p class="MsoNormal"><p> </p></p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = INPUT<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>TYPE ANYTHING YOU DESIRE<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>TYPE ANYTHING YOU DESIRE<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>TWO.LINES = INPUT '-AND-' INPUT<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>FIRST LINE<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>SECOND LINE<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = TWO.LINES<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>FIRST LINE-AND-SECOND LINE<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 0.25in;">SNOBOL4 variables are global in
scope -- any variable may be referenced anywhere in the program. </p>

<p class="MsoNormal" style="margin-left: 0.25in;"><p> </p></p>

<h2><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">4. Basic Control flow and
functions</span></b></h2>

<h3 style="margin-left: 9pt;">
<a name="2.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Success and Failure </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Success and failure are as important in SNOBOL4 as they are in
life. Success and failure are unmistakable signals; something either worked, or
it didn't. Significant program conciseness is achieved by recognizing that data
values and signals are fundamentally different entities. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>The elements of a statement provide values and signals as
computation proceeds. SNOBOL4 accumulates both, and stops executing a
particular statement when it finds it cannot succeed. Program flow can be
altered based upon this success or failure. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>The success signal will have a value result associated with it. In
situations in which the signal itself is the desired object, the result value
may only be the null string. The failure signal has no associated value. (In
some instances, it may be helpful to view failure as meaning "failure to
produce a result.") <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Previously, we introduced the variable INPUT, which reads a line
from the keyboard. In general, INPUT can be made to read from any disk file.
The line read may be any character string, including the null string if it is
an empty line. If any string might appear, then there is no special value we
can test for to detect End-of-File. Success and failure provide an elegant
alternative to testing for special values. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>When we retrieve a value from INPUT, we normally get a string and
a success signal. But when End-of-File is encountered, we get a failure signal
instead, and no value. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Since control-Z (or function key 6) allows you to enter an <span class="SpellE">Endof</span>-File from the keyboard, we can easily demonstrate
this type of failure. As you've noticed, the CODE.SNO program reports the
success or failure of each statement. So far, all examples have succeeded. Now
try this one: <p></p></span></p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>OUTPUT = INPUT<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>^Z<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Failure<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">Success and failure are control
signals, and appear only during the execution of a statement. They cannot be
stored in a variable, which holds values only. </p>

<p style="margin-left: 9pt;">There is much more which can be done with success
and failure, but to understand their use, you'll need to know how SNOBOL4
statements are constructed. </p>

<h3 style="margin-left: 9pt;"><a name="2.2"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">A Snobol4 Statement</span></b>
</a></h3>

<p style="margin-left: 9pt;">In general, a SNOBOL4 statement looks like this: </p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Label<span style="">   </span>Statement body<span style="">                                 </span><span class="GramE">:GOTO</span><p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">The label is optional, and is
omitted by placing a blank or tab in the first character position. The GOTO is
also optional, and can be eliminated simply by omitting it and the colon. In
fact, even the statement body is optional. You can have a program line
consisting of just a label or a GOTO field. </p>

<h3 style="margin-left: 9pt;">
<b><span style="font-size: 12pt; color: rgb(0, 51, 102);">The Label Field</span></b> </h3>

<p style="margin-left: 9pt;">SNOBOL4 normally executes the statements of a
program in sequence. The ability to transfer control from one statement to
another, perhaps conditionally, makes SNOBOL4 much more usable. </p>

<p style="margin-left: 9pt;">Labels provide names for statements. If present,
they must begin in the first character position of a statement, and must start
with a letter or number. Additional characters may be anything but blank or
tab. Like variable names, lower-case letters are equivalent to upper-case when
case-folding (the default). </p>

<h3 style="margin-left: 9pt;"><a name="2.2.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">The GOTO Field</span></b>
</a></h3>

<p style="margin-left: 9pt;">Transfer of control is made possible by the GOTO.
It interrupts the normal sequential execution of statements by telling SNOBOL4
which statement to execute after the present one. The GOTO field appears at the
end of the statement, preceded by a colon (:), and has one of these forms: </p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>:<span class="GramE">(label</span>)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">:S</span>(label)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">:F</span>(label)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">:S</span>(label1) F(label2)<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">White space is required before the
colon. "Label" is the name given the target statement, and must be
enclosed in parentheses. If the first form is used, execution resumes at the
referenced statement, unconditionally. In the second and third forms, transfer
occurs only if the statement has succeeded or failed, respectively. Otherwise,
execution proceeds to the next statement in line. If the fourth form is used,
transfer is made to label1 if the statement succeeded or to label2 if it
failed. A statement with a label and a GOTO would look like this: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><b><span style="color: rgb(0, 51, 102);">COPY<span style="">    </span>OUTPUT = INPUT<span style="">           </span><span class="GramE">:F</span>(DONE)<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">Now let's write a short program
which copies keyboard input to the screen, and reports the total number of
lines. If you are an accurate typist, you can type it into SNOBOL4 directly.
Otherwise, you should use your text editor to create a file containing the
program text. First stop the CODE.SNO program by typing END: </p>

<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE"><b><span style="color: rgb(0, 51, 102);">?END</span></b></span><b><span style="color: rgb(0, 51, 102);"><p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><p> </p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>B&gt;SNOBOL4 CON<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><p> </p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">Vanilla SNOBOL4<span style="">      </span>Version 2.14.</span><p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>(c) Copyright 1984<span class="GramE">,1988</span> <span class="SpellE">Catspaw</span>, Inc. All Rights Reserved.<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Enter program, terminate with "END"<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>N = 0<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">?COPY</span><span style="">   </span>OUTPUT = INPUT<span style="">           </span>:F(DONE)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>N = N + 1<span style="">                </span>:<span class="GramE">(COPY</span>)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">?DONE</span><span style="">   </span>OUTPUT = 'THERE WERE ' N ' LINES'<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">?END</span><p></p></span></b></pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>No errors</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>TYPE IN A TEST LINE</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>TYPE IN A TEST LINE</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>AND ANOTHER</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>AND ANOTHER</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>^Z</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>THERE WERE 2 LINES</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>B&gt;</pre>

<p class="MsoNormal" style="margin-left: 9pt;">We start the line count in
variable N at 0. The next statement has a label, COPY, a statement body, and a
GOTO field. It is an assignment statement, and begins execution by reading a
line of input. If INPUT successfully obtains a line, the result is stored in
OUTPUT. The GOTO field is only testing for failure, so SNOBOL4 proceeds to the
next statement, where N is incremented, and the unconditional GOTO transfers
back to statement COPY. </p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>When an End-of-File is read, variable INPUT signals failure.
Execution of this statement terminates immediately, without performing the
assignment, and transfers to the statement labeled DONE. The number of lines is
displayed, and control flows into the END statement, stopping the program. <p></p></span></p>

<h3 style="margin-left: 9pt;">
<a name="2.3"><b><span style="color: rgb(0, 51, 102);">5 Built-In
Functions </span></b></a><b><span style="color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>A function is analogous to an operator; it operates on data to
produce a result. The data objects are called the arguments of the function.
The result returned -- the function of the arguments -- may have two
components: the success or failure signal; and for success, a value. The value
may be any data type. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>A function is used by writing its name and a list of arguments enclosed
by parentheses: <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'><span style="">    </span></span><b><span style='font-size: 10pt; font-family: "Courier New"; color: rgb(0, 51, 102);'>FUNCTION_<span class="GramE">NAME(</span>ARG1, ARG2, ..., <span class="SpellE">ARGn</span>)<p></p></span></b></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>It may appear in your program anywhere a constant is allowed -- in
expressions, patterns, even as the argument of another function. If the
function has more than one argument, they should be separated by commas. If
trailing arguments are omitted, SNOBOL4 will supply the null string instead.
Some functions, such as one that returns the current date, have no arguments at
all. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>SNOBOL4 provides a large number of predefined functions, and
allows you to define your own. The large repertoire of built-in functions makes
SNOBOL4 programming easier. Most functions are concerned with pattern matching,
input/output, and advanced features of the language. Here we'll introduce a few
simple conditional, <span class="GramE">numeric</span>, and string functions to
give you an idea of the variety. Try them interactively with CODE.SNO. <p></p></span></p>

<h3 style="margin-left: 9pt;"><a name="2.3.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Conditional Functions</span></b>
</a></h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>These functions fail or succeed depending upon their arguments.
They are sometimes called predicate functions because the success of an
expression using them is predicated upon their success. If they succeed, they
return the null string as their value. <p></p></span></p>

<pre style="margin-left: 9pt;"><span style='font-size: 12pt; font-family: "Trebuchet MS";'><span style="">    </span>Function<span style="">        </span><span style="">      </span><span style=""> </span>Succeeds if:<p></p></span></pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>IDENT(S<span class="GramE">,T</span>)<span style="">       </span>S and T are identical.<span style="">  </span>S and T may be constants</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">or</span> variables with any data type.<span style="">  </span>To</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">be</span> identical, the arguments must have the</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">same</span> data type and value.<span style="">  </span>Since omitted arguments</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">default</span> to the null string, IDENT(S)</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">succeeds</span> if S is the null string.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>DIFFER(S<span class="GramE">,T</span>)<span style="">      </span>S and T are different.<span style="">  </span>DIFFER is the opposite</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">of</span> IDENT.<span style="">  </span>DIFFER(S) succeeds if S is</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">not</span> the null string.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>EQ(X<span class="GramE">,Y</span>)<span style="">          </span>Integers X and Y are equal.<span style="">  </span>X and Y must be</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">integers</span>, or strings which can be converted</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">to</span> integers.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>NE(X<span class="GramE">,Y</span>)<span style="">          </span>Integers X and Y are not equal.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>GE(X<span class="GramE">,Y</span>)<span style="">          </span>Integer X is greater than or equal to Y.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>GT(X<span class="GramE">,Y</span>)<span style="">          </span>Integer X is greater than Y.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>LE(X<span class="GramE">,Y</span>)<span style="">          </span>Integer X is less than or equal to Y.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>LT(X<span class="GramE">,Y</span>)<span style="">          </span>Integer X is less than Y.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>INTEGER(X)<span style="">       </span>X is an integer, or a string which can be</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">converted</span> to an integer.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>LGT(S<span class="GramE">,T</span>)<span style="">    </span><span style="">     </span>String S is lexically greater than string T</pre>
<pre style="margin-left: 9pt;"><span style="">                     </span><span class="GramE">using</span> a character-by-character comparison.</pre>

<p class="MsoNormal" style="margin-left: 9pt;">Leading blanks may be used in
front of <span class="GramE">a</span> argument for readability. Here are some
exercises for CODE.SNO: </p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span>N = 3<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">EQ(</span>N, 3)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">IDENT(</span>N, 3)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">EQ(</span>3, "3")<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span><span class="GramE">?IDENT</span>(3, "3")<span style="">                   </span>(integer and string)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Failure<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">EQ(</span>N, 4)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Failure<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">NE(</span>N, 4)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">INTEGER(</span>N)<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">INTEGER(</span>'47')<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">DIFFER(</span>'ABC', '<span class="SpellE">abc</span>')<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">IDENT(</span>'a' 'b' 'c', '<span class="SpellE">abc</span>')<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Success<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>?<span style="">       </span><span class="GramE">LGT(</span>'ABC', 'ABD')<p></p></span></b></pre>
<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>Failure<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">When any of these functions
succeed, they return a null string. Since other statement elements are not
altered when concatenated with the null string, this provides an easy way to
interpose tests and construct loops. Suppose we execute the statement: </p>

<pre style="margin-left: 9pt;"><b><span style="color: rgb(0, 51, 102);"><span style="">    </span>N = <span class="GramE">LT(</span>N,10) N + 1<span style="">       </span>:S(</span></b><place><b><span style="color: rgb(0, 51, 102);">LOOP</span></b></place><b><span style="color: rgb(0, 51, 102);">)<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;">Function LT fails if N is 10 or
greater. If the statement fails, the assignment is not performed, and execution
continues with the next statement. However, if LT succeeds, its null string
value is concatenated with the expression N + 1, and the result is assigned to
N. This has the effect of increasing N by 1 and transferring to statement <place>LOOP</place>
until N reaches 10. </p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>If we concatenated several conditional functions together, and
they all succeeded, the result would still be the null string. If any function
failed, the entire concatenation would fail. This gives us a simple way to
produce a successful result if a number of conditions are all true. For
example, the expression: <p></p></span></p>

<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE"><b><span style="color: rgb(0, 51, 102);">INTEGER(</span></b></span><b><span style="color: rgb(0, 51, 102);">N) GE(N,5) LE(N,100)<p></p></span></b></pre>

<p class="MsoNormal" style="margin-left: 9pt;"><span class="GramE">Succeeds if N is
an integer between 5 and 100.</span> </p>

<h3 style="margin-left: 9pt;"><a name="2.3.2"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Other Functions</span></b>
</a></h3>

<p style="margin-left: 9pt;">These functions always succeed; all but REMDR and
SIZE return a string result. </p>

<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE">DATE(</span>)<span style="">              </span>Return current date and time as a string.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>DUPL(S<span class="GramE">,N</span>)<span style="">           </span>Duplicate string S, N times.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>REMDR(X<span class="GramE">,Y</span>)<span style="">          </span>Produce the remainder (modulus) of X / Y.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span><span class="GramE">REPLACE(</span>S1,S2,S3)<span style="">  </span><span style=""> </span>Return string S1 after performing the</pre>
<pre style="margin-left: 9pt;"><span style="">                        </span><span class="GramE">character</span> replacements specified by strings</pre>
<pre style="margin-left: 9pt;"><span style="">                        </span><span class="GramE">S2 and S3.</span><span style="">  </span>S2 specifies which characters to</pre>
<pre style="margin-left: 9pt;"><span style="">                        </span><span class="GramE">replace</span>, and S3 specifies what to replace</pre>
<pre style="margin-left: 9pt;"><span style="">              </span><span style="">          </span><span class="GramE">them</span> with.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>SIZE(S)<span style="">             </span>Return the number of characters in string S.</pre>
<pre style="margin-left: 9pt;"><p> </p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>TRIM(S)<span style="">             </span>Return string S with trailing blanks removed.</pre>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;">Exercises for CODE.SNO: </p>

<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = 'THE DATE AND TIME ARE: ' <span class="GramE">DATE()</span></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>THE DATE AND TIME ARE: <date month="10" day="19" year="1987">10-19-87</date> 11:49:33.90</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">DUPL(</span>'ABC', 20)</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABC</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">SIZE(</span>'ZIPPY')</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>5</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">SIZE(</span>'')</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>0</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">TRIM(</span>'TRAILING BLANKS <span style=""> </span>') 'GONE'</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>TRAILING BLANKSGONE</pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">REPLACE(</span>'<span class="SpellE">spoon','po','</span><place><span class="SpellE">PO</span></place>')</pre>
<pre style="margin-left: 9pt;"><span style="">    </span><span class="SpellE"><span class="GramE">sPOOn</span></span></pre>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);"><p> </p></span></b></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">6. Arrays<p></p></span></b></p>

<h3 style="margin-left: 9pt;">
<a name="5.4.1"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Array Concepts </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Arrays in SNOBOL4 are similar to arrays in other programming
languages. They allow a single variable name to specify more than one data
element; integer subscripts distinguish the individual members of an array. Each
array element may contain any data type, independent of the types in other
array elements. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>A one-dimensional array is a "vector;" it is simply a
list of I items. A two-dimensional array is a "grid" composed of
several adjacent vectors -- an I by J array <span class="GramE">has</span> I rows
and J columns. A three-dimensional array, I by J by K in size, is a rectangular
solid consisting of K adjacent grids. There's no limit to the number of
dimensions allowed, but such arrays become increasingly difficult to visualize.
<p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>In keeping with SNOBOL4's pliability, an array is defined during
program execution, rather than at compilation time. Its size and shape is
specified by a string. The definition of an array may be changed at any time,
or the array may be deleted and its memory reused when it is no longer needed. <p></p></span></p>

<h3 style="margin-left: 9pt;">
<a name="5.4.2"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Array
Creation</span></b> </a><p></p>
</h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Arrays are created by the SNOBOL4 function ARRAY. A program calls
this function with a "prototype string" which specifies the number of
dimensions and their sizes. The function returns an "array pointer,"
which is stored in a variable; the array elements are referenced by applying
subscripts to this variable. Here are two statements for use with CODE.SNO.
They create <span class="SpellE">oneand</span> two-dimensional arrays named LIST
and BOX respectively: <p></p></span></p>

<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>LIST = <span class="GramE">ARRAY(</span>'25')<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>BOX = <span class="GramE">ARRAY(</span>'12,3')<p></p></pre>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>LIST points to a vector of 25 elements. <span class="GramE">BOX
points to a grid, 12 rows high and 3 columns wide, containing 36 elements.</span>
The ARRAY function initializes all array elements to the null string. <p></p></span></p>

<h3 style="text-indent: 9pt;">
<a name="5.4.3"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Array Referencing </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Array subscripts are integer valued, and are specified by angular
or square brackets (&lt;&gt; or []). Subscript values range from 1 to the size
of each dimension. If you attempt to use a subscript outside this range, the
array reference will fail, and the failure may be detected in the GOTO portion
of the statement. Try some array references with CODE.SNO: <p></p></span></p>

<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>LIST&lt;3&gt; = 'MAPLE'<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span><span class="GramE">BOX[</span>10,2] = 3<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span><span class="GramE">LIST[</span>33] = 4<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>Failure<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">LIST[</span>3] LIST[4] BOX&lt;10,2&gt;<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>MAPLE3<p></p></pre>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Angular and square brackets are interchangeable. The reference to <span class="GramE">LIST[</span>33] failed because the largest subscript allowed for
that array is 25. <span class="GramE">LIST[</span>4] produced its initialized
value, the null string, and had no effect on the concatenation. The array
pointer in LIST can be assigned to another variable: <p></p></span></p>

<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>B = LIST<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">B[</span>3]<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>MAPLE<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>B&lt;3&gt; = 'WILLOW'<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span>?<span style="">       </span>OUTPUT = LIST&lt;3&gt;<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">    </span><city><place>WILLOW</place></city><p></p></pre>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Assigning the pointer in LIST to B made both variables point to
the same array. Since there's but one actual array, array references made using
LIST or B are equivalent. The COPY function creates a duplicate copy of an entire
array. <p></p></span></p>

<p style="margin-left: 9pt;"><span style='font-family: "Trebuchet MS"; color: black;'>Array elements may be used anywhere a variable name is allowed --
expressions, patterns, function arguments, etc. The fact that an array
reference fails if a subscript is out-<span class="SpellE">ofbounds</span> can be
used in a simple and natural way when scanning an array. Rather than having to
know an array's size, we simply loop until an array reference fails. A program
segment to display the members of an array SCORE might look like this: <p></p></span></p>

<pre style="margin-left: 9pt;"><span style="">   </span>I = 0<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">   </span>I = I + 1<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">   </span>OUTPUT = <span class="GramE">SCORE[</span>I]<span style="">                    </span>:S(PRINT)<p></p></pre>
<pre style="margin-left: 9pt;"><span style="">   </span>. . .<p></p></pre>

<h3>
<a name="5.4.4"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Array Initialization </span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h3>

<p><span style='font-family: "Trebuchet MS"; color: black;'>Arrays may be created
with an initial value other than the null string. ARRAY accepts a second
argument which specifies this initial value. We can create a three-dimensional
array with all elements initialized to the string 'PA-18' as follows: <p></p></span></p>

<pre><span style="">    </span>?<span style="">       </span>A = <span class="GramE">ARRAY(</span>'2,3,4','PA-18')<p></p></pre>
<pre><span style="">    </span>?<span style="">       </span>OUTPUT = <span class="GramE">A[</span>1,2,3]<p></p></pre>
<pre><span style="">    </span>PA-18<p></p></pre>

<p class="MsoNormal" style="margin-left: 0.25in;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 0.25in;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">7. Compilers<p></p></span></b></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image003.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><b><a href="ftp://cs.arizona.edu/snobol4/budne/beta2.tar.Z">Snobol4 Beta2</a></b></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image003.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><span style='font-family: "Times New Roman"; color: windowtext;'><a href="ftp://cs.arizona.edu/snobol4/vanilla.arc"><b>Snobol4</b> <b>Vanilla</b></a></span></span></p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">8. Projects and Software in SNOBOL<p></p></span></b></p>

<h2 style="margin-left: 27pt;"><a name="apparea"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Areas of Application<p></p></span></b></a></h2>

<p class="MsoNormal" style="margin-left: 9pt;"><span style="">SNOBOL4
is use primarily as a research tool rather than for commercial applications. </span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><span style=""><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Analysis of Literature </span></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><span style=""><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Analysis of Music </span></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><span style=""><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Computer experts using it for database programs. </span></span></p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);">10. References<p></p></span></b></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">SNOBOL.- <a href="http://en.wikipedia.org/wiki/SNOBOL">http://en.wikipedia.org/wiki/SNOBOL</a></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;" lang="ES-MX"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr"><span style="" lang="ES-MX">SNOBOL Tutorial.- <a href="http://burks.bton.ac.uk/burks/language/snobol/catspaw/tutorial/contents.htm">http://burks.bton.ac.uk/burks/language/snobol/catspaw/tutorial/contents.htm</a><p></p></span></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">The SNOBOL Programming Language.- <a href="http://www.engin.umd.umich.edu/CIS/course.des/cis400/snobol/snobol.html">http://www.engin.umd.umich.edu/CIS/course.des/cis400/snobol/snobol.html</a></span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">SNOBOL History.- <a href="http://www.snobol4.org/history.html">http://www.snobol4.org/history.html</a>
</span></p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Introduction to SNOBOL.- <a href="http://cs.fit.edu/%7Edclay/cse5040/snobol.html">http://cs.fit.edu/~dclay/cse5040/snobol.html</a></span></p>

<h2>
<a name="prntref"><b><span style="font-size: 12pt; color: rgb(0, 51, 102);">Printed References</span></b></a><b><span style="font-size: 12pt; color: rgb(0, 51, 102);"><p></p></span></b>
</h2>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Griswold, Ralph E., J. F. Poage, and </span><place>I.</place>
P. Polonsky. <i>The SNOBOL 4 Programming Language</i>. <city><place>Englewood</place></city>
Cliffs, NJ: Prentice Hall, 1968.</p>

<p class="MsoNormal" style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span style="font-family: Wingdings;"><span style=""><img src="NETB131%20Programming%20Project_files/image002.gif" alt="*" height="13" width="13"><span style='font-family: "Times New Roman"; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-size-adjust: none; font-stretch: normal;'>      </span></span></span><!--[endif]--><span dir="ltr">Hockey, Susan M. <i>SNOBOL Programming for the Humanities</i>. </span><state><place>New
  York</place></state>: Clarendon Press; <city><place>Oxford</place></city>:
<place><placename>Oxford</placename> <placetype>University</placetype></place>
Press, 1985.</p>

<p class="MsoNormal" style="margin-left: 9pt;"><b><span style="font-size: 14pt; color: rgb(0, 51, 102);"><br style="">
<!--[if !supportLineBreakNewLine]--><br style="">
<!--[endif]--></span></b><p></p></p>

<p class="MsoNormal" style="margin-left: 9pt;"><p> </p></p>

</div>

</body>
</html>
