//17. Шаблони за функции; предефиниране.  
//
// Fig 11.1: fig11_01.cpp
// Using template functions.
#include <iostream>

using std::cout;
using std::endl;

// function template printArray definition
template< class T >
void printArray( const T *array, const int count )
{
   for ( int i = 0; i < count; i++ )
      cout << array[ i ] << " ";

   cout << endl;

} // end function printArray

int main()
{
   const int aCount = 5;
   const int bCount = 7;
   const int cCount = 6;

   int a[ aCount ] = { 1, 2, 3, 4, 5 };
   double b[ bCount ] = { 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7 };
   char c[ cCount ] = "HELLO";  // 6th position for null

   cout << "Array a contains:" << endl;

   // call integer function-template specialization
   printArray( a, aCount );  

   cout << "Array b contains:" << endl;

   // call double function-template specialization
   printArray( b, bCount );  

   cout << "Array c contains:" << endl;

   // call character function-template specialization
   printArray( c, cCount );  

   return 0;

} // end main
