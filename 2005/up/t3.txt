                              Трети тест

Отбележете с "да" цикъл for, който ще се изпълни точно 2 пъти.
(да) for(j = 1; j < 3; j++) cout << j;
(не) for(j = 1; j <= 3; j++) cout << j;

Отбележете с "да" операторите, които не са безкраен цикъл.
k е цяла променлива със стойност -32000.
(да) while (false) {k++;}
(не) while (true) k++;

Отбележете с "да" случаите, при които тялото на цикъла ще се
изпълни точно веднъж, ако променливата hi има стойност 0.
(не) while (hi > 0) {hi++;}
(да) do hi++; while (false);

Отбележете с "да" операторът от главна функция main, който ще
отпечата числото 10.
    int new_sum(int n)
    { if (n <= 1) return 1;
      else return n + new_sum(n - 1);
    }
(да) cout << new_sum(4);
(не) cout << new_sum(5);

Дадена е следната декларация на функция:
      int were(int me, int &you);
Верни ли са дадените оператори за извикване на функцията were,
ако преди извикването има оператор int is=2;
(да) cout << were(10, is);
(не) cout << were(is, 2);

Верни ли са следните твърдения за вектори?
(да)Векторът представлява множество от данни от един и същи тип.
(не)Допустимите стойности на индекса на вектор са от 0 до размера на вектора.

Даден е вектор и стойности на елементите му.
    vector<double> a(2);
    a[0] = 0.5;
    a[1] = 1.5;
Правилно ли е използван векторът a?
(да) int k = a.size();
(не) int size_a = size(a);

Верни ли са операторите за деклариране на функцията q с
използване на вектори?
(да) int q(vector<int> a);
(не) void q(vector<double> &d(10));

Отбележете с "да" (синтактично) правилно написаните оператори за цикъл.
Всички използвани променливи са предварително дефинирани от тип
int| и имат стойност 1.
(да) for (t = -1; t < 4; t++) cout << t;
(не) for {y = 1; y < 10; y++} cout << h;

Отбележете с "да" (синтактично и логически) правилно написаните оператори с
вектори. Променливата b е от тип vector<int> и съдържа 10 елемента.
(да) vector<int> a(10);
(не) vector a(100);

Верни ли са следните твърдения за класове?
(не) Класът представлява множество от данни от един и същи тип.
(да) Конструктор без параметри се нарича конструктор по подразбиране.

Отбележете с "да" онези декларации на функции, които могат да
бъдат конструктори на класове.
(да) Point(double x, double y);
(не) void Do();

Даден е класът
   class Product    {
   public:
      Product();
      Product(string n, double p, int s);
      void read();
      string get_name() const;
      double get_price() const;
      void print() const;
   private:
      string name;
      double price;
      int score;    };
и обект от този клас p, дефиниран в main.
Отбележете с "да" операторите, които могат да се срещат в блока на
функцията main.
(не) cout << p.name;
(да) cout << p.get_name().substr(0,10);

