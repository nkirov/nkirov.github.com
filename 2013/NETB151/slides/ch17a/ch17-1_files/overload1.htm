<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><title>overload1.htm</title><!-- Generated by SynEdit HTML exporter --></head>

<body bgcolor="#ffffff" text="#000000">
<pre><code><font face="Courier New" size="3"><font color="#008000">#include </font>&lt;iostream&gt;<br><font color="#008000">#include </font>&lt;iomanip&gt;<br><br><b>using namespace </b>std;<br><br><font color="#008000">#include </font><font color="#ff0000">"ccc_time.cpp"<br><br></font><b>class </b>Time_new : <b>public </b>Time {<br><b>public</b>:<br>  <b>int operator</b>-(Time_new b) <b>const</b>;<br>  Time_new <b>operator</b>+(<b>int </b>sec) <b>const</b>;<br>  <b>bool operator</b>==(Time_new b) <b>const</b>;<br>  <b>bool operator</b>!=(Time_new b) <b>const</b>;<br>  Time_new <b>operator</b>++();   <font color="#000080"><i>// prefix<br>  </i></font>Time_new <b>operator</b>++(<b>int </b>dummy);  <font color="#000080"><i>// postfix<br>  </i></font><b>friend </b>ostream&amp; <b>operator</b>&lt;&lt;(ostream&amp; out, Time_new a);             <br>};<br><br><font color="#000080"><i>/**<br>   Compute the number of seconds between two points in time.<br>   @param b another point in time<br>   @return the number of seconds that a is away from b<br>*/<br></i></font><b>int </b>Time_new::<b>operator</b>-(Time_new b) <b>const<br></b>{  <b>return this</b>-&gt;seconds_from(b);<br>}<br><br><font color="#000080"><i>/**<br>   Compute a point in time that is some number of seconds away.<br>   @param sec the seconds to add<br>   @return a point in time that is sec seconds away from a<br>*/<br></i></font>Time_new Time_new::<b>operator</b>+(<b>int </b>sec) <b>const<br></b>{  Time_new r = *<b>this</b>;<br>   r.add_seconds(sec);<br>   <b>return </b>r;<br>}<br><br><font color="#000080"><i>/**<br>   Compare two points in time<br>   @param b another point in time<br>   @return true if they are the same<br>*/<br></i></font><b>bool </b>Time_new::<b>operator</b>==(Time_new b) <b>const<br></b>{  <b>return this</b>-&gt;seconds_from(b) == <font color="#800080">0</font>;<br>}<br><br><font color="#000080"><i>/**<br>   Compare two points in time.<br>   @param b another point in time<br>   @return true if they are the different<br>*/<br></i></font><b>bool </b>Time_new::<b>operator</b>!=(Time_new b) <b>const<br></b>{  <b>return </b>!(*<b>this </b>== b);<br>}<br><br><font color="#000080"><i>/**<br>   Prefix increment by 1 second.<br>   @return the new value<br>*/<br></i></font>Time_new Time_new::<b>operator</b>++()   <font color="#000080"><i>// prefix<br></i></font>{  *<b>this </b>= *<b>this </b>+ <font color="#800080">1</font>;<br>   <b>return </b>*<b>this</b>; <br>}<br><br></font></code><code><font face="Courier New" size="3"><font color="#000080"><i>/**<br>   Postfix increment by 1 second.<br>   @return the old value<br>*/</i></font></font></code><code><font face="Courier New" size="3">    <br>Time_new Time_new::<b>operator</b>++(<b>int </b>dummy)  <font color="#000080"><i>// postfix<br></i></font>{  Time_new t = *<b>this</b>;<br>   *<b>this </b>= *<b>this </b>+ <font color="#800080">1</font>;<br>   <b>return </b>t;<br>}    <br><br><font color="#000080"><i>/**<br>   Print a Time object<br>   @param out an output stream<br>   @param a a point in time<br>   @return out<br>*/<br></i></font>ostream&amp; <b>operator</b>&lt;&lt;(ostream&amp; out, Time_new a)<br>{  out &lt;&lt; a.get_hours() &lt;&lt; <font color="#ff0000">":"<br>      </font>&lt;&lt; setw(<font color="#800080">2</font>) &lt;&lt; setfill('0') <br>      &lt;&lt; a.get_minutes() &lt;&lt; <font color="#ff0000">":"<br>      </font>&lt;&lt; setw(<font color="#800080">2</font>) &lt;&lt; a.get_seconds() &lt;&lt; setfill(' ');<br>   <b>return </b>out;<br>} <br><br><b>int </b>main()<br>{  Time_new now;<br>   cout &lt;&lt; <font color="#ff0000">"now: " </font>&lt;&lt; now &lt;&lt; endl;<br>   Time_new later = now + <font color="#800080">1000</font>;<br>   cout &lt;&lt; <font color="#ff0000">"later: " </font>&lt;&lt; later &lt;&lt; endl;<br>   Time_new now2;<br>   <b>if </b>(now == now2)<br>      cout &lt;&lt; <font color="#ff0000">"now == now2: " </font>&lt;&lt; now2 &lt;&lt; endl;<br>   <b>if </b>(now != now2)<br>      cout &lt;&lt; <font color="#ff0000">"now != now2 " </font>&lt;&lt; now2 &lt;&lt; endl;<br>   cout &lt;&lt; <font color="#ff0000">"now++: " </font>&lt;&lt; now++ &lt;&lt; <font color="#ff0000">"  ++now2: " </font>&lt;&lt; ++now2 &lt;&lt; endl;<br>   cout &lt;&lt; <font color="#ff0000">"now: " </font>&lt;&lt; now &lt;&lt; <font color="#ff0000">" now2: " </font>&lt;&lt; now2 &lt;&lt; endl;<br>   cout &lt;&lt; <font color="#ff0000">"later - now2: " </font>&lt;&lt; later - now2 &lt;&lt; endl;<br>   <b>char </b>ch; cin &gt;&gt; ch;   <br>   <b>return </b><font color="#800080">0</font>;<br>}<br><br></font>
</code></pre>
</body></html>