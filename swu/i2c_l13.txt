13. Хеш-таблици 
 -- Дефиниция
 Метод за реализация на линейни структури от данни.
 Даден е масив с n елемента и данни с ключ, който е
от нареденото множеството D, като |D|>>n.
 Хеш-функция h: 0<=h(d)<n за всяко d от D, например
             h(d)=d%n.
 Когато за различни d1 и d2 имаме h(d1)=h(d2)=i, казваме,
 че е налице колизия за елемента на масива с индекс i. 

 -- Методи за разрешаване на колизии
- Пряко свързване (свързан списък)
 Всеки елемент на масива съдържа адресно поле - начало
на свързан списък, където се записват данните при колизия.
struct Item {
   int key;
   Item *next; };
const n=100;
Item hesh[n];

void AddItem(int k)
{
 Item *h; 
 int k0=k%n;
 if (!n[k0].key) n[k0].key=k; 
 else // колизия
 {
  h=new Item;
  h->key=k;
  h->next=n[k0].next;
  n[k0].next=h;
 }
}

- Отворено адресиране 
 При колизия данната се записва в първия срещнат незапълнен
елемент на масива. Понякога се организира и "цикличен" масив.
Броя на данните не трябва да превишава дължината на масива.
const n=100;
int Item[n];

int next_i(int i)
{
 if (i<n-1) return (++i);
 else return 0;
}

int AddItem(int k)
{
 int k0=k%n; 
 if (!Item[k0]) Item[k0]=k; 
 else \\ колизия
 {
  int i=next_i(i);
  while (Item[i] && !(i==k0)) i=next_i(i);
  if (i==k0) 
  {
   cout << "Масивът е пълен!";
   return 0;
  }
  else
  {
   Item[i]=k;
   return 1;
  }
 }
}