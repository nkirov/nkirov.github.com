/************************
Индекс на Шапли-Шубик за политическа сила при да-не система за гласуване

Във всеки съюз или обединение от политически субекти (напр. държави)
се налага да се приеме система за вземане на решения. Една такава система
е да се гласува с ``да'' или ``не'', като всяка държава да има определен брой
гласове. Решение да се взема когато броят на гласовете ``да'' е по-голям или 
равен на определена граница. Коалиция се нарича група държави, която гласува 
с ``да'' за дадено предложение. Ако сумата от гласовете на държавите в 
коалицията е по-голяма или равна на определената граница, то предложението се 
приема и тази коалиция се нарича печеливша.  

Например през 1958 г. се създава Европейския съюз с точно такава система за
вземани на важни решения. Участващите в съюза държави и гласовете им са:
Франция, Германия, Италия -- по 4 гласа,
Белгия, Холандия -- по 2 гласа,
Люксембург -- 1 глас.
Предложение се приема, ако за него са гласували с ``да'' 12 от общо 17 гласа.
Две печеливши коалиции в съюза са например Франция, Германия и Италия или Франция, Германия, Белгия, Холандия и Люксембург.

Една от няколкото известни мерки за политическата сила на дадена държава в
един съюз е индексът на Шапли-Шубик. Ето как се дефинира този индекс.
Нека съюзът се състои от $n$ държави - $p_1, p_2, \ldots, p_n$.
Разглеждаме всички възможне наредби на $n$-те държави. Нека индексите
$i_1, i_2, \ldots, i_n$ задават една конкретна наредба. 
Държавата $p_{i_k}$ се нарича централна за тази наредба, ако
коалицията, състояща се от $p_{i_1}, p_{i_2}, \ldots, p_{i_{k-1}}$ 
не е печеливша, а коалицията $p_{i_1}, p_{i_2}, \ldots, p_{i_k}$ е печеливша.
Индекс на Шапли-Шубик за държавата $p$ се нарича отношението на броя на
наредбите, в които $p$ е централна към броя на всички възможни наредби. 
Да се напише програма за пресмятане на индекса на Шапли-Шубик.

Вход -- текстов файл shsh.in
Съдържа няколко тестови примери. Данните за всеки
от примерите са записани на два последователни реда във файла.
Първият ред за всеки от примерите съдържа две цели числа, разделени
с един интервал -- броят $N$ на държавите в съюза $(1<N<11)$ и
необходимият брой гласове $V$ за вземане на решение.
На следващия ред има $N$ цели числа (разделени с по един
интервал), които са гласовете на участниците в съюза.
Файлът завършва с ред, съдържащ числото 0.

Изход -- текстов файл shsh.out
За всеки пример трябва да се изведат $N$ цели числа, по едно на ред,
всяко равно на индекса на Шапли-Шубик, изразен в проценти за
поредния участник в съюза. Числата да са закръглени (по общоприетите правила
за закръгляване) с 1 значеща цифра след десетичната точка.
Между изходните данни за отделните примери трябва да се оставя по един
празен ред.

Примерен вход:

3 51
50 49 1
6 12
4 4 4 2 2 1
0

Примерен изход:
66.6
16.6
16.6

23.3
23.3
23.3
15
15
0
************************/

#include <fstream>
using namespace std;

typedef unsigned long long lint;
double b[100]={0};
lint Nfact;
int N, SUM;
int c[100], d[100], k, state;

lint fact(int n)
{
 lint l=1, i;
 for (i=1; i<=n; i++) l*=i;
 return l;
}

void call()
{
 int sum=0, iii=0, i;
 for (i=1; i<=k; i++)
 {
  if (d[i]<state) iii=d[i]; else iii=d[i]+1;
  sum+=c[iii];
 }
 if ((sum<SUM) && (sum+c[state]>=SUM))
 {
//  b[state]+=static_cast<double>(fact(k)*fact(N-k-1))/Nfact;
  long double w=fact(N-k-1);
  for (i=k+1; i<=N; i++) w/=i;
  b[state]+=w;
 }
}

void comb(int nn)
{
 if (nn==k+1) call();
 else
 {
  for (int i=d[nn-1]+1; i<N-k+nn; i++)
  {
   d[nn]=i; comb(nn+1);
  }
 }
}


int main()
{
 ifstream fin("shsh.in");
 ofstream fout("shsh00.out");
 fin >> N;
 Nfact=fact(N);
 while (N>0)
 {
  fin >> SUM;
  c[0]=0; b[0]=0.0;
  int i;
  for (i=1; i<=N; i++)
  {
   fin >> c[i]; b[i]=0.0;
  }
  for (i=1; i<=N; i++)   // for states
  {
   state=i;
   for (int j=1; j<=N; j++)  // for positions
   {
    k=j-1;
    d[0]=0; comb(1);
   }
  }
  double s=0;
  for (i=1; i<=N; i++)
  {
   fout << int((100*b[i]+0.05)*10.0)/10.0 << "\n";
   s+=b[i];
   cout << b[i] << "  ";
  }
  cout << "\n" << s << "\n";
  fout << "\n";
  fin >> N;
  Nfact=fact(N);
  cout << "Nfact=" << Nfact << "\n";
 }
 cin.get();
 return 0;
}
/*****************shsh.in***************
3 51
50 49 1
6 12
4 4 4 2 2 1
6 13
4 4 4 2 2 1
11 10
2 2 2 2 2 2 2 2 2 2 2
14 20
1 1 2 2 3 3 4 4 5 5 6 6 7 7
20 30
1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10
0
******************/
/******************shsh.out
66.7
16.7
16.7

23.3
23.3
23.3
15
15
0

21.7
21.7
21.7
11.7
11.7
11.7

9.1
9.1
9.1
9.1
9.1
9.1
9.1
9.1
9.1
9.1
9.1

1.6
1.6
3.4
3.4
5.2
5.2
7
7
8.9
8.9
10.9
10.9
13
13

0.9
0.9
1.7
1.7
2.6
2.6
3.5
3.5
4.5
4.5
5.4
5.4
6.4
6.4
7.3
7.3
8.3
8.3
9.3
9.3

******************/
