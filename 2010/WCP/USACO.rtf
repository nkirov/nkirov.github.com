{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch37\stshfloch37\stshfhich37\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset204\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
{\f4\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}{\f5\fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}{\f6\froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn;}
{\f7\fswiss\fcharset0\fprq2{\*\panose 020b0604020202030204}Helv;}{\f8\froman\fcharset0\fprq2{\*\panose 02020502060305060204}New York;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f10\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f11\fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}MS Mincho{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f12\froman\fcharset129\fprq2{\*\panose 02030600000101010101}Batang{\*\falt \'b9\'d9\'c5\'c1};}{\f13\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}SimSun{\*\falt \'cb\'ce\'cc\'e5};}
{\f14\fnil\fcharset136\fprq2{\*\panose 02010601000101010101}PMingLiU{\*\falt \'b7\'73\'b2\'d3\'a9\'fa\'c5\'e9};}{\f15\fmodern\fcharset128\fprq1{\*\panose 020b0609070205080204}MS Gothic{\*\falt \'82\'6c\'82\'72 \'83\'53\'83\'56\'83\'62\'83\'4e};}
{\f16\fmodern\fcharset129\fprq1{\*\panose 020b0600000101010101}Dotum{\*\falt \'b5\'b8\'bf\'f2};}{\f17\fmodern\fcharset134\fprq1{\*\panose 02010600030101010101}SimHei{\*\falt \'ba\'da\'cc\'e5};}
{\f18\fmodern\fcharset136\fprq1{\*\panose 02010609000101010101}MingLiU{\*\falt \'b2\'d3\'a9\'fa\'c5\'e9};}{\f19\froman\fcharset128\fprq1{\*\panose 02020609040305080305}Mincho{\*\falt \'96\'be\'92\'a9};}
{\f20\froman\fcharset129\fprq1{\*\panose 020b0600000101010101}Gulim{\*\falt \'b1\'bc\'b8\'b2};}{\f21\froman\fcharset204\fprq2{\*\panose 02040604050505020304}Century;}{\f22\froman\fcharset222\fprq2{\*\panose 02020603050405020304}Angsana New;}
{\f23\froman\fcharset222\fprq2{\*\panose 020b0304020202020204}Cordia New;}{\f24\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Mangal;}{\f25\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Latha;}
{\f26\froman\fcharset204\fprq2{\*\panose 010a0502050306030303}Sylfaen;}{\f27\fnil\fcharset0\fprq2{\*\panose 01010600010101010101}Vrinda;}{\f28\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Raavi;}
{\f29\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Shruti;}{\f30\froman\fcharset1\fprq2{\*\panose 00000400000000000000}Sendnya;}{\f31\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Gautami;}
{\f32\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}Tunga;}{\f33\froman\fcharset1\fprq2{\*\panose 00000000000000000000}Estrangella Edessa;}{\f34\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}
{\f35\fswiss\fcharset204\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f36\froman\fcharset204\fprq2{\*\panose 02040503050406030204}Cambria Math{\*\falt DejaVu Sans};}
{\f37\fswiss\fcharset204\fprq2{\*\panose 020f0502020204030204}Calibri{\*\falt Century Gothic};}{\f38\froman\fcharset204\fprq2{\*\panose 02040503050406030204}Cambria{\*\falt Palatino Linotype};}
{\f39\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f40\fmodern\fcharset204\fprq1{\*\panose 020b0609040504020204}Lucida Console;}{\f41\fswiss\fcharset204\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}
{\f42\fswiss\fcharset204\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f43\fswiss\fcharset204\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f44\fscript\fcharset204\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}
{\f45\fswiss\fcharset204\fprq2{\*\panose 020b0806030902050204}Impact;}{\f46\froman\fcharset204\fprq2{\*\panose 02040502050405020303}Georgia;}{\f47\fswiss\fcharset204\fprq2{\*\panose 020b0603020102020204}Franklin Gothic Medium;}
{\f48\froman\fcharset204\fprq2{\*\panose 02040502050505030304}Palatino Linotype;}{\f49\fswiss\fcharset204\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f50\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}
{\f51\fscript\fcharset0\fprq2 Estrangelo Edessa;}{\f52\fnil\fcharset0\fprq2 MV Boli;}{\f53\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Microsoft Sans Serif;}{\f54\froman\fcharset0\fprq2{\*\panose 02020503030404060203}Kartika;}
{\f55\fswiss\fcharset204\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f56\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}@Arial Unicode MS;}{\f57\froman\fcharset129\fprq2{\*\panose 02030600000101010101}@Batang;}
{\f58\froman\fcharset204\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f59\froman\fcharset204\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f60\fswiss\fcharset204\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f61\froman\fcharset204\fprq2{\*\panose 02020404030301010803}Garamond;}{\f62\fswiss\fcharset204\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f63\fmodern\fcharset128\fprq1{\*\panose 02020609040205080304}@MS Mincho;}
{\f64\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}{\f65\fscript\fcharset204\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f66\fnil\fcharset134\fprq2{\*\panose 02010600030101010101}@SimSun;}
{\f67\froman\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f68\froman\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f69\froman\fcharset2\fprq2{\*\panose 05050102010205020202}MT Extra;}
{\f70\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f71\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}SAfon;}{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0603030804020204}Bitstream Vera Sans;}
{\f73\fmodern\fcharset0\fprq1{\*\panose 020b0609030804020204}Bitstream Vera Sans Mono;}{\f74\froman\fcharset0\fprq2{\*\panose 02060603050605020204}Bitstream Vera Serif;}{\f75\fmodern\fcharset0\fprq1{\*\panose 02000509030000020004}Courant;}
{\f76\fnil\fcharset0\fprq2{\*\panose 02000503040000020004}Helonia;}{\f77\fnil\fcharset0\fprq2{\*\panose 02000500070000020004}MaplePi;}{\f78\fnil\fcharset0\fprq2{\*\panose 02000503080000020003}Thames;}
{\f79\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXOne;}{\f80\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXTwo;}{\f81\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXThree;}
{\f82\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXFour;}{\f83\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXFive;}{\f84\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXSix;}
{\f85\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXSeven;}{\f86\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXEight;}{\f87\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXNine;}
{\f88\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXTen;}{\f89\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXEleven;}{\f90\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXTwelve;}
{\f91\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXThirteen;}{\f92\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXFourteen;}{\f93\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXFifteen;}
{\f94\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXSixteen;}{\f95\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}ESSTIXSeventeen;}{\f96\fmodern\fcharset2\fprq1{\*\panose 02020509000000000000}FigurineCrrCB;}
{\f97\froman\fcharset2\fprq2{\*\panose 02020500000000000000}FigurineTmsCB;}{\f98\fnil\fcharset0\fprq2{\*\panose 02000500070000020004}SymbolPi;}{\f99\fswiss\fcharset0\fprq2{\*\panose 020e0602030304020304}Albertus Medium;}
{\f100\fswiss\fcharset0\fprq2{\*\panose 020e0802040304020204}Albertus Extra Bold;}{\f101\fswiss\fcharset0\fprq2{\*\panose 020b0602020202020204}ITC Avant Garde Gothic;}
{\f102\fswiss\fcharset0\fprq2{\*\panose 020b0802020202020204}ITC Avant Garde Gothic Demi;}{\f103\froman\fcharset0\fprq2{\*\panose 02050604050505020204}ITC Bookman Light;}{\f104\froman\fcharset0\fprq2{\*\panose 02050804040505020204}ITC Bookman Demi;}
{\f105\fswiss\fcharset0\fprq2{\*\panose 020b0502050508020304}CG Omega;}{\f106\froman\fcharset0\fprq2{\*\panose 02020603050405020304}CG Times;}{\f107\fscript\fcharset0\fprq2{\*\panose 03020702040403080804}ITC Zapf Chancery;}
{\f108\froman\fcharset0\fprq2{\*\panose 02040706040705040204}Clarendon Condensed;}{\f109\fscript\fcharset0\fprq2{\*\panose 03030502040406070605}Coronet;}{\f110\fmodern\fcharset0\fprq1{\*\panose 02070609020205020404}CourierPS;}
{\f111\froman\fcharset2\fprq2{\*\panose 05020102010704020609}ITC Zapf Dingbats;}{\f112\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnBde;}{\f113\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnBk;}
{\f114\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnBn;}{\f115\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnCoy;}{\f116\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnD&C;}
{\f117\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnMsc;}{\f118\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnPl;}{\f119\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnRgt;}
{\f120\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnSct;}{\f121\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - EnSqd;}{\f122\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Mapsym - G5;}
{\f123\fswiss\fcharset0\fprq2{\*\panose 020b0606020202030204}Helvetica Narrow;}{\f124\fmodern\fcharset0\fprq1{\*\panose 020b0409020202030204}Letter Gothic;}{\f125\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Blank;}
{\f126\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - Pl;}{\f127\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Coy;}{\f128\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Bn;}
{\f129\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Regt;}{\f130\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Bde;}{\f131\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Div & Corps;}
{\f132\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Eqpt;}{\f133\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Bde&Regt;}{\f134\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbols - Misc;}
{\f135\fscript\fcharset0\fprq2{\*\panose 03020702040402020504}Marigold;}{\f136\fswiss\fcharset2\fprq2{\*\panose 020b0603050302020204}Military;}{\f137\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mil SymMod 01;}
{\f138\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mil SymMod 02;}{\f139\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mil Red 01;}{\f140\fnil\fcharset2\fprq1{\*\panose 00000400000000000000}Mil Symbols 01;}
{\f141\fnil\fcharset2\fprq1{\*\panose 00000400000000000000}Mil Symbols 02;}{\f142\fnil\fcharset2\fprq1{\*\panose 00000400000000000000}Mil Symbols 03;}{\f143\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mil Symbols 04;}
{\f144\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mil Symbols 05;}{\f145\froman\fcharset0\fprq2{\*\panose 02040603050705020304}New Century Schoolbook;}{\f146\fswiss\fcharset0\fprq2{\*\panose 020b0603020204030204}Antique Olive;}
{\f147\froman\fcharset0\fprq2{\*\panose 02040502050505030304}Palatino;}{\f148\fscript\fcharset0\fprq2{\*\panose 03030502040406070605}CoronetPS;}{\f149\fswiss\fcharset0\fprq2{\*\panose 020b0504020202050204}Eurostile;}
{\f150\fswiss\fcharset0\fprq2{\*\panose 020b0804020202050204}Eurostile Bold;}{\f151\froman\fcharset0\fprq2{\*\panose 02040604040505020204}ClarendonPS;}{\f152\froman\fcharset0\fprq2{\*\panose 0208090404030b020404}Cooper Black;}
{\f153\froman\fcharset0\fprq2{\*\panose 02020502050305020303}Goudy;}{\f154\fswiss\fcharset0\fprq2{\*\panose 020b0603020204030204}Antique Olive Roman;}{\f155\fswiss\fcharset0\fprq2{\*\panose 020b0904030504030204}Antique Olive CompactPS;}
{\f156\froman\fcharset0\fprq2{\*\panose 02020502050306020203}StempelGaramond Roman;}{\f157\fswiss\fcharset0\fprq2{\*\panose 020b0502050508020304}Optima;}{\f158\froman\fcharset0\fprq2{\*\panose 02040702050305020303}Goudy ExtraBold;}
{\f159\froman\fcharset0\fprq2{\*\panose 02070603060706020303}BodoniPS;}{\f160\froman\fcharset0\fprq2{\*\panose 02060503020205020404}Lubalin Graph;}{\f161\fswiss\fcharset0\fprq2{\*\panose 020e0602030304020304}Albertus MT;}
{\f162\froman\fcharset0\fprq2{\*\panose 02070a04080905020204}Bodoni Poster;}{\f163\fswiss\fcharset0\fprq2{\*\panose 020b0403020202020204}Univers 45 Light;}{\f164\fswiss\fcharset0\fprq2{\*\panose 020b0605030502020204}Univers ExtendedPS;}
{\f165\fmodern\fcharset0\fprq1{\*\panose 020b0409020202030204}Letter GothicPS;}{\f166\fswiss\fcharset0\fprq2{\*\panose 020b0402020204020204}GillSans Light;}{\f167\fswiss\fcharset0\fprq2{\*\panose 020b0602020204020204}GillSans;}
{\f168\fnil\fcharset0\fprq2{\*\panose 02010603020202030204}Univers 55;}{\f169\fswiss\fcharset0\fprq2{\*\panose 020b0606020202060204}Univers 57 Condensed;}{\f170\fswiss\fcharset0\fprq2{\*\panose 020b0706030503050204}Univers 47 CondensedLight;}
{\f171\fswiss\fcharset0\fprq2{\*\panose 020b0902020204020204}GillSans ExtraBold;}{\f172\fswiss\fcharset0\fprq2{\*\panose 020b0506020204020204}GillSans Condensed;}{\f173\fscript\fcharset0\fprq2{\*\panose 03080702030302020503}Oxford;}
{\f174\froman\fcharset0\fprq2{\*\panose 02060502050505030203}Joanna MT;}{\f175\fscript\fcharset0\fprq2{\*\panose 03050402030202030204}Taffy;}{\f176\froman\fcharset0\fprq2{\*\panose 02070608080905030204}Bodoni PosterCompressed;}
{\f177\fswiss\fcharset0\fprq2{\*\panose 020b0507020202060204}Eurostile ExtendedTwo;}{\f178\froman\fcharset0\fprq2{\*\panose 02040604040505020204}Clarendon Light;}{\f179\fswiss\fcharset0\fprq2{\*\panose 020e0607020206020404}Copperplate32bc;}
{\f180\fswiss\fcharset0\fprq2{\*\panose 020e0907020206020404}Copperplate33bc;}{\f181\fdecor\fcharset0\fprq2{\*\panose 04050504080603030502}Mona Lisa Recut;}{\f182\fswiss\fcharset0\fprq2{\*\panose 020b0606020202030204}Helvetica Condensed;}
{\f183\fswiss\fcharset0\fprq2{\*\panose 020e0502030304020304}Albertus MT Lt;}{\f184\fswiss\fcharset0\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f185\fscript\fcharset0\fprq2{\*\panose 03020702040506060504}Apple Chancery;}
{\f186\froman\fcharset2\fprq2{\*\panose 05020102010607020705}Candid;}{\f187\fswiss\fcharset0\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f188\froman\fcharset0\fprq2{\*\panose 02030602050506020203}Hoefler Text;}
{\f189\froman\fcharset0\fprq2{\*\panose 02030802060706020203}Hoefler Text Black;}{\f190\froman\fcharset2\fprq2{\*\panose 05090102010207020202}Hoefler Text Ornaments;}{\f191\fmodern\fcharset0\fprq1{\*\panose 020b0509030404040204}Monaco;}
{\f192\fscript\fcharset0\fprq2{\*\panose 03020702040402020504}MarigoldPS;}{\f193\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - Section;}{\f194\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Map Symbol - Squad;}
{\f195\froman\fcharset2\fprq2{\*\panose 05050102010607020607}SymbolPS;}{\f196\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}{\f197\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Mapsym - Tools;}
{\f198\fswiss\fcharset0\fprq2{\*\panose 020b0603020202030204}Univers;}{\f199\fswiss\fcharset0\fprq2{\*\panose 020b0606020202060204}Univers Condensed;}{\f200\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Mapsym - US - Gen;}
{\f201\fswiss\fcharset204\fprq2{\*\panose 020b0606030804020204}DejaVu Sans Condensed;}{\f202\froman\fcharset204\fprq2{\*\panose 02060603050605020204}DejaVu Serif;}{\f203\froman\fcharset204\fprq2{\*\panose 02060606050605020204}DejaVu Serif Condensed;}
{\f204\fmodern\fcharset204\fprq1{\*\panose 020b0609030804020204}DejaVu Sans Mono;}{\f205\fswiss\fcharset204\fprq2{\*\panose 020b0603030804020204}DejaVu Sans;}{\f206\fswiss\fcharset204\fprq2{\*\panose 020b0203030804020204}DejaVu Sans Light;}
{\f207\fnil\fcharset0\fprq2{\*\panose 05010000000000000000}OpenSymbol;}{\f208\fnil\fcharset2\fprq2{\*\panose 05000502060100000001}Mathematica1;}{\f209\froman\fcharset2\fprq2{\*\panose 05060400030100000101}Mathematica1Mono;}
{\f210\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica2;}{\f211\fnil\fcharset2\fprq2{\*\panose 05000400030000000000}Mathematica2Mono;}{\f212\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica3;}
{\f213\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica3Mono;}{\f214\fnil\fcharset2\fprq2{\*\panose 05010400040101000101}Mathematica4;}{\f215\fnil\fcharset2\fprq2{\*\panose 05010400040101000101}Mathematica4Mono;}
{\f216\fnil\fcharset2\fprq2{\*\panose 02000400000000000000}Mathematica5;}{\f217\fnil\fcharset2\fprq2{\*\panose 02000400000000000000}Mathematica5Mono;}{\f218\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica6;}
{\f219\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica6Mono;}{\f220\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica7;}{\f221\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Mathematica7Mono;}
{\f224\froman\fcharset0\fprq2 Times New Roman;}{\f222\froman\fcharset238\fprq2 Times New Roman CE;}{\f225\froman\fcharset161\fprq2 Times New Roman Greek;}{\f226\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f227\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f228\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f229\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f230\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f234\fswiss\fcharset0\fprq2 Arial;}{\f232\fswiss\fcharset238\fprq2 Arial CE;}{\f235\fswiss\fcharset161\fprq2 Arial Greek;}{\f236\fswiss\fcharset162\fprq2 Arial Tur;}{\f237\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f238\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f239\fswiss\fcharset186\fprq2 Arial Baltic;}{\f240\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f244\fmodern\fcharset0\fprq1 Courier New;}{\f242\fmodern\fcharset238\fprq1 Courier New CE;}
{\f245\fmodern\fcharset161\fprq1 Courier New Greek;}{\f246\fmodern\fcharset162\fprq1 Courier New Tur;}{\f247\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f248\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f249\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f250\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f262\fswiss\fcharset238\fprq2 Helvetica CE;}{\f266\fswiss\fcharset162\fprq2 Helvetica Tur;}{\f269\fswiss\fcharset186\fprq2 Helvetica Baltic;}
{\f302\froman\fcharset238\fprq2 New York CE;}{\f306\froman\fcharset162\fprq2 New York Tur;}{\f309\froman\fcharset186\fprq2 New York Baltic;}{\f334\fmodern\fcharset0\fprq1 MS Mincho Western{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f332\fmodern\fcharset238\fprq1 MS Mincho CE{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f333\fmodern\fcharset204\fprq1 MS Mincho Cyr{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f335\fmodern\fcharset161\fprq1 MS Mincho Greek{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f336\fmodern\fcharset162\fprq1 MS Mincho Tur{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}
{\f339\fmodern\fcharset186\fprq1 MS Mincho Baltic{\*\falt \'82\'6c\'82\'72 \'96\'be\'92\'a9};}{\f344\froman\fcharset0\fprq2 Batang Western{\*\falt \'b9\'d9\'c5\'c1};}{\f342\froman\fcharset238\fprq2 Batang CE{\*\falt \'b9\'d9\'c5\'c1};}
{\f343\froman\fcharset204\fprq2 Batang Cyr{\*\falt \'b9\'d9\'c5\'c1};}{\f345\froman\fcharset161\fprq2 Batang Greek{\*\falt \'b9\'d9\'c5\'c1};}{\f346\froman\fcharset162\fprq2 Batang Tur{\*\falt \'b9\'d9\'c5\'c1};}
{\f349\froman\fcharset186\fprq2 Batang Baltic{\*\falt \'b9\'d9\'c5\'c1};}{\f354\fnil\fcharset0\fprq2 SimSun Western{\*\falt \'cb\'ce\'cc\'e5};}{\f434\froman\fcharset0\fprq2 Century;}{\f432\froman\fcharset238\fprq2 Century CE;}
{\f435\froman\fcharset161\fprq2 Century Greek;}{\f436\froman\fcharset162\fprq2 Century Tur;}{\f439\froman\fcharset186\fprq2 Century Baltic;}{\f484\froman\fcharset0\fprq2 Sylfaen;}{\f482\froman\fcharset238\fprq2 Sylfaen CE;}
{\f485\froman\fcharset161\fprq2 Sylfaen Greek;}{\f486\froman\fcharset162\fprq2 Sylfaen Tur;}{\f489\froman\fcharset186\fprq2 Sylfaen Baltic;}{\f564\fswiss\fcharset0\fprq2 Arial Unicode MS Western;}{\f562\fswiss\fcharset238\fprq2 Arial Unicode MS CE;}
{\f563\fswiss\fcharset204\fprq2 Arial Unicode MS Cyr;}{\f565\fswiss\fcharset161\fprq2 Arial Unicode MS Greek;}{\f566\fswiss\fcharset162\fprq2 Arial Unicode MS Tur;}{\f567\fswiss\fcharset177\fprq2 Arial Unicode MS (Hebrew);}
{\f568\fswiss\fcharset178\fprq2 Arial Unicode MS (Arabic);}{\f569\fswiss\fcharset186\fprq2 Arial Unicode MS Baltic;}{\f570\fswiss\fcharset163\fprq2 Arial Unicode MS (Vietnamese);}{\f571\fswiss\fcharset222\fprq2 Arial Unicode MS (Thai);}
{\f574\fswiss\fcharset0\fprq2 Tahoma;}{\f572\fswiss\fcharset238\fprq2 Tahoma CE;}{\f575\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f576\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f577\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}
{\f578\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f579\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f580\fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f581\fswiss\fcharset222\fprq2 Tahoma (Thai);}
{\f584\froman\fcharset0\fprq2 Cambria Math{\*\falt DejaVu Sans};}{\f582\froman\fcharset238\fprq2 Cambria Math CE{\*\falt DejaVu Sans};}{\f585\froman\fcharset161\fprq2 Cambria Math Greek{\*\falt DejaVu Sans};}
{\f586\froman\fcharset162\fprq2 Cambria Math Tur{\*\falt DejaVu Sans};}{\f589\froman\fcharset186\fprq2 Cambria Math Baltic{\*\falt DejaVu Sans};}{\f594\fswiss\fcharset0\fprq2 Calibri{\*\falt Century Gothic};}
{\f592\fswiss\fcharset238\fprq2 Calibri CE{\*\falt Century Gothic};}{\f595\fswiss\fcharset161\fprq2 Calibri Greek{\*\falt Century Gothic};}{\f596\fswiss\fcharset162\fprq2 Calibri Tur{\*\falt Century Gothic};}
{\f599\fswiss\fcharset186\fprq2 Calibri Baltic{\*\falt Century Gothic};}{\f604\froman\fcharset0\fprq2 Cambria{\*\falt Palatino Linotype};}{\f602\froman\fcharset238\fprq2 Cambria CE{\*\falt Palatino Linotype};}
{\f605\froman\fcharset161\fprq2 Cambria Greek{\*\falt Palatino Linotype};}{\f606\froman\fcharset162\fprq2 Cambria Tur{\*\falt Palatino Linotype};}{\f609\froman\fcharset186\fprq2 Cambria Baltic{\*\falt Palatino Linotype};}
{\f624\fmodern\fcharset0\fprq1 Lucida Console;}{\f622\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f625\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f626\fmodern\fcharset162\fprq1 Lucida Console Tur;}
{\f634\fswiss\fcharset0\fprq2 Lucida Sans Unicode;}{\f632\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f635\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f636\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}
{\f637\fswiss\fcharset177\fprq2 Lucida Sans Unicode (Hebrew);}{\f644\fswiss\fcharset0\fprq2 Verdana;}{\f642\fswiss\fcharset238\fprq2 Verdana CE;}{\f645\fswiss\fcharset161\fprq2 Verdana Greek;}{\f646\fswiss\fcharset162\fprq2 Verdana Tur;}
{\f649\fswiss\fcharset186\fprq2 Verdana Baltic;}{\f650\fswiss\fcharset163\fprq2 Verdana (Vietnamese);}{\f654\fswiss\fcharset0\fprq2 Arial Black;}{\f652\fswiss\fcharset238\fprq2 Arial Black CE;}{\f655\fswiss\fcharset161\fprq2 Arial Black Greek;}
{\f656\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f659\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f664\fscript\fcharset0\fprq2 Comic Sans MS;}{\f662\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f665\fscript\fcharset161\fprq2 Comic Sans MS Greek;}
{\f666\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f669\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f674\fswiss\fcharset0\fprq2 Impact;}{\f672\fswiss\fcharset238\fprq2 Impact CE;}{\f675\fswiss\fcharset161\fprq2 Impact Greek;}
{\f676\fswiss\fcharset162\fprq2 Impact Tur;}{\f679\fswiss\fcharset186\fprq2 Impact Baltic;}{\f684\froman\fcharset0\fprq2 Georgia;}{\f682\froman\fcharset238\fprq2 Georgia CE;}{\f685\froman\fcharset161\fprq2 Georgia Greek;}
{\f686\froman\fcharset162\fprq2 Georgia Tur;}{\f689\froman\fcharset186\fprq2 Georgia Baltic;}{\f694\fswiss\fcharset0\fprq2 Franklin Gothic Medium;}{\f692\fswiss\fcharset238\fprq2 Franklin Gothic Medium CE;}
{\f695\fswiss\fcharset161\fprq2 Franklin Gothic Medium Greek;}{\f696\fswiss\fcharset162\fprq2 Franklin Gothic Medium Tur;}{\f699\fswiss\fcharset186\fprq2 Franklin Gothic Medium Baltic;}{\f704\froman\fcharset0\fprq2 Palatino Linotype;}
{\f702\froman\fcharset238\fprq2 Palatino Linotype CE;}{\f705\froman\fcharset161\fprq2 Palatino Linotype Greek;}{\f706\froman\fcharset162\fprq2 Palatino Linotype Tur;}{\f709\froman\fcharset186\fprq2 Palatino Linotype Baltic;}
{\f710\froman\fcharset163\fprq2 Palatino Linotype (Vietnamese);}{\f714\fswiss\fcharset0\fprq2 Trebuchet MS;}{\f712\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f715\fswiss\fcharset161\fprq2 Trebuchet MS Greek;}
{\f716\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f719\fswiss\fcharset186\fprq2 Trebuchet MS Baltic;}{\f754\fswiss\fcharset0\fprq2 Microsoft Sans Serif;}{\f752\fswiss\fcharset238\fprq2 Microsoft Sans Serif CE;}
{\f755\fswiss\fcharset161\fprq2 Microsoft Sans Serif Greek;}{\f756\fswiss\fcharset162\fprq2 Microsoft Sans Serif Tur;}{\f757\fswiss\fcharset177\fprq2 Microsoft Sans Serif (Hebrew);}{\f758\fswiss\fcharset178\fprq2 Microsoft Sans Serif (Arabic);}
{\f759\fswiss\fcharset186\fprq2 Microsoft Sans Serif Baltic;}{\f760\fswiss\fcharset163\fprq2 Microsoft Sans Serif (Vietnamese);}{\f761\fswiss\fcharset222\fprq2 Microsoft Sans Serif (Thai);}{\f774\fswiss\fcharset0\fprq2 Arial Narrow;}
{\f772\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f775\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f776\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f779\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f784\fswiss\fcharset0\fprq2 @Arial Unicode MS Western;}{\f782\fswiss\fcharset238\fprq2 @Arial Unicode MS CE;}{\f783\fswiss\fcharset204\fprq2 @Arial Unicode MS Cyr;}{\f785\fswiss\fcharset161\fprq2 @Arial Unicode MS Greek;}
{\f786\fswiss\fcharset162\fprq2 @Arial Unicode MS Tur;}{\f787\fswiss\fcharset177\fprq2 @Arial Unicode MS (Hebrew);}{\f788\fswiss\fcharset178\fprq2 @Arial Unicode MS (Arabic);}{\f789\fswiss\fcharset186\fprq2 @Arial Unicode MS Baltic;}
{\f790\fswiss\fcharset163\fprq2 @Arial Unicode MS (Vietnamese);}{\f791\fswiss\fcharset222\fprq2 @Arial Unicode MS (Thai);}{\f794\froman\fcharset0\fprq2 @Batang Western;}{\f792\froman\fcharset238\fprq2 @Batang CE;}
{\f793\froman\fcharset204\fprq2 @Batang Cyr;}{\f795\froman\fcharset161\fprq2 @Batang Greek;}{\f796\froman\fcharset162\fprq2 @Batang Tur;}{\f799\froman\fcharset186\fprq2 @Batang Baltic;}{\f804\froman\fcharset0\fprq2 Book Antiqua;}
{\f802\froman\fcharset238\fprq2 Book Antiqua CE;}{\f805\froman\fcharset161\fprq2 Book Antiqua Greek;}{\f806\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f809\froman\fcharset186\fprq2 Book Antiqua Baltic;}{\f814\froman\fcharset0\fprq2 Bookman Old Style;}
{\f812\froman\fcharset238\fprq2 Bookman Old Style CE;}{\f815\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f816\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f819\froman\fcharset186\fprq2 Bookman Old Style Baltic;}
{\f824\fswiss\fcharset0\fprq2 Century Gothic;}{\f822\fswiss\fcharset238\fprq2 Century Gothic CE;}{\f825\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f826\fswiss\fcharset162\fprq2 Century Gothic Tur;}
{\f829\fswiss\fcharset186\fprq2 Century Gothic Baltic;}{\f834\froman\fcharset0\fprq2 Garamond;}{\f832\froman\fcharset238\fprq2 Garamond CE;}{\f835\froman\fcharset161\fprq2 Garamond Greek;}{\f836\froman\fcharset162\fprq2 Garamond Tur;}
{\f839\froman\fcharset186\fprq2 Garamond Baltic;}{\f844\fswiss\fcharset0\fprq2 Haettenschweiler;}{\f842\fswiss\fcharset238\fprq2 Haettenschweiler CE;}{\f845\fswiss\fcharset161\fprq2 Haettenschweiler Greek;}
{\f846\fswiss\fcharset162\fprq2 Haettenschweiler Tur;}{\f849\fswiss\fcharset186\fprq2 Haettenschweiler Baltic;}{\f854\fmodern\fcharset0\fprq1 @MS Mincho Western;}{\f852\fmodern\fcharset238\fprq1 @MS Mincho CE;}
{\f853\fmodern\fcharset204\fprq1 @MS Mincho Cyr;}{\f855\fmodern\fcharset161\fprq1 @MS Mincho Greek;}{\f856\fmodern\fcharset162\fprq1 @MS Mincho Tur;}{\f859\fmodern\fcharset186\fprq1 @MS Mincho Baltic;}{\f874\fscript\fcharset0\fprq2 Monotype Corsiva;}
{\f872\fscript\fcharset238\fprq2 Monotype Corsiva CE;}{\f875\fscript\fcharset161\fprq2 Monotype Corsiva Greek;}{\f876\fscript\fcharset162\fprq2 Monotype Corsiva Tur;}{\f879\fscript\fcharset186\fprq2 Monotype Corsiva Baltic;}
{\f884\fnil\fcharset0\fprq2 @SimSun Western;}{\f934\fswiss\fcharset0\fprq2 SAfon;}{\f932\fswiss\fcharset238\fprq2 SAfon CE;}{\f935\fswiss\fcharset161\fprq2 SAfon Greek;}{\f936\fswiss\fcharset162\fprq2 SAfon Tur;}
{\f937\fswiss\fcharset177\fprq2 SAfon (Hebrew);}{\f938\fswiss\fcharset178\fprq2 SAfon (Arabic);}{\f939\fswiss\fcharset186\fprq2 SAfon Baltic;}{\f940\fswiss\fcharset163\fprq2 SAfon (Vietnamese);}{\f1212\fswiss\fcharset238\fprq2 Albertus Medium CE;}
{\f1216\fswiss\fcharset162\fprq2 Albertus Medium Tur;}{\f1219\fswiss\fcharset186\fprq2 Albertus Medium Baltic;}{\f1222\fswiss\fcharset238\fprq2 Albertus Extra Bold CE;}{\f1226\fswiss\fcharset162\fprq2 Albertus Extra Bold Tur;}
{\f1229\fswiss\fcharset186\fprq2 Albertus Extra Bold Baltic;}{\f1232\fswiss\fcharset238\fprq2 ITC Avant Garde Gothic CE;}{\f1236\fswiss\fcharset162\fprq2 ITC Avant Garde Gothic Tur;}{\f1239\fswiss\fcharset186\fprq2 ITC Avant Garde Gothic Baltic;}
{\f1242\fswiss\fcharset238\fprq2 ITC Avant Garde Gothic Demi CE;}{\f1246\fswiss\fcharset162\fprq2 ITC Avant Garde Gothic Demi Tur;}{\f1249\fswiss\fcharset186\fprq2 ITC Avant Garde Gothic Demi Baltic;}{\f1252\froman\fcharset238\fprq2 ITC Bookman Light CE;}
{\f1256\froman\fcharset162\fprq2 ITC Bookman Light Tur;}{\f1259\froman\fcharset186\fprq2 ITC Bookman Light Baltic;}{\f1262\froman\fcharset238\fprq2 ITC Bookman Demi CE;}{\f1266\froman\fcharset162\fprq2 ITC Bookman Demi Tur;}
{\f1269\froman\fcharset186\fprq2 ITC Bookman Demi Baltic;}{\f1272\fswiss\fcharset238\fprq2 CG Omega CE;}{\f1276\fswiss\fcharset162\fprq2 CG Omega Tur;}{\f1279\fswiss\fcharset186\fprq2 CG Omega Baltic;}{\f1282\froman\fcharset238\fprq2 CG Times CE;}
{\f1286\froman\fcharset162\fprq2 CG Times Tur;}{\f1289\froman\fcharset186\fprq2 CG Times Baltic;}{\f1292\fscript\fcharset238\fprq2 ITC Zapf Chancery CE;}{\f1296\fscript\fcharset162\fprq2 ITC Zapf Chancery Tur;}
{\f1299\fscript\fcharset186\fprq2 ITC Zapf Chancery Baltic;}{\f1302\froman\fcharset238\fprq2 Clarendon Condensed CE;}{\f1306\froman\fcharset162\fprq2 Clarendon Condensed Tur;}{\f1309\froman\fcharset186\fprq2 Clarendon Condensed Baltic;}
{\f1312\fscript\fcharset238\fprq2 Coronet CE;}{\f1316\fscript\fcharset162\fprq2 Coronet Tur;}{\f1319\fscript\fcharset186\fprq2 Coronet Baltic;}{\f1322\fmodern\fcharset238\fprq1 CourierPS CE;}{\f1326\fmodern\fcharset162\fprq1 CourierPS Tur;}
{\f1329\fmodern\fcharset186\fprq1 CourierPS Baltic;}{\f1452\fswiss\fcharset238\fprq2 Helvetica Narrow CE;}{\f1456\fswiss\fcharset162\fprq2 Helvetica Narrow Tur;}{\f1459\fswiss\fcharset186\fprq2 Helvetica Narrow Baltic;}
{\f1462\fmodern\fcharset238\fprq1 Letter Gothic CE;}{\f1466\fmodern\fcharset162\fprq1 Letter Gothic Tur;}{\f1469\fmodern\fcharset186\fprq1 Letter Gothic Baltic;}{\f1572\fscript\fcharset238\fprq2 Marigold CE;}
{\f1576\fscript\fcharset162\fprq2 Marigold Tur;}{\f1579\fscript\fcharset186\fprq2 Marigold Baltic;}{\f1672\froman\fcharset238\fprq2 New Century Schoolbook CE;}{\f1676\froman\fcharset162\fprq2 New Century Schoolbook Tur;}
{\f1679\froman\fcharset186\fprq2 New Century Schoolbook Baltic;}{\f1682\fswiss\fcharset238\fprq2 Antique Olive CE;}{\f1686\fswiss\fcharset162\fprq2 Antique Olive Tur;}{\f1689\fswiss\fcharset186\fprq2 Antique Olive Baltic;}
{\f1692\froman\fcharset238\fprq2 Palatino CE;}{\f1696\froman\fcharset162\fprq2 Palatino Tur;}{\f1699\froman\fcharset186\fprq2 Palatino Baltic;}{\f1702\fscript\fcharset238\fprq2 CoronetPS CE;}{\f1706\fscript\fcharset162\fprq2 CoronetPS Tur;}
{\f1709\fscript\fcharset186\fprq2 CoronetPS Baltic;}{\f1712\fswiss\fcharset238\fprq2 Eurostile CE;}{\f1716\fswiss\fcharset162\fprq2 Eurostile Tur;}{\f1719\fswiss\fcharset186\fprq2 Eurostile Baltic;}{\f1722\fswiss\fcharset238\fprq2 Eurostile Bold CE;}
{\f1726\fswiss\fcharset162\fprq2 Eurostile Bold Tur;}{\f1729\fswiss\fcharset186\fprq2 Eurostile Bold Baltic;}{\f1732\froman\fcharset238\fprq2 ClarendonPS CE;}{\f1736\froman\fcharset162\fprq2 ClarendonPS Tur;}
{\f1739\froman\fcharset186\fprq2 ClarendonPS Baltic;}{\f1762\fswiss\fcharset238\fprq2 Antique Olive Roman CE;}{\f1766\fswiss\fcharset162\fprq2 Antique Olive Roman Tur;}{\f1769\fswiss\fcharset186\fprq2 Antique Olive Roman Baltic;}
{\f1772\fswiss\fcharset238\fprq2 Antique Olive CompactPS CE;}{\f1776\fswiss\fcharset162\fprq2 Antique Olive CompactPS Tur;}{\f1779\fswiss\fcharset186\fprq2 Antique Olive CompactPS Baltic;}{\f1782\froman\fcharset238\fprq2 StempelGaramond Roman CE;}
{\f1786\froman\fcharset162\fprq2 StempelGaramond Roman Tur;}{\f1789\froman\fcharset186\fprq2 StempelGaramond Roman Baltic;}{\f1792\fswiss\fcharset238\fprq2 Optima CE;}{\f1796\fswiss\fcharset162\fprq2 Optima Tur;}
{\f1799\fswiss\fcharset186\fprq2 Optima Baltic;}{\f1812\froman\fcharset238\fprq2 BodoniPS CE;}{\f1816\froman\fcharset162\fprq2 BodoniPS Tur;}{\f1819\froman\fcharset186\fprq2 BodoniPS Baltic;}{\f1822\froman\fcharset238\fprq2 Lubalin Graph CE;}
{\f1826\froman\fcharset162\fprq2 Lubalin Graph Tur;}{\f1829\froman\fcharset186\fprq2 Lubalin Graph Baltic;}{\f1842\froman\fcharset238\fprq2 Bodoni Poster CE;}{\f1846\froman\fcharset162\fprq2 Bodoni Poster Tur;}
{\f1849\froman\fcharset186\fprq2 Bodoni Poster Baltic;}{\f1852\fswiss\fcharset238\fprq2 Univers 45 Light CE;}{\f1856\fswiss\fcharset162\fprq2 Univers 45 Light Tur;}{\f1859\fswiss\fcharset186\fprq2 Univers 45 Light Baltic;}
{\f1862\fswiss\fcharset238\fprq2 Univers ExtendedPS CE;}{\f1866\fswiss\fcharset162\fprq2 Univers ExtendedPS Tur;}{\f1869\fswiss\fcharset186\fprq2 Univers ExtendedPS Baltic;}{\f1872\fmodern\fcharset238\fprq1 Letter GothicPS CE;}
{\f1876\fmodern\fcharset162\fprq1 Letter GothicPS Tur;}{\f1879\fmodern\fcharset186\fprq1 Letter GothicPS Baltic;}{\f1882\fswiss\fcharset238\fprq2 GillSans Light CE;}{\f1886\fswiss\fcharset162\fprq2 GillSans Light Tur;}
{\f1889\fswiss\fcharset186\fprq2 GillSans Light Baltic;}{\f1892\fswiss\fcharset238\fprq2 GillSans CE;}{\f1896\fswiss\fcharset162\fprq2 GillSans Tur;}{\f1899\fswiss\fcharset186\fprq2 GillSans Baltic;}{\f1902\fnil\fcharset238\fprq2 Univers 55 CE;}
{\f1906\fnil\fcharset162\fprq2 Univers 55 Tur;}{\f1909\fnil\fcharset186\fprq2 Univers 55 Baltic;}{\f1912\fswiss\fcharset238\fprq2 Univers 57 Condensed CE;}{\f1916\fswiss\fcharset162\fprq2 Univers 57 Condensed Tur;}
{\f1919\fswiss\fcharset186\fprq2 Univers 57 Condensed Baltic;}{\f1922\fswiss\fcharset238\fprq2 Univers 47 CondensedLight CE;}{\f1926\fswiss\fcharset162\fprq2 Univers 47 CondensedLight Tur;}
{\f1929\fswiss\fcharset186\fprq2 Univers 47 CondensedLight Baltic;}{\f1932\fswiss\fcharset238\fprq2 GillSans ExtraBold CE;}{\f1936\fswiss\fcharset162\fprq2 GillSans ExtraBold Tur;}{\f1939\fswiss\fcharset186\fprq2 GillSans ExtraBold Baltic;}
{\f1942\fswiss\fcharset238\fprq2 GillSans Condensed CE;}{\f1946\fswiss\fcharset162\fprq2 GillSans Condensed Tur;}{\f1949\fswiss\fcharset186\fprq2 GillSans Condensed Baltic;}{\f1962\froman\fcharset238\fprq2 Joanna MT CE;}
{\f1966\froman\fcharset162\fprq2 Joanna MT Tur;}{\f1969\froman\fcharset186\fprq2 Joanna MT Baltic;}{\f1982\froman\fcharset238\fprq2 Bodoni PosterCompressed CE;}{\f1986\froman\fcharset162\fprq2 Bodoni PosterCompressed Tur;}
{\f1989\froman\fcharset186\fprq2 Bodoni PosterCompressed Baltic;}{\f1992\fswiss\fcharset238\fprq2 Eurostile ExtendedTwo CE;}{\f1996\fswiss\fcharset162\fprq2 Eurostile ExtendedTwo Tur;}{\f1999\fswiss\fcharset186\fprq2 Eurostile ExtendedTwo Baltic;}
{\f2002\froman\fcharset238\fprq2 Clarendon Light CE;}{\f2006\froman\fcharset162\fprq2 Clarendon Light Tur;}{\f2009\froman\fcharset186\fprq2 Clarendon Light Baltic;}{\f2042\fswiss\fcharset238\fprq2 Helvetica Condensed CE;}
{\f2046\fswiss\fcharset162\fprq2 Helvetica Condensed Tur;}{\f2049\fswiss\fcharset186\fprq2 Helvetica Condensed Baltic;}{\f2062\fswiss\fcharset238\fprq2 Geneva CE;}{\f2066\fswiss\fcharset162\fprq2 Geneva Tur;}
{\f2069\fswiss\fcharset186\fprq2 Geneva Baltic;}{\f2072\fscript\fcharset238\fprq2 Apple Chancery CE;}{\f2076\fscript\fcharset162\fprq2 Apple Chancery Tur;}{\f2079\fscript\fcharset186\fprq2 Apple Chancery Baltic;}
{\f2092\fswiss\fcharset238\fprq2 Chicago CE;}{\f2096\fswiss\fcharset162\fprq2 Chicago Tur;}{\f2099\fswiss\fcharset186\fprq2 Chicago Baltic;}{\f2102\froman\fcharset238\fprq2 Hoefler Text CE;}{\f2106\froman\fcharset162\fprq2 Hoefler Text Tur;}
{\f2109\froman\fcharset186\fprq2 Hoefler Text Baltic;}{\f2112\froman\fcharset238\fprq2 Hoefler Text Black CE;}{\f2116\froman\fcharset162\fprq2 Hoefler Text Black Tur;}{\f2119\froman\fcharset186\fprq2 Hoefler Text Black Baltic;}
{\f2132\fmodern\fcharset238\fprq1 Monaco CE;}{\f2136\fmodern\fcharset162\fprq1 Monaco Tur;}{\f2139\fmodern\fcharset186\fprq1 Monaco Baltic;}{\f2182\froman\fcharset238\fprq2 Times CE;}{\f2186\froman\fcharset162\fprq2 Times Tur;}
{\f2189\froman\fcharset186\fprq2 Times Baltic;}{\f2202\fswiss\fcharset238\fprq2 Univers CE;}{\f2206\fswiss\fcharset162\fprq2 Univers Tur;}{\f2209\fswiss\fcharset186\fprq2 Univers Baltic;}{\f2212\fswiss\fcharset238\fprq2 Univers Condensed CE;}
{\f2216\fswiss\fcharset162\fprq2 Univers Condensed Tur;}{\f2219\fswiss\fcharset186\fprq2 Univers Condensed Baltic;}{\f2234\fswiss\fcharset0\fprq2 DejaVu Sans Condensed;}{\f2232\fswiss\fcharset238\fprq2 DejaVu Sans Condensed CE;}
{\f2235\fswiss\fcharset161\fprq2 DejaVu Sans Condensed Greek;}{\f2236\fswiss\fcharset162\fprq2 DejaVu Sans Condensed Tur;}{\f2237\fswiss\fcharset177\fprq2 DejaVu Sans Condensed (Hebrew);}{\f2239\fswiss\fcharset186\fprq2 DejaVu Sans Condensed Baltic;}
{\f2240\fswiss\fcharset163\fprq2 DejaVu Sans Condensed (Vietnamese);}{\f2244\froman\fcharset0\fprq2 DejaVu Serif;}{\f2242\froman\fcharset238\fprq2 DejaVu Serif CE;}{\f2245\froman\fcharset161\fprq2 DejaVu Serif Greek;}
{\f2246\froman\fcharset162\fprq2 DejaVu Serif Tur;}{\f2249\froman\fcharset186\fprq2 DejaVu Serif Baltic;}{\f2254\froman\fcharset0\fprq2 DejaVu Serif Condensed;}{\f2252\froman\fcharset238\fprq2 DejaVu Serif Condensed CE;}
{\f2255\froman\fcharset161\fprq2 DejaVu Serif Condensed Greek;}{\f2256\froman\fcharset162\fprq2 DejaVu Serif Condensed Tur;}{\f2259\froman\fcharset186\fprq2 DejaVu Serif Condensed Baltic;}{\f2264\fmodern\fcharset0\fprq1 DejaVu Sans Mono;}
{\f2262\fmodern\fcharset238\fprq1 DejaVu Sans Mono CE;}{\f2265\fmodern\fcharset161\fprq1 DejaVu Sans Mono Greek;}{\f2266\fmodern\fcharset162\fprq1 DejaVu Sans Mono Tur;}{\f2269\fmodern\fcharset186\fprq1 DejaVu Sans Mono Baltic;}
{\f2274\fswiss\fcharset0\fprq2 DejaVu Sans;}{\f2272\fswiss\fcharset238\fprq2 DejaVu Sans CE;}{\f2275\fswiss\fcharset161\fprq2 DejaVu Sans Greek;}{\f2276\fswiss\fcharset162\fprq2 DejaVu Sans Tur;}{\f2277\fswiss\fcharset177\fprq2 DejaVu Sans (Hebrew);}
{\f2278\fswiss\fcharset178\fprq2 DejaVu Sans (Arabic);}{\f2279\fswiss\fcharset186\fprq2 DejaVu Sans Baltic;}{\f2280\fswiss\fcharset163\fprq2 DejaVu Sans (Vietnamese);}{\f2284\fswiss\fcharset0\fprq2 DejaVu Sans Light;}
{\f2282\fswiss\fcharset238\fprq2 DejaVu Sans Light CE;}{\f2285\fswiss\fcharset161\fprq2 DejaVu Sans Light Greek;}{\f2286\fswiss\fcharset162\fprq2 DejaVu Sans Light Tur;}{\f2289\fswiss\fcharset186\fprq2 DejaVu Sans Light Baltic;}
{\f2290\fswiss\fcharset163\fprq2 DejaVu Sans Light (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red54\green95\blue145;\red79\green129\blue189;}{\stylesheet{
\ql \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\f37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 \snext0 \styrsid7804862 Normal;}{\s1\qc \li0\ri0\sb480\sl276\slmult1
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink20 \styrsid6967064 heading 1;}{
\s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink15 \styrsid6967064 heading 2;}{
\s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \slink25 \styrsid8718046 heading 3;}{\*\cs10 
\additive \ssemihidden Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\loch\f37\hich\af37\dbch\af37\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\*\cs15 \additive \b\fs36\loch\f38\hich\af38\dbch\af0 
\sbasedon10 \slink2 \styrsid6967064  Char;}{\s16\ql \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 \slink17 \styrsid10487087 HTML Preformatted;}{\*\cs17 \additive \fs20\loch\f2\hich\af2\dbch\af0 \sbasedon10 \slink16 \styrsid10487087  Char;}{
\s18\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext18 \styrsid10487087 Normal (Web);}{\*\cs19 \additive \ul\cf2 
\sbasedon10 \styrsid11289134 Hyperlink;}{\*\cs20 \additive \b\fs28\cf17\loch\f38\hich\af38\dbch\af0 \sbasedon10 \slink1 \styrsid6967064  Char;}{\s21\qc \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext0 \ssemihidden \styrsid6774718 TOC Heading;}{\s22\ql \li0\ri0\sa100\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs22\lang1033\langfe1033\loch\f37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \sautoupd \styrsid6774718 toc 1;}{\s23\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\fs16\lang1033\langfe1033\loch\f35\hich\af35\dbch\af37\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext23 \slink24 \ssemihidden \styrsid6774718 Balloon Text;}{\*\cs24 \additive \f35\fs16 \sbasedon10 \slink23 \ssemihidden \styrsid6774718  Char;}{\*\cs25 
\additive \b\cf18\loch\f38\hich\af38\dbch\af0 \sbasedon10 \slink3 \styrsid8718046  Char;}{\s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \sautoupd \styrsid2494846 toc 2;}{\s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext0 \sautoupd \styrsid2494846 toc 3;}}{\*\listtable{\list\listtemplateid1817316358{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid346951421}
{\list\listtemplateid675325536{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid507520816}{\list\listtemplateid-1443050772{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid791094936}{\list\listtemplateid247780340{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1301686324}
{\list\listtemplateid-501865226{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1575385753}{\list\listtemplateid521064246{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs20\fbias0 \fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01o;}{\levelnumbers;}\f2\fs20\fbias0 \fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li2880\jclisttab\tx2880\lin2880 }
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li4320\jclisttab\tx4320\lin4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 \fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3929 ?;}{\levelnumbers;}\f10\fs20\fbias0 
\fi-360\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1613898810}}{\*\listoverridetable{\listoverride\listid1575385753\listoverridecount0\ls1}{\listoverride\listid346951421\listoverridecount0\ls2}{\listoverride\listid1301686324
\listoverridecount0\ls3}{\listoverride\listid507520816\listoverridecount0\ls4}{\listoverride\listid791094936\listoverridecount0\ls5}{\listoverride\listid1613898810\listoverridecount0\ls6}}{\*\revtbl {Unknown;}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0
\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}
{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0
\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}
{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0
\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}
{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}}
{\*\rsidtbl \rsid8953\rsid21266\rsid82799\rsid155962\rsid205922\rsid270996\rsid333149\rsid333826\rsid339663\rsid354506\rsid422370\rsid463536\rsid485921\rsid655899\rsid670817\rsid677575\rsid738409\rsid739300\rsid742278\rsid789231\rsid805400\rsid857346
\rsid876031\rsid882703\rsid883302\rsid932462\rsid944996\rsid1001907\rsid1194158\rsid1258421\rsid1259585\rsid1315569\rsid1335645\rsid1450393\rsid1460152\rsid1787984\rsid1861739\rsid1919482\rsid1929163\rsid1974247\rsid2035079\rsid2041126\rsid2046346
\rsid2048995\rsid2059834\rsid2107558\rsid2118267\rsid2121243\rsid2229863\rsid2303691\rsid2311674\rsid2494846\rsid2558257\rsid2623271\rsid2631230\rsid2693943\rsid2706707\rsid2845407\rsid2887993\rsid2888288\rsid2896096\rsid2900626\rsid2959188\rsid2975815
\rsid3017366\rsid3032740\rsid3239017\rsid3278575\rsid3282140\rsid3292242\rsid3540585\rsid3545067\rsid3610150\rsid3678632\rsid3690775\rsid3691994\rsid3762054\rsid3805429\rsid3813809\rsid3825410\rsid3866694\rsid3999339\rsid4015918\rsid4079930\rsid4082891
\rsid4134422\rsid4161175\rsid4204363\rsid4204903\rsid4221538\rsid4396521\rsid4554212\rsid4666108\rsid4936809\rsid4998886\rsid5009159\rsid5048066\rsid5069480\rsid5125752\rsid5191711\rsid5207517\rsid5209261\rsid5258510\rsid5326162\rsid5441386\rsid5457908
\rsid5512104\rsid5530284\rsid5591615\rsid5601468\rsid5728833\rsid5772482\rsid5917022\rsid5967068\rsid5977323\rsid6124525\rsid6499968\rsid6501311\rsid6510556\rsid6585808\rsid6623839\rsid6696641\rsid6706167\rsid6767649\rsid6774367\rsid6774718\rsid6887192
\rsid6967064\rsid6978063\rsid7016104\rsid7019795\rsid7083230\rsid7087214\rsid7098512\rsid7102795\rsid7108445\rsid7149768\rsid7276418\rsid7290249\rsid7358685\rsid7362721\rsid7425658\rsid7473687\rsid7474969\rsid7497343\rsid7549288\rsid7563013\rsid7608594
\rsid7632609\rsid7676501\rsid7697904\rsid7735302\rsid7736952\rsid7739027\rsid7743941\rsid7765393\rsid7804862\rsid7895457\rsid8138262\rsid8157464\rsid8277643\rsid8279682\rsid8286773\rsid8414038\rsid8419756\rsid8479876\rsid8482902\rsid8540981\rsid8585757
\rsid8718046\rsid8724122\rsid8738927\rsid8857118\rsid8876626\rsid8934593\rsid8938774\rsid9007534\rsid9058034\rsid9069256\rsid9110700\rsid9181658\rsid9187220\rsid9243685\rsid9248662\rsid9388486\rsid9452502\rsid9646395\rsid9648497\rsid9650720\rsid9657695
\rsid9660088\rsid9665197\rsid9712485\rsid9831690\rsid9835651\rsid9848641\rsid9852047\rsid9903937\rsid10035667\rsid10039344\rsid10117783\rsid10122941\rsid10161283\rsid10161660\rsid10186989\rsid10187020\rsid10227483\rsid10234308\rsid10381126\rsid10487087
\rsid10566901\rsid10635744\rsid10641678\rsid10688166\rsid10694390\rsid10709176\rsid10833698\rsid10837408\rsid10841113\rsid10911055\rsid10947853\rsid11099468\rsid11161756\rsid11163039\rsid11234192\rsid11272444\rsid11289134\rsid11300365\rsid11342963
\rsid11412479\rsid11480351\rsid11563794\rsid11607238\rsid11621411\rsid11667813\rsid11691409\rsid11734300\rsid11797366\rsid11800919\rsid11820916\rsid12085683\rsid12141510\rsid12196649\rsid12198580\rsid12207593\rsid12326122\rsid12336475\rsid12454591
\rsid12461875\rsid12588738\rsid12725758\rsid12746042\rsid12794273\rsid12796612\rsid12864790\rsid12924558\rsid12978270\rsid13059149\rsid13130730\rsid13135289\rsid13201151\rsid13378698\rsid13392932\rsid13463361\rsid13511873\rsid13592593\rsid13641156
\rsid13664145\rsid13729601\rsid13843257\rsid13908259\rsid13976570\rsid14034893\rsid14035170\rsid14035323\rsid14050956\rsid14160615\rsid14178810\rsid14239749\rsid14315061\rsid14505383\rsid14505901\rsid14615681\rsid14834677\rsid14841381\rsid14878096
\rsid15017539\rsid15025052\rsid15029006\rsid15076082\rsid15078902\rsid15147869\rsid15150649\rsid15169493\rsid15433323\rsid15478933\rsid15479343\rsid15480997\rsid15630114\rsid15736366\rsid15747776\rsid15795120\rsid15798591\rsid15812756\rsid15819035
\rsid15996581\rsid16013637\rsid16145570\rsid16272942\rsid16327968\rsid16385737\rsid16522229\rsid16540647\rsid16546551\rsid16600469}{\*\generator Microsoft Word 10.0.2627;}{\info{\title USACO}{\author Velislav}{\operator Nikolay Kirov}
{\creatim\yr2009\mo10\dy19\hr13\min46}{\revtim\yr2009\mo10\dy19\hr13\min46}{\version2}{\edmins0}{\nofpages96}{\nofwords23906}{\nofchars136267}{\*\company Netage}{\nofcharsws159854}{\vern16437}}\margl1440\margr1440 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1440\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot10487087 \fet0\sectd 
\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid7804862\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s21\qc \li0\ri0\sb480\sl276\slmult1
\keep\keepn\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid12864790 USACO}{\insrsid6967064 
\par }\pard\plain \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12864790 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\insrsid12864790\charrsid12864790 
\par }\pard\plain \s22\ql \li0\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\insrsid6967064 
\hich\af37\dbch\af37\loch\f37  TOC \\o "1-3" \\h \\z \\u }}{\fldrslt {\field\fldedit{\*\fldinst {\insrsid4082891 \hich\af37\dbch\af37\loch\f37 HYPERLINK \\l "_Toc188248219"}}{\fldrslt {
\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 \hich\af37\dbch\af37\loch\f37 Elite 2008 January Competition USACO Contest Analysis and Data}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \hich\af37\dbch\af37\loch\f37  PAGEREF _Toc188248219 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200310039000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \hich\af37\dbch\af37\loch\f37 3}}}}}{
\lang1024\langfe1024\dbch\af0\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248220"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 BRONZE PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248220 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320030000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 3}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc
188248221"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Costume Party [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248221 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320031000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 3}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248222"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Election Time [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248222 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 5}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248223"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 iCow [Jeffrey Wang, 2008]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248223 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320033000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 7}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248224"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 SILVER PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248224 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320034000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 9}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248225"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Cow Contest [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248225 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320035000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 9}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248226"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Running [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248226 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320036000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 11}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248227"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Telephone Lines [Paul Christiano, 2007]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248227 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320037000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 13}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248228"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 GOLD PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
 PAGEREF _Toc188248228 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320038000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 16}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248229"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Haybale Guessing [Brian Dean, 2003]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248229 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200320039000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 16}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248230"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Artificial Lake [Matt McCutchen, 2006]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248230 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330030000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 19}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248231"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Cell Phone Network [Jeffrey Wang, 2007]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248231 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330031000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 23}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s22\ql \li0\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\insrsid4082891 \hich\af37\dbch\af37\loch\f37 HYPERLINK \\l "_\hich\af37\dbch\af37\loch\f37 Toc188248232"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 \hich\af37\dbch\af37\loch\f37 
Special 2007 Chinese Competition contest}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \hich\af37\dbch\af37\loch\f37  PAGEREF _Toc188248232 \\h }{
\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\hich\af37\dbch\af37\loch\f37 26}}}}}{\lang1024\langfe1024\dbch\af0\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248233"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 GOLD PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
 PAGEREF _Toc188248233 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330033000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 26}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248234"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Summing Sums [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248234 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330034000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 26}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248235"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 The Bovine Accordion and Banjo Orchestra [Lei Huang, 2007]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248235 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330035000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 31}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248236"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Treasure [Yang Yi, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248236 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330036000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 35}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s22\ql \li0\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\insrsid4082891 \hich\af37\dbch\af37\loch\f37 HYPERLINK \\l "_Toc188248237"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 \hich\af37\dbch\af37\loch\f37 Elite 2007\hich\af37\dbch\af37\loch\f37 
 December Competition contest}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \hich\af37\dbch\af37\loch\f37  PAGEREF _Toc188248237 \\h }{
\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330037000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\hich\af37\dbch\af37\loch\f37 41}}}}}{\lang1024\langfe1024\dbch\af0\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248238"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 BRONZE PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248238 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330038000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 41}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248239"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Bookshelf [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248239 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200330039000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 42}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248240"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Bookshelf 2 [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248240 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340030000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 44}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248241"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Card Stacking [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248241 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340031000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 46}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248242"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 SILVER PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248242 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 49}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248243"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Charm Bracelet [Kolstad/Cox, 2006]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248243 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340033000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 49}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248244"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Building Roads  [Richard Ho, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248244 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340034000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 53}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248245"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Mud Puddles [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab 
}{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248245 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340035000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 56}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248246"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 GOLD PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
 PAGEREF _Toc188248246 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340036000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 61}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248247"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Sightseeing Cows [Reid Barton, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248247 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340037000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 61}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248248"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Gourmet Grazers [Alex Schwendner, 2007]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248248 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340038000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 65}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248249"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Best Cow Line, Gold [Christos Tzamos, 2007]}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248249 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200340039000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 68}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s22\ql \li0\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {
\insrsid4082891 \hich\af37\dbch\af37\loch\f37 HYPERLINK \\l "_Toc188248250"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 \hich\af37\dbch\af37\loch\f37 Elite 2007 November Competition contest}{
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \hich\af37\dbch\af37\loch\f37  PAGEREF _Toc18824\hich\af37\dbch\af37\loch\f37 8250 \\h }{
\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350030000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\hich\af37\dbch\af37\loch\f37 71}}}}}{\lang1024\langfe1024\dbch\af0\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248251"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 BRONZE PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248251 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350031000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 71}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248252"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Exploration [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248252 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 71}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248253"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Speed Reading [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248253 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350033000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 74}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248254"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Avoid The Lakes [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248254 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350034000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 76}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248255"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 SILVER PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248255 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350035000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 78}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248256"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Cow Hurdles [Neal Wu, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248256 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350036000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 78}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248257"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Milking Time [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248257 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350037000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 81}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248258"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Best Cow Line [Christos Tzamos, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248258 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350038000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 84}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s26\ql \li220\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin220\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248259"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 GOLD PROBLEMS}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
 PAGEREF _Toc188248259 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200350039000000}}}{\fldrslt {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790 88}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \s27\ql \li440\ri0\sa100\sl276\slmult1\widctlpar\tqr\tldot\tx9350\aspalpha\aspnum\faauto\adjustright\rin0\lin440\itap0 \f37\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\
l "_Toc188248260"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Telephone Wire [Jeffrey Wang, 2007]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }{\field{\*\fldinst {
\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248260 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200360030000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 88}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248261"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Cow Relays [Erik Bernhardsson, 2003]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 
\tab }{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248261 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200360031000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 90}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK \\l "_Toc188248262"}}{\fldrslt {\cs19\ul\cf2\lang1024\langfe1024\noproof\insrsid12864790\charrsid14840852 Sunscreen [Russ Cox, 2001]}{\lang1024\langfe1024\noproof\webhidden\insrsid12864790 \tab }
{\field{\*\fldinst {\lang1024\langfe1024\noproof\webhidden\insrsid12864790  PAGEREF _Toc188248262 \\h }{\lang1024\langfe1024\noproof\webhidden\insrsid4082891 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003100380038003200340038003200360032000000}}}{\fldrslt {\lang1024\langfe1024\noproof\webhidden\insrsid12864790 93}}}}}{\lang1024\langfe1024\noproof\insrsid12864790 
\par }\pard\plain \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 }}\pard\plain \ql \li0\ri0\sa200\sl276\slmult1
\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\insrsid6967064 
\par }{\b\fs32\insrsid6774718 \page 
\par }\pard\plain \s1\qc \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248219}Elite 2008 January Competition USACO Contest Analysis and Data}{\insrsid7804862\charrsid2631230 {\*\bkmkend _Toc188248219}
\par }\pard\plain \qj \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\b\f2\fs32\insrsid10487087\charrsid2631230 

\par }\pard\plain \s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248220}BRONZE PROBLEMS{\*\bkmkend _Toc188248220}
\par }\pard\plain \s16\qc \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid2494846 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 *********************************************************************}{\insrsid6967064 *******}{\insrsid10487087\charrsid2631230 *
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248221}Costume Party [Neal Wu, 2007]{\*\bkmkend _Toc188248221}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par It's Halloween! Farmer John is taking the cows to a costume party,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid2631230  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
but unfortunately he only has one costume. The costume fits precisely}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 two cows with a length of S (1 <= S <= 1,000,000). FJ has N cows}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 (2 <= N <= 20,000) conveniently numbered 1.}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid8718046 .}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 .N; cow i has length L}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 (1 <= L}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
 <= 1,000,000). Two cows can fit into the costume if the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 sum of their lengths is no greater than the length of the costume.}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 FJ wants to know how many pairs of two distinct cows will fit into}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 the costume.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and S
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: L}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par 
\par SAMPLE INPUT (file costume.in):
\par 
\par 4 6
\par 3
\par 5
\par 2
\par 1
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer representing the number of pairs of cows FJ
\par         can choose. Note that the order of the two cows does not
\par         matter.
\par 
\par SAMPLE OUTPUT (file costume.out):
\par 
\par 4
\par 
\par OUTPUT DETAILS:
\par 
\par The four pairs are as follows: cow 1 and cow 3; cow 1 and cow 4; cow 2 and
\par cow 4; and finally cow 3 and cow 4.
\par 
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid10487087\charrsid7697904 
We first sort the heights, using an efficient sort, which takes O(N log N) time. Then, for each height k in the list, we wish to (efficiently) find the index of the largest height that, when added to k, produces a sum less than H. After we find
 this index, we can count the number of heights that, when added to k, satisfy the given property. The simplest way to find this is with a binary search, which is implemented in the solution below:
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid8718046 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 #include}
{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 <algorithm>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 
\hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  std\hich\af2\dbch\af37\loch\f2 ;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "costume.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "costume.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  MAXN = 20005;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  N, H, total;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  height [MAXN];
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 // finds the index of the first position whose height is <= value
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 inline}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  binsearch (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  value)
\par \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  l\hich\af2\dbch\af37\loch\f2 
o = 0, hi = N - 1, mid;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  (lo < hi)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 mid = (lo + hi + 1) >> 1;
\par 
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  (height [mid] <= value)
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 lo = mid;
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 else
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \tab \tab \tab \hich\af2\dbch\af37\loch\f2 hi = mid - 1;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  lo;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  main ()
\par \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 , &N, &H);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \tab \hich\af2\dbch\af37\loch\f2 fs\hich\af2\dbch\af37\loch\f2 canf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 
, height + i);
\par 
\par 
\par \hich\af2\dbch\af37\loch\f2     sort (height, height + N);
\par 
\par \hich\af2\dbch\af37\loch\f2     total = 0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 // query the largest index satisfying the conditions
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 
 ind = binsearch (H - height [i]);
\par 
\par \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 // only count if ind > i
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  (ind > i)
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 total += ind - i;
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 else}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 
\hich\af2\dbch\af37\loch\f2 break}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 ;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par 
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 , total);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid8718046 \hich\af2\dbch\af37\loch\f2  0;
\par \}
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248222}Election Time [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248222}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par The cows are having their first election after overthrowing the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 tyrannical Farmer John, and Bessie is one of N cows (1 <= N <=}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 50,000) running for President. Before the election actually happens,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 however, Bessie wants to determine who has the best chance of}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 winning.

\par 
\par The election consists of two rounds. In the first round, the K cows}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 (1 <= K <= N) cows with the most votes advance to the second round.}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 In the second round, the cow with the most votes becomes President.
\par 
\par Given that cow i expects to get A}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  votes (1 <= A}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 
i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  <= 1,000,000,000)}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 in the first round and B}{
\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  votes (1 <= B}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid8718046\charrsid8718046 i}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  <= 1,000,000,000) in the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 second round (if he or she mak
es it), determine which cow is expected}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 to win the election. Happily for you, no vote count appears twice}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 in the A}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid13641156 i}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  list; likewise, no vote count appears twice in the B}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid13641156 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 list.
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and K
\par 
\par * Lines 2..N+1: Line i+1 contains two space-separated integers: A}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid13641156 i}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid13641156  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156 and B}{
\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid13641156 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par 
\par SAMPLE INPUT (file elect.in):
\par 
\par 5 3
\par 3 10
\par 9 2
\par 5 6
\par 8 4
\par 6 5
\par 
\par INPUT DETAILS:
\par 
\par There are 5 cows, 3 of which will advance to the second round. The cows}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 expect to get 3, 9, 5, 8, and 6 votes, respectively
, in the first round and}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 10, 2, 6, 4, and 5 votes, respectively, in the second.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The index of the cow that is expected to win the election.
\par 
\par SAMPLE OUTPUT (file elect.out):
\par 
\par 5
\par 
\par OUTPUT DETAILS:
\par 
\par Cows 2, 4, and 5 advance to the second round; cow 5 gets 5 votes in the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156   }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 second round, winning the election.
\par 
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid7697904 
Problem where the goal is simply to follow the rules of the task description. This one is slightly complex owing to the requirement for a 'sort' routine. C and C++ programmers have easily used built-}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156 
in sort routines (e.g., qsort).}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid7697904 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid7697904 
Furthermore, the sort routine has to be able to sort one number while carrying two other numbers in the exchanges. The program below is a simple demonstration of how qsort can be used to perform such operati
ons. Java and Pascal programmers had merely to augment their variable-swap routines to swap three variables. Some folks wrote two separate but similar sort routines; some used an if statement to differentiate variable for testing. 
\par Complete credit relied on an O(}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156 N}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid13641156 log}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156 N}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid7697904 ) solution; O(N}{\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid13641156 2}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid7697904 
) sorts were not fast enough to get full points. 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid13641156 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 <stdio.h>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 
\hich\af2\dbch\af37\loch\f2 <stdlib.h>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  a;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  b;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  cownum;
\par \}\hich\af2\dbch\af37\loch\f2  votes[50000];
\par 
\par \hich\af2\dbch\af37\loch\f2 comparea (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f *a, }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f *b) \{ }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 
\hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  b->a - a->a;\hich\af2\dbch\af37\loch\f2  \}
\par \hich\af2\dbch\af37\loch\f2 compareb (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f *a, }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f *b) \{ }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 
\hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  b->b - a->b; \}
\par 
\par \hich\af2\dbch\af37\loch\f2 main() \{
\par \hich\af2\dbch\af37\loch\f2     FILE *fin  = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "elect.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "elect.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  n, k, i;
\par 
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , &n, &k);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (i = 0; i < n; i++) \{
\par \hich\af2\dbch\af37\loch\f2      \hich\af2\dbch\af37\loch\f2    fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 
, &votes[i].a, &votes[i].b);
\par \hich\af2\dbch\af37\loch\f2         votes[i].cownum = i;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     qsort(votes, n, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f), comparea);
\par \hich\af2\dbch\af37\loch\f2     qsort(votes, k, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  vote_f), compareb);
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , votes[0].cownum+1);
\par \hich\af2\dbch\af37\loch\f2     exit (0)\hich\af2\dbch\af37\loch\f2 ;
\par \}
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156 
\par 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid2631230 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248223}iCow [Jeffrey Wang, 2008]{\*\bkmkend _Toc188248223}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par Fatigued by the endless toils of farming, Farmer John has decided}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 to try his hand in the MP3 player market with the new iCow. It is}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 an MP3 player that stores N songs (1 <= N <= 1,000) indexed 1 through}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 N that plays songs in a "shuffled" order, as determined by Farmer}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
John's own algorithm:
\par 
\par    * Each}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid13641156  song i has an initial rating R}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid13641156 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  (1 <= R}{
\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid13641156 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230  <= 10,000).
\par 
\par    * The next song to be played is always the one with}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par      the highest rating (or, if two or more are tied, the highest
\par      rated song with the lowest index is chosen).
\par 
\par    * After being played, a song's rating is set to zero, and its rating
\par      points are distributed evenly among the other N-1 songs.
\par 
\par    * If the rating points cannot be distributed evenly (i.e.,
\par      they are not divisible by N-1), then the extra points are
\par      parceled out one at a time to the first songs on the list
\par      (i.e., R_1, R_2, etc. -- but not the played song) until no
\par      more extra points remain.
\par 
\par This process is repeated with the new ratings after the next song}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 is played.
\par 
\par Determine the first T songs (1 <= T <= 1000) that are played by the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 iCow.
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and T
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: R}{\fs20\sub\loch\af2\hich\af2\dbch\af0\insrsid13641156\charrsid13641156 i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 
\par 
\par SAMPLE INPUT (file icow.in):
\par 
\par 3 4
\par 10
\par 8
\par 11
\par 
\par INPUT DETAILS:
\par 
\par The iCow contains 3 songs, with ratings 10, 8, and 11, respectively.}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230 You must determine the first 4 songs to be played.
\par 
\par OUTPUT FORMAT:
\par 
\par * Lines 1..T: Line i contains a single integer that is the i-th song}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7697904  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10487087\charrsid2631230         that the iCow plays.
\par 
\par SAMPLE OUTPUT (file icow.out):
\par 
\par 3
\par 1
\par 2
\par 3
\par 
\par OUTPUT DETAILS:
\par 
\par The ratings before each song played are:
\par    R_1  R_2  R_3
\par     10    8   11  -> play #3  11/2 = 5, leftover = 1
\par     16   13    0  -> play #1  16/2 = 8
\par      0   21    8  -> play #2  21/2 = 10, leftover = 1
\par     11    0   18  -> play #3  ...
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid10487087\charrsid7697904 
This program is a "pure programming" task. It requires nothing more than the implementation of a set of rules. The example even showed how one of the potentially troublesome rules actually worked. 
\par The program below is commented to show how each step is performed. The only potentially tricky part is the use of two variables for the distribution: one to count how many pieces get distributed and the second to say where they go. The second variable is 
the trick for implementing the "Don't redistribute back to the currently playing song" rule. 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid13641156 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 <stdio.h>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 
\hich\af2\dbch\af37\loch\f2 <stdlib.h>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  main() \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  bestrate, bestj, i, j, k, n, t, r[1000+1];
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  evenlydistribute, leftover;
\par \hich\af2\dbch\af37\loch\f2     FILE *fin  = fopen\hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "icow.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 
\hich\af2\dbch\af37\loch\f2 , }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "icow.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 );
\par 
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , &n, &t);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (i = 0; i < n; i++)
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , &r[i]);
\par 
\par \hich\af2\dbch\af37\loch\f2    }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (i = 0; i < t; i++) \{         }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 /* play t songs */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 /* find highest rated song */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2         bestrate = -1;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (j = 0; j < n; j++) \{
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (r[j] > bestrate) \{   }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 /* best, lowest index */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2                 bestj = j;
\par \hich\af2\dbch\af37\loch\f2                 bestrate = r[j];
\par \hich\af2\dbch\af37\loch\f2             \}
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2         fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 , bestj+1);        }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 /* pl\hich\af2\dbch\af37\loch\f2 ay it */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2         evenlydistribute = r[bestj]/(n-1);
\par \hich\af2\dbch\af37\loch\f2         leftover = r[bestj] % (n-1);
\par \hich\af2\dbch\af37\loch\f2         r[bestj] = 0;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (j = 0; j < n; j++)
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (j != bestj)
\par \hich\af2\dbch\af37\loch\f2                 r[j] += evenlydistribute;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (k = j = 0; j < leftover; j++, 
\hich\af2\dbch\af37\loch\f2 k++)  \{
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid13641156 \hich\af2\dbch\af37\loch\f2  (j == bestj) k++;
\par \hich\af2\dbch\af37\loch\f2             r[k]++;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     \}
\par \}}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10487087\charrsid13641156 
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid7697904 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
                           }{\insrsid7697904                              }{\ul\insrsid10487087\charrsid2631230 {\*\bkmkstart _Toc188248224}SILVER PROBLEMS{\*\bkmkend _Toc188248224}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 **********************************************************************
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248225}Cow Contest [Neal Wu, 2007]{\*\bkmkend _Toc188248225}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
\par N (1 <= N <= 100) cows, conveniently numbered 1..N, are participating}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 in a programming contest. As we all know, some cows code better}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
than others. Each cow has a certain constant skill rating that is}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 unique among the competitors.
\par 
\par The contest is conducted in several head-to-head rounds, each between}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 two cows. If cow A has a greater skill level than cow B (1 <= A <=}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
N; 1 <= B <= N; A != B), then cow A will always beat cow B.
\par 
\par Farmer John is trying to rank the cows by skill level. Given a list}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 the results of M (1 <= M <= 4,500) two-cow rounds, determine the}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
number of cows whose ranks can be precisely determined from the}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 results. It is guaranteed that the results of the rounds will not}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 be contradictory.

\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and M
\par 
\par * Lines 2..M+1: Each line contains two space-separated integers that}{\insrsid7697904  }{\insrsid10833698  }{\insrsid10487087\charrsid2631230         describe the competitors and results (the first integer, A, is}{\insrsid10833698  }{
\insrsid10487087\charrsid2631230 the winner) of a single round of competition: A and B
\par 
\par SAMPLE INPUT (file contest.in):
\par 
\par 5 5
\par 4 3
\par 4 2
\par 3 2
\par 1 2
\par 2 5
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer representing the number of cows whose ranks
\par         can be determined
\par 
\par SAMPLE OUTPUT (file contest.out):
\par 
\par 2
\par 
\par OUTPUT DETAILS:
\par 
\par Cow 2 loses to cows 1, 3, and 4. Thus, cow 2 is no better than any}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 of the cows 1, 3, and 4. Cow 5 loses to cow 2, so cow 2 is better}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
than cow 5.  Thus, cow 2 must be fourth, and cow 5 must be fifth.}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 The ranks of the other cows cannot be determined.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid10487087\charrsid7697904 
First, note that the problem can be converted into a graph, with the cows as the nodes, and the games as the edges. (In particular, note that the graph is a directed acyclic graph, or a DAG.)
\par For a certain cow X, X's rank can be determined if and only if the following property is true: for every other cow Y, either cow X must be better than cow Y, or cow Y must be better than cow X.
\par Thus, we can find which pairs of vertices in the graph are connected either by doing a BFS for O(NM) overall or Floyd-Warshall for O(N}{\f2\fs20\super\insrsid10487087\charrsid7697904 3}{\f2\fs20\insrsid10487087\charrsid7697904 
) overall. Then, for each cow, we check if every other cow is connected to it, and if so, we increment our answer by 1.
\par The following is a sample solution:
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid10833698 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "contest.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "contest.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  MAXN = 105;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  N, M, total = 0;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  reach [MAXN]\hich\af2\dbch\af37\loch\f2 [MAXN];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  main ()
\par \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , &N, &M);
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // cows are 'connected' to themselves
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \tab \hich\af2\dbch\af37\loch\f2 reach [i][i] = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 true}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // read input
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2  a, b;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < M; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , &a, &b);
\par \tab \tab \hich\af2\dbch\af37\loch\f2 a-\hich\af2\dbch\af37\loch\f2 -, b--;
\par 
\par \tab \tab \hich\af2\dbch\af37\loch\f2 reach [a][b] = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 true}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // use Floyd-Warshall to compute transitive closure
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  k = 0; k < N; k++)
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (reach [i][k])
\par \tab \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  j = 0; j < N; j++)
\par \tab \tab \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (reach [k][j])
\par \tab \tab \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 reach [i][j] = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 true}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par 
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  good = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 true}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par 
\par \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // we can find the rank of a cow if all other cows are connected to it
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  j = 0; j < N; j++)
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (!reach [i][j] && !reach [j][i])
\par \tab \tab \tab \{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 good = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 false}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 break}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 ;
\par \tab \tab \tab \}
\par 
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (good)
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 t\hich\af2\dbch\af37\loch\f2 otal++;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , total);
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
\par }{\insrsid10487087 
\par }{\insrsid7697904 
\par 
\par }{\insrsid7697904\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248226}Running [Neal Wu, 2007]{\*\bkmkend _Toc188248226}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
\par The cows are trying to become better athletes, so Bessie is running}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 on a track for exactly N (1 <= N <= 10,000) minutes. During each}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
minute, she can choose to either run or rest for the whole minute.
\par 
\par The ultimate distance Bessie runs, though, depends on her 'exhaustion}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 factor', which starts at 0. When she chooses to run in minute i,}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
she will run exactly a distance of D}{\sub\insrsid10833698\charrsid10833698 i}{\insrsid10487087\charrsid2631230  (1 <= D}{\sub\insrsid10833698\charrsid10833698 i}{\insrsid10487087\charrsid2631230  <= 1,000) and her}{\insrsid7697904  }{
\insrsid10487087\charrsid2631230 exhaustion factor will increase by 1 -- but must never be allowed}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 to exceed M (1 <= M <= 500).  If she chooses to rest, her exhaustion}{\insrsid7697904  }{
\insrsid10487087\charrsid2631230 factor will decrease by 1 for each minute she rests. She cannot}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 commence running again until her exhaustion factor reaches 0. At}{\insrsid7697904  }{
\insrsid10487087\charrsid2631230 that point, she can choose to run or rest.
\par 
\par At the end of the N minute workout, Bessie's exaustion factor must}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 be exactly 0, or she will not have enough energy left for the rest}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 of the day.

\par 
\par Find the maximal distance Bessie can run.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and M
\par 
\par * Lines 2..N+1: Line i+1 contains the single integer: D}{\sub\insrsid10833698\charrsid10833698 i}{\insrsid10487087\charrsid2631230 
\par 
\par SAMPLE INPUT (file cowrun.in):
\par 
\par 5 2
\par 5
\par 3
\par 4
\par 2
\par 10
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer representing the largest distance Bessie}{\insrsid10833698  }{\insrsid10487087\charrsid2631230 can run while satisfying the conditions.
\par 
\par SAMPLE OUTPUT (file cowrun.out):
\par 
\par 9
\par 
\par OUTPUT DETAILS:
\par 
\par Bessie runs during the first minute (distance=5), rests during the}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 second minute, runs for the third (distance=4), and rests for the}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
fourth and fifth. Note that Bessie cannot run on the fifth minute}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 because she would not end with a rest factor of 0.
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid10487087\charrsid7697904 
This is a straightforward dynamic programming (DP) problem. To solve the problem, we want to find, for each k such that 0 <= k <= N, the maximum possible distance Bessie could have run after the first k minute
s, if she has a rest factor of 0. (For example, if we can obtain a distance of 14 after 5 minutes with a rest factor of 0, or we can obtain a distance of 15 after 5 minutes with a rest factor of 0, we would always choose the second over the first.) Clearl
y, the best such value for 0 is 0. Then, for each minute i of the N minutes, we can compute all of the next values possible with the following method:
\par -First, try to not run during the minute, and see if this produces an improvement. (Thus, check if the best value for i is better than the one for i + 1.)
\par -Then, for each number k from 1 to M, let Bessie run for exactly k minutes and then rest for k minutes. See if this new value produces a greater value than the best value for i + 2k (which is the number of m
inutes finished after running for k minutes and resting for another k minutes).
\par Thus, since we do M updates for each of the N minutes, our total complexity is O(NM). The following is a sample solution:
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid10833698 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = f\hich\af2\dbch\af37\loch\f2 open (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "cowrun.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 , }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "cowrun.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  MAXN = 10005;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  N, M, dist [MAXN], best [MAXN];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  main ()
\par \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , &N, &M);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , dist + i);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // skip the value
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 
\hich\af2\dbch\af37\loch\f2  (best [i] > best [i + 1])
\par \hich\af2\dbch\af37\loch\f2             best [i + 1] = best [i];
\par 
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  sum = best [i], pos = i;
\par 
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  j = 0; j < M && pos < N; j++)
\par \hich\af2\dbch\af37\loch\f2         \{
\par \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 // update each value
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2             \hich\af2\dbch\af37\loch\f2 sum += dist [i + j];
\par \hich\af2\dbch\af37\loch\f2             pos += 2;
\par 
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2  (sum > best [pos])
\par \hich\af2\dbch\af37\loch\f2                 best [pos] = sum;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10833698 \hich\af2\dbch\af37\loch\f2 , best [N]);
\par \}
\par 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087 
\par }{\insrsid1259585\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
{\*\bkmkstart _Toc188248227}Telephone Lines [Paul Christiano, 2007]{\*\bkmkend _Toc188248227}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10487087\charrsid2631230 
\par Farmer John wants to set up a telephone line at his farm. Unfortunately,}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 the phone company is uncooperative, so he needs to pay for some of}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
the cables required to connect his farm to the phone system.
\par 
\par There are N (1 <= N <= 1,000) forlorn telephone poles conveniently}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 numbered 1}{\insrsid8857118\charrsid2631230 ...N}{\insrsid10487087\charrsid2631230  that are scatte
red around Farmer John's property; no}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 cables connect any them.  A total of P (1 <= P <= 10,000) pairs of}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
poles can be connected by a cable; the rest are too far apart.
\par 
\par }{\insrsid10833698 The i}{\super\insrsid10487087\charrsid10833698 th}{\insrsid10487087\charrsid2631230  cable can connect the two distinct poles A}{\sub\insrsid10833698\charrsid10833698 i}{\insrsid10487087\charrsid2631230  and B}{
\sub\insrsid10833698\charrsid10833698 i}{\insrsid10487087\charrsid2631230 , with}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 length L}{\sub\insrsid10487087\charrsid10833698 i}{\insrsid10487087\charrsid2631230  }{\insrsid10833698    }{
\insrsid10487087\charrsid2631230 (1 <= L_i <= 1,000,000) units if used. The input data}{\insrsid7697904  }{\insrsid10833698 set never names any \{A}{\sub\insrsid10833698\charrsid10833698 i}{\insrsid10833698 ,B}{\sub\insrsid10833698\charrsid10833698 i}{
\insrsid10487087\charrsid2631230 \} pair more than once. Pole 1 is already}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 connected to the phone system, and pole N is at the farm. Poles 1}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
and N need to be connected by a path of cables; the rest of the}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 poles might be used or might not be used.
\par 
\par As it turns out, the phone company is willing to provide Farmer}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 John with K (0 <= K < N) lengths of cable for free. Beyond that he}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
will have to pay a price equal to the length of the longest remaining}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 cable he requires (each pair of poles is connected with a separate}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
cable), or 0 if he does not need any additional cables.
\par 
\par Determine the minimum amount that Farmer John must pay.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Three space-separated integers: N, P, and K
\par 
\par * Lines 2..P+1: Line i+1 contains the three space-separated integers:
\par }{\insrsid1259585         A}{\sub\insrsid10487087\charrsid1259585 i}{\insrsid1259585 , B}{\sub\insrsid10487087\charrsid1259585 i}{\insrsid10487087\charrsid2631230 , and L}{\sub\insrsid10487087\charrsid1259585 i}{\insrsid10487087\charrsid2631230 
\par 
\par SAMPLE INPUT (file phoneline.in):
\par 
\par 5 7 1
\par 1 2 5
\par 3 1 4
\par 2 4 8
\par 3 2 3
\par 5 2 9
\par 3 4 7
\par 4 5 6
\par 
\par INPUT DETAILS:
\par 
\par There are 5 poles. Pole 1 cannot be connected directly to poles 4 or 5.}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 Pole 5 cannot be connected directly to poles 1 or 3. All other pairs can be}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
connected. The phone company will provide one free cable.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer, the minimum amount Farmer John can pay. If}{\insrsid1259585  }{\insrsid10487087\charrsid2631230 it is impossible to connect the farm to the phone company,}{\insrsid1259585  }{\insrsid10487087\charrsid2631230 print -1.
\par 
\par SAMPLE OUTPUT (file phoneline.out):
\par 
\par 4
\par 
\par OUTPUT DETAILS:
\par 
\par If pole 1 is connected to pole 3, pole 3 to pole 2, and pole 2 to pole 5}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 then Farmer John requires cables of length 4, 3, and 9. The phone company}{\insrsid7697904  }{\insrsid10487087\charrsid2631230 
will provide the cable of length 9, so the longest cable needed has length 4.
\par }{\insrsid6623839 
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid8857118 {\insrsid8857118 
We construct the following graph G: each pole is a vertex, and each possible connection between poles is an edge between corresponding vertices with weight equal to the distance between the poles. 
\par Now imagine we 
have a function f(lim) that tells us if there exists a path from vertex 1 to vertex N using no more than K edges whose weights are greater than lim. If we have such a function f, we can perform a binary search for the answer: the smallest lim that works (
in other words, the smallest k such that f(k) is true) is the minimum amount Farmer John must pay. 
\par So the problem now is implementing function f(lim) efficiently, and to do so, we consider the graph H, which has the same vertices and edges as G but differe
nt edge weights. More precisely, an edge between vertices a and b in H has weight 0 if the corresponding edge in G has weight w <= lim, and weight 1 otherwise (if the corresponding edge in G has weight w > lim), so the shortest path between two vertices a
 
and b in H represents the minimum number of edges with weight greater than lim on a path between a and b in G. Thus computing f(lim) is equivalent to checking if the shortest path between 1 and N in H is less than or equal to K, and we can do this in O(E 
log V) time with Dijkstra's. 
\par In the worst case, we will need to evaluate function f O(log V) times (because of the binary search), so the total running time of the entire algorithm is O(E log}{\insrsid8857118\charrsid8857118 2}{\insrsid8857118 
 V). (It's actually possible to compute the shortest path between two vertices in a graph where all edges have weight 0 or 1 in linear time, but that's not needed here.) 
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\insrsid8857118\charrsid2631230 

\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid1259585 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 #include}
{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 <fstream>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 <vector>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 ifstream fin (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 "phoneline.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 ofstream fout (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 "phoneline.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  MAX = 1000 + 5;
\par 
\par \hich\af2\dbch\af37\loch\f2 vector <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 > a[MAX], b[MAX];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2      e[MAX * 10];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  mark[MAX];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2   dis [MAX], saf[MAX], head, tail;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  n, k, D, M;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  dfs (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  u)
\par \{
\par \hich\af2\dbch\af37\loch\f2     dis[u] = D;
\par \hich\af2\dbch\af37\loch\f2     mark[u] = }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 true}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 ;
\par \hich\af2\dbch\af37\loch\f2     saf[tail++] = u;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  i = 0; i < a[u].size (); i++) \{
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (\hich\af2\dbch\af37\loch\f2 
!mark[a[u][i]] && b[u][i] <= M)
\par \hich\af2\dbch\af37\loch\f2             dfs (a[u][i]);
\par \hich\af2\dbch\af37\loch\f2     \}
\par \}
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  Bfs (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  MM)
\par \{
\par \hich\af2\dbch\af37\loch\f2     M = MM;
\par \hich\af2\dbch\af37\loch\f2     memset (mark, 0, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  mark);
\par \hich\af2\dbch\af37\loch\f2     head = tail = 0;
\par \hich\af2\dbch\af37\loch\f2     D = 0;
\par \hich\af2\dbch\af37\loch\f2     dfs (n - 1);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (head < tail) \{
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  k = saf[head++];
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  i\hich\af2\dbch\af37\loch\f2  = 0; i < a[k].size (); ++i) \{
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (!mark[a[k][i]]) \{
\par \hich\af2\dbch\af37\loch\f2                 D = dis[k] + 1;
\par \hich\af2\dbch\af37\loch\f2                 dfs (a[k][i]);
\par \hich\af2\dbch\af37\loch\f2             \}
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     \}
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  bs (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  x, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  y)
\par \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (y == x + 1) \{
\par \hich\af2\dbch\af37\loch\f2         fout << e[y] << endl;
\par \hich\af2\dbch\af37\loch\f2         exit (0);
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2      mid = (y + x) / 2;
\par \hich\af2\dbch\af37\loch\f2     Bfs (e[mid]);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (dis[0] <= k)
\par \hich\af2\dbch\af37\loch\f2         bs (x, mid);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 else
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2         bs (mid, y);
\par \}
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  main () 
\par \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  ee;
\par \hich\af2\dbch\af37\loch\f2     fin >> n >> ee >> k;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2      u, v, w;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  i = 0; i < ee; ++i) \{
\par \hich\af2\dbch\af37\loch\f2         fin >> u >\hich\af2\dbch\af37\loch\f2 > v >> w;
\par \hich\af2\dbch\af37\loch\f2         u--;
\par \hich\af2\dbch\af37\loch\f2         v--;
\par \hich\af2\dbch\af37\loch\f2         a[u].push_back (v);
\par \hich\af2\dbch\af37\loch\f2         b[u].push_back (w);
\par \hich\af2\dbch\af37\loch\f2         a[v].push_back (u);
\par \hich\af2\dbch\af37\loch\f2         b[v].push_back (w);
\par \hich\af2\dbch\af37\loch\f2         e[i + 1] = w;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     sort (e, e + 1 + ee);
\par \hich\af2\dbch\af37\loch\f2     Bfs (0);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (!mark[0]) \{
\par \hich\af2\dbch\af37\loch\f2         fout << }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 "-1"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  \hich\af2\dbch\af37\loch\f2 << endl;

\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  0;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  (dis[0] <= k) \{
\par \hich\af2\dbch\af37\loch\f2         fout << }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 "0"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  << endl;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid1259585 \hich\af2\dbch\af37\loch\f2  0;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     bs (0, ee);
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
\par }{\insrsid10487087\charrsid2631230 
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid7697904 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\f2\fs20\insrsid7697904 
\par }{\insrsid7697904                                                 }{\insrsid1259585 {\*\bkmkstart _Toc188248228}\tab \tab }{\ul\insrsid6623839\charrsid2631230 GOLD PROBLEMS{\*\bkmkend _Toc188248228}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 *********************************************************}{\insrsid1259585 *******}{\insrsid6623839\charrsid2631230 *************
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
{\*\bkmkstart _Toc188248229}Haybale Guessing [Brian Dean, 2003]{\*\bkmkend _Toc188248229}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
\par The cows, who always have an inferiority complex about their}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 intelligence, have a new guessing game to sharpen their brains.
\par 
\par A designated 'Hay Cow' hides behind the barn and creates N (1 <= N}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 <= 1,000,000) uniquely-sized stacks (conveniently numbered 1..N)}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
of hay bales, each with 1..1,000,000,000 bales of hay.
\par 
\par The other cows then ask the Hay Cow a series of Q (1 <= Q <= 25,000)}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 questions about the the stacks, all having the same form:
\par 
\par What is the smallest number of bales of any stack in the range}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 of stack numbers Q}{\sub\insrsid6623839\charrsid10635744 l}{\insrsid6623839\charrsid2631230 ..Q}{\sub\insrsid6623839\charrsid10635744 h}{
\insrsid6623839\charrsid2631230  (1 <= Q}{\sub\insrsid6623839\charrsid10635744 l}{\insrsid6623839\charrsid2631230  <= N; Q}{\sub\insrsid6623839\charrsid10635744 l}{\insrsid6623839\charrsid2631230  <= Q}{\sub\insrsid6623839\charrsid10635744 h}{
\insrsid6623839\charrsid2631230  <= N)?
\par 
\par The Hay Cow answers each of these queries with a single integer A}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 whose truthfulness is not guaranteed.
\par 
\par Help the other cows determine if the answers given by the Hay Cow}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 are self-consistent or if certain answers contradict others.
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and Q
\par 
\par * Lines 2..Q+1: Each line contains three space-separated integers that}{\insrsid10635744  }{\insrsid6623839\charrsid2631230 represent a single query and its reply: }{\insrsid10635744\charrsid2631230 Q}{\sub\insrsid10635744\charrsid10635744 l}{
\insrsid6623839\charrsid2631230 , }{\insrsid10635744\charrsid2631230 Q}{\sub\insrsid10635744\charrsid10635744 h}{\insrsid6623839\charrsid2631230 , and A
\par 
\par SAMPLE INPUT (file bales.in):
\par 
\par 20 4
\par 1 10 7
\par 5 19 7
\par 3 12 8
\par 11 15 12
\par 
\par INPUT DETAILS:
\par 
\par The minimum number of bales in stacks 1..10 is 7, the minimum number}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 of bales in stacks 5..19 is 7, the minimum number of bales in stacks}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
3..12 is 8, and the minimum number of bales in stacks 11..15 is 12.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: Print the single integer 0 if there are no inconsistencies
\par         among the replies (i.e., if there exists a valid realization
\par         of the hay stacks that agrees with all Q queries).  Otherwise,
\par         print the index from 1..Q of the earliest query whose answer
\par         is inconsistent with the answers to the queries before it.
\par 
\par SAMPLE OUTPUT (file bales.out):
\par 
\par 3
\par 
\par OUTPUT DETAILS:
\par 
\par Query 3 ("3 12 8") is the first that is inconsistent with those}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 before it. From queries 1 and 2 and the fact that all hay stacks}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
have a distinct number of bales, we deduce that one of stacks 5..10}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 must contain exactly 7 bales.  However, this stack contradicts the}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
answer to query 3.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid6623839\charrsid7697904 The first (and most c
rucial) observation to make is that if there exists a list of stack sizes that satisfies queries 1...m, then the same set satisfies queries 1...m-1. So we can perform binary search on the biggest sequence of queries that can be satisfied, and reduce the p
roblem to finding whether a set of queries is satisfiable. 
\par Then, given a sequence of query results, we can find out what's the lowest number of bales in each stack in O(N+Q}{\f2\fs20\sub\insrsid6623839\charrsid10635744 log}{\f2\fs20\insrsid6623839\charrsid7697904 
Q) time by sweeping through the queries and tracking the 'limiting query' using a heap. This can alternatively be done using a range tree, although that's a bit slower. 
\par We then need to check that minimum values are indeed present in the ranges. For all the queries whose answer is x, the value x must be present in their intersection si
nce x can only appear once total. Then x must appear once as one of the 'minimum' values since x is also an upper bound on that region as well. So this can be checked in O(N) time using a lookup list as well. Note that this condition is sufficient since a
ll the other duplicated values (in the lower bound list) can have their values rised to arbitrary values without causing any further problems. 
\par Below is Richard Peng's solution: 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid10635744 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 <algorithm>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 <queue>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 <vector>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 usin\hich\af2\dbch\af37\loch\f2 g}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  MAXN 1100000
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  MAXQ 30000
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 struct}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  qtype \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  p1, p2, res, id;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 operator}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  < (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  qtype & o)}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 const}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  \{}{\f2\fs20\lang1024\langfe1024\noproof\insrsid5977323 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 
return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  p1 < o.p1;}{\f2\fs20\lang1024\langfe1024\noproof\insrsid5977323 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \}
\par \}\hich\af2\dbch\af37\loch\f2 lis[MAXQ];
\par 
\par \hich\af2\dbch\af37\loch\f2 pair <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 > lis1[MAXQ];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \tab \hich\af2\dbch\af37\loch\f2 last[MAXQ], v[MAXN], left[MAXQ], right[MAXQ], n\hich\af2\dbch\af37\loch\f2 
, q, needt;
\par \hich\af2\dbch\af37\loch\f2 priority_queue <pair <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 > >lim;
\par \hich\af2\dbch\af37\loch\f2 pair <pair <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 >, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 > need[MAXQ];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  work (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  len) 
\par \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \tab \hich\af2\dbch\af37\loch\f2     i, i1, i2;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (len > q) }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (!lim.empty ()) lim.pop ();
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = 0; i < q; i++) 
\par \tab \{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 left[i] = last[i] =\hich\af2\dbch\af37\loch\f2  0;
\par \tab \tab \hich\af2\dbch\af37\loch\f2 right[i] = n;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = 0; i < q; i++)
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (lis[i].id < len) 
\par \tab \tab \{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 left[lis[i].res] >?= lis[i].p1;
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 right[lis[i].res] <?= lis[i].p2;
\par \tab \tab \}
\par 
\par \hich\af2\dbch\af37\loch\f2     needt = 0;
\par \hich\af2\dbch\af37\loch\f2     
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = 0; i < q; i++)
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (left[i] != 0)
\par \tab \tab \{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 need[needt].first.first =\hich\af2\dbch\af37\loch\f2  right[i];
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 need[needt].first.second = left[i];
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 need[needt++].second = i;
\par \tab \tab \}
\par 
\par \hich\af2\dbch\af37\loch\f2     sort (need, need + needt);
\par \hich\af2\dbch\af37\loch\f2     
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = 1, i1 = i2 = 0; i <= n; i++) 
\par \tab \{
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (; (i1 < q) && (lis[i1].p1 == i); i1++)
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (lis[i1].id < len) 
\par \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 lim.push (pair < }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  >(lis[i1].res, lis[i1].p2));
\par \tab \tab 
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  ((!lim.empty ()) && (lim.top ().second < i)) 
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 lim.pop ();
\par 
\par \tab \tab \hich\af2\dbch\af37\loch\f2 v[i] = lim.empty () ? 0 : v[i] = lim.top ().first;
\par \tab \tab 
\par \tab \tab \hich\af2\dbch\af37\loch\f2 last[v[i]] = i;
\par \tab \tab 
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (; (i2 < needt) && (need[i2].first.first == i); i2++)
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (l\hich\af2\dbch\af37\loch\f2 
ast[need[i2].second] < need[i2].first.second)
\par \tab \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  0;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  1;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  main ()
\par \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \tab \hich\af2\dbch\af37\loch\f2 i, j, tot, ans, del;
\par \hich\af2\dbch\af37\loch\f2     freopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "bales.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , stdin);
\par \hich\af2\dbch\af37\loch\f2     freopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "bales.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , stdout);
\par \hich\af2\dbch\af37\loch\f2     scanf (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "%d%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , &n, &q);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = 0; i < q\hich\af2\dbch\af37\loch\f2 ; i++)

\par \tab \{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 scanf (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "%d%d%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 
, &lis[i].p1, &lis[i].p2, &lis[i].res);
\par \tab \tab \hich\af2\dbch\af37\loch\f2 lis[i].id = i;
\par \tab \tab \hich\af2\dbch\af37\loch\f2 lis1[i].first = lis[i].res;
\par \tab \tab \hich\af2\dbch\af37\loch\f2 lis1[i].second = i;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     
\par \tab \hich\af2\dbch\af37\loch\f2 sort (lis1, lis1 + q);
\par \hich\af2\dbch\af37\loch\f2     
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (i = tot = 0; i < q; i++)
\par \tab \{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 tot += ((i == 0) || (lis1[i].first != lis1[i\hich\af2\dbch\af37\loch\f2  - 1].first));
\par \tab \tab \hich\af2\dbch\af37\loch\f2 lis[lis1[i].second].res = tot;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     sort (lis, lis + q);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (del = 1 << 16, ans = 0; del; del /= 2)
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2  (work (ans + del))
\par \tab \hich\af2\dbch\af37\loch\f2     ans += del;
\par \hich\af2\dbch\af37\loch\f2     printf (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \hich\af2\dbch\af37\loch\f2 , (ans < q) ? (ans + 1) : 0);
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid11607238 {\f2\fs20\lang1024\langfe1024\noproof\insrsid10635744 \}}{\f2\fs20\lang1024\langfe1024\noproof\insrsid7697904\charrsid11607238 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid7697904 
\par }\pard\plain \ql \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid5977323 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\insrsid5977323 
\par 
\par }{\insrsid5977323\charrsid5977323 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
{\*\bkmkstart _Toc188248230}Artificial Lake [Matt McCutchen, 2006]{\*\bkmkend _Toc188248230}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839 
\par }{\insrsid5977323\charrsid2631230 
\par }{\insrsid6623839\charrsid2631230 The oppressively hot summer days have raised the cows' clamoring}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 to its highest level. Farmer John has finally decided to build an}{\insrsid7697904  }{
\insrsid6623839\charrsid2631230 artificial lake. For his engineering studies, he is modeling the}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 lake as a two-dimensional landscape consisting of a contiguous}{\insrsid7697904  }{
\insrsid6623839\charrsid2631230 sequence of N soon-to-be-submerged levels (1 <= N <= 100,000)}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 conveniently numbered 1..N from left to right.
\par 
\par Each level i is described by two integers, its width W_i (1 }{\insrsid10641678 <= W}{\sub\insrsid10641678\charrsid10641678 i}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 <= 1,000) and height (like a relative elevation) }{
\insrsid10641678\charrsid2631230 H}{\sub\insrsid10641678\charrsid10641678 i}{\insrsid10641678  }{\insrsid6623839\charrsid2631230 (1 <= H}{\sub\insrsid10641678\charrsid10641678 i}{\insrsid6623839\charrsid2631230  <=}{\insrsid7697904  }{
\insrsid6623839\charrsid2631230 1,000,000). The heights of FJ's levels are unique. An infinitely}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 tall barrier encloses the lake's model on the left and right. One}{\insrsid7697904  }{
\insrsid6623839\charrsid2631230 example lake profile is shown below.
\par             }{\insrsid6623839 
\par }{\insrsid5977323\charrsid2631230 
\par }{\insrsid6623839\charrsid2631230          *             *  :
\par          *             *  :
\par          *             *  8
\par          *    ***      *  7
\par          *    ***      *  6
\par          *    ***      *  5
\par          *    **********  4 <- height
\par          *    **********  3
\par          ***************  2
\par          ***************  1
\par Level    |  1 |2|  3   |
\par 
\par In FJ's model, he starts filling his lake at sunrise by flowing}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 water into the bottom of the lowest elevation at a rate of 1 square}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
unit of water per minute. The water falls directly downward until}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 it hits something, and then it flows and spreads as room-temperature}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 water a
lways does.  As in all good models, assume that falling and}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 flowing happen instantly. Determine the time at which each elevation's}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
becomes submerged by a single unit of water.
\par 
\par      WATER              WATER OVERFLOWS                     
\par        |                       |                           
\par      * |          *      *     |      *      *            *
\par      * V          *      *     V      *      *            *
\par      *            *      *    ....    *      *~~~~~~~~~~~~*
\par      *    **      *      *~~~~** :    *      *~~~~**~~~~~~*
\par      *    **      *      *~~~~** :    *      *~~~~**~~~~~~*
\par      *    **      *      *~~~~**~~~~~~*      *~~~~**~~~~~~*
\par      *    *********      *~~~~*********      *~~~~*********
\par      *~~~~*********      *~~~~*********      *~~~~*********
\par      **************      **************      **************
\par      **************      **************      **************
\par 
\par      After 4 mins        After 26 mins       After 50 mins
\par      Lvl 1 submerged     Lvl 3 submerged     Lvl 2 submerged
\par 
\par Warning: The answer will not always fit in 32 bits.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N+1: Line i+1 describes level i with two space-separated
\par         integers: }{\insrsid10641678 W}{\sub\insrsid10641678\charrsid10641678 i}{\insrsid10641678\charrsid2631230  }{\insrsid6623839\charrsid2631230 and }{\insrsid10641678\charrsid2631230 H}{\sub\insrsid10641678\charrsid10641678 i}{
\insrsid6623839\charrsid2631230 
\par 
\par SAMPLE INPUT (file alake.in):
\par 
\par 3
\par 4 2
\par 2 7
\par 6 4
\par 
\par INPUT DETAILS:
\par 
\par Three levels just as in the example above.  Water will fill the}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 first level because it is the lowest.}{\insrsid6623839 
\par }{\insrsid7697904\charrsid2631230 
\par }{\insrsid6623839\charrsid2631230 OUTPUT FORMAT:
\par 
\par * Lines 1..N: Line i contains a single integer that is the number of
\par         minutes that since sunrise when level #i is covered by water
\par         of height 1.
\par 
\par SAMPLE OUTPUT (file alake.out):
\par 
\par 4
\par 50
\par 26
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 
We try to solve the problem for each level separately. For each level, the amount of water required until it overflows can be broken down into three parts. WOLOG, we assume the level is to the left of the level of minimum height. The three parts are: 

\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid6623839\charrsid7697904 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li720\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx720\aspalpha\aspnum\faauto\ls1\adjustright\rin0\lin720\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 
To the left of the level. Water will flow this way unti it encounters the first level that has a higher height. So, for each level, we need to find the first level to its left that has a higher height. This can be done using a stack in O(n) time. 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid6623839\charrsid7697904 \loch\af3\dbch\af0\hich\f3 \'b7\tab}
Between the level and the lowest level. The water levels forms a series of 'steps', which can be tracked in a stack if we consider the levels from right to left. This can also be calculated in O(n) time. 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid6623839\charrsid7697904 \loch\af3\dbch\af0\hich\f3 \'b7\tab}
To the right of the lowest level. If we consider the levels one by one leftwards starting from the one to the left of the lowest level, the water level at the lowest level can only increase. So it suffices to keep a pointer to how far to the right gets su
bmerged and increase this counter as we go. This clearly also runs in O(n) 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 
Combining these three parts, we get an O(n) algorithm. Many of the solutions submitted by contestants used much cleverer algorithms that combines these three steps into a single on
e, but most are still based on this 'step' idea. Here is Neal Wu's explanation on how he did this problem: 
\par Add in the two infinite barriers as 'levels' with infinite height for simplicity. We will find the answer for each level in the order they are filled, keeping track of the current time when calculating each.
\par Note that after we have filled level L, the water will go in the direction of the shorter neighbor level of L. For example, in the following diagram, after level 2 is filled, the water will flow to the right:
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid2631230 *             * 8
\par *             * 7
\par ****          * 6
\par ****  **      * 5  <-- heights
\par ****  ****    * 4
\par ****  ******* * 3
\par ****  ********* 2
\par *************** 1
\par  1  2 3 4 5  6
\par    Levels
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 The water will keep flowing to the right (and thus 'skipping'
 levels) until an increase in height occurs. Thus, in the example above, level 6 will be filled next after level 2 is finished.
\par Also, note that at this point both level 2 and level 3 share the same water level. They will always remain at the same height si
nce the water fills them evenly. Thus, we can 'merge' level 2 into level 3 (the new width of level 3 will be the sum of its original width and the width of level 2), and delete level 2. Note that to implement this merging efficiently we can use a linked l
ist of levels (which enables constant time deletion of a level).
\par This gives us a fairly simple algorithm: find the level which the water currently fills (starting with the shortest level), and calculate the time at which it becomes submerged (which is equal
 to the time when the level began to fill up added to the width of the level). Next, find how long it takes for the level to fill up to the height of the shorter of its two neighbors, and add this to our current time. Finally, continue in the direction of
 the shorter neighbor until we reach an increase in level heights. This level is the next level to fill with water.
\par At first, it seems this approach is O(N}{\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 2}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid6623839\charrsid7697904 
), since we can skip up to O(N) levels each time. However, the algorithm is actually linear time beca
use of the following fact: after we skip a level, we cannot skip it again. This is because after a level is skipped, the water must come back to it from the opposite direction, which means it must fill the level. (In the above example, the water will skip
 level 5, fill level 6, and then come back to level 5 and fill it.) Therefore each level can be skipped at most once, so the algorithm takes O(N) time overall. The following is a sample implementation:
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid10641678 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 {\*\bkmkstart _Toc188248231}\hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fop\hich\af2\dbch\af37\loch\f2 en (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "alake.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2 , }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "alake.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  MAXN = 100005, INF = 1000000000;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  N, width [MAXN], height [MAXN];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  prev [MAXN], next [MAXN];    }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // simplified linked list
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  ans [MAXN], total = 0;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  main () \{
\par \hich\af2\dbch\af37\loch\f2     fs\hich\af2\dbch\af37\loch\f2 canf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 , &N);

\par \hich\af2\dbch\af37\loch\f2     height [0] = height [N + 1] = INF;    }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // infinite walls
\par 
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  ind = 1;    }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // the current level being filled with water
\par 
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  i = 1; i <= N; i++) \{
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 , width + i, height + i);

\par \hich\af2\dbch\af37\loch\f2         prev [i] =\hich\af2\dbch\af37\loch\f2  i - 1, next [i] = i + 1;    }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // initialize
\par 
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // ind starts as the shortest level
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  (height [i] < height [ind])    
\par \hich\af2\dbch\af37\loch\f2             ind = i;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // continue until the current level is one of the walls
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  (height [ind] < INF)
\par \tab \{\hich\af2\dbch\af37\loch\f2   
\par \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // calcu\hich\af2\dbch\af37\loch\f2 late our current index
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2         ans [ind] = total + width [ind];    
\par \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // delete the current index
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2         next [prev [ind]] = next [ind], prev [next [ind]] = prev [ind];
\par 
\par \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // take the smaller of the neighbors
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  (height [prev [ind]] < height [next\hich\af2\dbch\af37\loch\f2  [ind]]) 
\par \tab \tab \{\hich\af2\dbch\af37\loch\f2   
\par \tab \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // add the time taken to our current total
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2             total += (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 
) width [ind] * (height [prev [ind]] - height [ind]);    
\par \hich\af2\dbch\af37\loch\f2              }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // merge the levels together
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \tab \tab \tab \hich\af2\dbch\af37\loch\f2 width [prev [ind]] += width [ind];   
\par \hich\af2\dbch\af37\loch\f2             ind = prev\hich\af2\dbch\af37\loch\f2  [ind];
\par 
\par \tab \tab \tab }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // find the next index
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  (ind > 0 && height [prev [ind]] < height [ind]) 
\par \hich\af2\dbch\af37\loch\f2                 ind = prev [ind];
\par \hich\af2\dbch\af37\loch\f2         \} 
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 else}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  
\par \tab \tab \{\hich\af2\dbch\af37\loch\f2   }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 // do similarly for the other neighbor
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2             total += (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 
\hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 ) width [ind] * (height [n
\hich\af2\dbch\af37\loch\f2 ext [ind]] - height [ind]);
\par \hich\af2\dbch\af37\loch\f2             width [next [ind]] += width [ind];
\par \hich\af2\dbch\af37\loch\f2             ind = next [ind];
\par 
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 
 (ind <= N && height [next [ind]] < height [ind])
\par \hich\af2\dbch\af37\loch\f2                 ind = next [ind]; 
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2  i = 1; i <= N; i++\hich\af2\dbch\af37\loch\f2 )
\par \hich\af2\dbch\af37\loch\f2         fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 "%lld\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid10641678 \hich\af2\dbch\af37\loch\f2 , ans [i]);
\par 
\par \}
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid2494846 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
Cell Phone Network [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248231}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6623839\charrsid2631230 
\par Farmer John has decided to give each of his cows a cell phone in}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 hopes to encourage their social interaction. This, however, requires}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
him to set up cell phone towers on his N (1 <= N <= 10,000) pastures}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 (conveniently numbered 1..N) so they can all communicate.
\par 
\par Exactly N-1 pairs of pastures are adjacent, and for any two pastures}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 A and B (1 <= A <= N; 1 <= B <= N; A != B) there is a sequence of}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
adjacent pastures such that A is the first pasture in the sequence}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 and B is the last. Farmer John can only place cell phone towers in}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
the pastures, and each tower has enough range to provide service}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 to the pasture it is on and all pastures adjacent to the pasture}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 with the cell tower.

\par 
\par Help him determine the minimum number of towers he must install to}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 provide cell phone service to each pasture.
\par 
\par PROBLEM NAME: tower
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N: Each line specifies a pair of adjacent pastures with two}{\insrsid10641678  }{\insrsid6623839\charrsid2631230 space-separated integers: A and B
\par 
\par SAMPLE INPUT (file tower.in):
\par 
\par 5
\par 1 3
\par 5 2
\par 4 3
\par 3 5
\par 
\par INPUT DETAILS:
\par 
\par Farmer John has 5 pastures: pastures 1 and 3 are adjacent, as are pastures}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 5 and 2, pastures 4 and 3, and pastures 3 and 5. Geometrically, the}{\insrsid7697904  }{\insrsid6623839\charrsid2631230 
farm looks like this (or some similar configuration)
\par                4  2
\par                |  |
\par             1--3--5
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer indicating the minimum number of towers to
\par         install
\par 
\par SAMPLE OUTPUT (file tower.out):
\par 
\par 2
\par 
\par OUTPUT DETAILS:
\par 
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10641678 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid10641678\charrsid10641678 The towers can be placed at pastures 2 and 3 or pastures 3 and 5.
\par 
\par This problem, known as the "minimum dominating set problem" in a tree, has a nice greedy solution. Note that the graph in the problem is indeed a tree because it has V-1 edges. We say a v
ertex is dominated by a set of vertices if it is either in the set or adjacent to a vertex in the set. The algorithm is as follows: 
\par 
\par (1)}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10641678  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid10641678\charrsid10641678 Keep track of a set of vertices S.
\par (2) Root the tree at an arbitrary node.
\par (3) Visit the vertices of the tree with a postorder traversal.
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11800919 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10641678\charrsid10641678 (4) At each vertex, if it is not dominated by S, add it and all of its neighbors to S.
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10641678 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid10641678\charrsid10641678 (5) Once the traversal is done, visit the vertices in S in the reverse order that they were added.
\par (6) At each vertex, if S is still a dominating set when the vertex is removed, then do so. 
\par 
\par The vertices left in S form a minimum dominating set. For a proof of why this works, see http://www.cs.clemson.edu/~bcdean/greedy_tree_dom.swf. 
\par 
\par Note that the running time of this algorithm is very good, O(N), si
nce each vertex is visited once in the postorder traversal and each vertex is added to S at most once. Checking whether a vertex can be removed can also be done efficiently by keeping track of how many vertices in S it is adjacent to. An implementation of
 this algorithm is shown below.}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11800919 
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid11800919 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 {\*\bkmkstart _Toc188248232}\hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 <stdio.h>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 <iostream>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 <vector>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  N, c[10100], p[10100];
\par \hich\af2\dbch\af37\loch\f2 vector <vector <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 > > E;
\par \hich\af2\dbch\af37\loch\f2 vector <}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 > B;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  traverse(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  v)
\par \{
\par \hich\af2\dbch\af37\loch\f2      }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i=0; i<E[v].size(); i++)
\par \hich\af2\dbch\af37\loch\f2          }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (p\hich\af2\dbch\af37\loch\f2 [v] != E[v][i]) 

\par \tab \tab \hich\af2\dbch\af37\loch\f2  \{ 
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2  p[E[v][i]] = v; 
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2  traverse(E[v][i]); 
\par \tab \tab \hich\af2\dbch\af37\loch\f2  \}
\par \hich\af2\dbch\af37\loch\f2      
\par \hich\af2\dbch\af37\loch\f2      }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (c[v] == 0)
\par \hich\af2\dbch\af37\loch\f2      \{
\par \hich\af2\dbch\af37\loch\f2          B.push_back(v); 
\par \tab \tab \hich\af2\dbch\af37\loch\f2  c[v]++;
\par \hich\af2\dbch\af37\loch\f2          
\par \tab \tab \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i=0; i<E[v].size(); i++)
\par \hich\af2\dbch\af37\loch\f2          \{
\par \hich\af2\dbch\af37\loch\f2              c[E[v][i]] += 2; B.push_back(E[v][i]);
\par 
\par \hich\af2\dbch\af37\loch\f2     \hich\af2\dbch\af37\loch\f2          }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  j=0; j<E[E[v][i]].size(); j++) 
\par \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2  c[E[E[v][i]][j]]++;
\par \hich\af2\dbch\af37\loch\f2          \}
\par \hich\af2\dbch\af37\loch\f2      \}
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  main()
\par \{
\par \hich\af2\dbch\af37\loch\f2     FILE* in = fopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "tower.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     FILE* out = fopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "tower.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     fscanf(in, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , &N);
\par \hich\af2\dbch\af37\loch\f2     E.resize(N);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i=0; i<\hich\af2\dbch\af37\loch\f2 N; i++) \{ p[i] = -1; c[i] = 0; \}
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  u, v;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i=0; i<N-1; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \hich\af2\dbch\af37\loch\f2         fscanf(in, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , &u, &v);
\par \hich\af2\dbch\af37\loch\f2         E[u-1].push_back(v-1);
\par \hich\af2\dbch\af37\loch\f2         E[v-1].push_back(u-1);
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     traverse(0);
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  numRemove = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 i\hich\af2\dbch\af37\loch\f2 nt}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i=B.size()-1; i>=0; i--)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  canRemove = (c[B[i]] > 1);
\par 
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  j=0; j<E[B[i]].size(); j++)
\par \hich\af2\dbch\af37\loch\f2             canRemove = canRemove && (c[E[B[i]][j]] > 1);
\par 
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (canRemove)
\par \hich\af2\dbch\af37\loch\f2         \{
\par \hich\af2\dbch\af37\loch\f2             c[B[i]]--;
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  j=0\hich\af2\dbch\af37\loch\f2 ; j<E[B[i]].size(); j++)
\par \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 c[E[B[i]][j]]--;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2         numRemove += canRemove;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     fprintf(out, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , B.size()-numRemove);
\par \}
\par 
\par }\pard\plain \s1\qc \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
Special 2007 Chinese Competition contest{\*\bkmkend _Toc188248232}
\par }\pard\plain \qj \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\b\f2\fs32\insrsid155962\charrsid2631230 

\par }\pard\plain \s2\ql \fi720\li2880\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin2880\itap0\pararsid9452502 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\ul\insrsid155962\charrsid2631230 {\*\bkmkstart _Toc188248233}GOLD PROBLEMS{\*\bkmkend _Toc188248233}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 **********************************************************************}{\insrsid9452502 *******}{\insrsid155962\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248234}Summing Sums [Neal Wu, 2007]{\*\bkmkend _Toc188248234}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par The N (1 <= N <= 50,000) cows, conveniently numbered 1..N, are}{\insrsid9452502  }{\insrsid155962\charrsid2631230 trying to learn some encryption algorithms. After studying a few}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
examples, they have decided to make one of their own! However, they}{\insrsid9452502  }{\insrsid155962\charrsid2631230 are not very experienced at this, so their algorithm is very simple:
\par 
\par Each cow i is give}{\insrsid11800919 n a starting number C}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid11800919\charrsid2631230  }{\insrsid11800919 (0 <= C}{\sub\insrsid155962\charrsid11800919 i}{\insrsid155962\charrsid2631230  < 90,000,000),}{
\insrsid9452502  }{\insrsid155962\charrsid2631230 and then all the cows perform the following process in parallel:
\par 
\par     * First, each cow finds the sum of the numbers of the other N-1
\par       cows.
\par 
\par     * After all cows are finished, each cow replaces her number
\par       with the sum she computed. To avoid very large numbers, the
\par       cows will keep track of their numbers modulo 98,765,431.
\par 
\par They told Canmuu the moose about it in November; he was quite}{\insrsid9452502  }{\insrsid155962\charrsid2631230 impressed.
\par 
\par Then one foggy Christmas Eve, Canmuu came to say:}{\insrsid9452502  }{\insrsid155962\charrsid2631230 "Your algorithm is too easy to break! You should repeat it T}{\insrsid9452502  }{\insrsid155962\charrsid2631230 (1 <= T <= 1,414,213,562) times instead."

\par 
\par Obviously, the cows were very frustrated with having to perform so}{\insrsid9452502  }{\insrsid155962\charrsid2631230 many repetitions of the same boring algorithm, so after many hours}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
of arguing, Canmuu and the cows reached a compromise: You are to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 calculate the numbers after the encryption is performed!
\par 
\par *Some extra feedback will be provided for the first 10 submissions to this}{\insrsid9452502  }{\insrsid155962\charrsid2631230 problem.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and T
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: }{\insrsid11800919 C}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid155962\charrsid2631230 
\par 
\par SAMPLE INPUT (file sumsums.in):
\par 
\par 3 4
\par 1
\par 0
\par 4
\par 
\par INPUT DETAILS:
\par 
\par Three cows, with starting numbers 1, 0, and 4; four repetitions of the}{\insrsid11800919  }{\insrsid155962\charrsid2631230 encryption algorithm.
\par 
\par OUTPUT FORMAT:
\par 
\par * Lines 1..N: Line i contains a single integer representing the number}{\insrsid11800919  }{\insrsid155962\charrsid2631230 of cow i (modulo 98,765,431) at the end of the encryption.
\par 
\par SAMPLE OUTPUT (file sumsums.out):
\par 
\par 26
\par 25
\par 29
\par 
\par OUTPUT DETAILS:
\par 
\par The following is a table of the cows' numbers for each turn:
\par 
\par           Cows' numbers
\par Turn    Cow1  Cow2  Cow3
\par  0        1     0     4
\par  1        4     5     1
\par  2        6     5     9
\par  3       14    15    11
\par  4       26    25    29
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
Let S be the sum of all the numbers at the beginning. We can construct a table of the value of each cow's numbers after each turn:
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid9452502 Turn     Cow i's number          Sum of all cows' numbers
\par 0        C}{\sub\insrsid155962\charrsid9452502 i}{\insrsid155962\charrsid9452502                       }{\insrsid11800919  }{\insrsid155962\charrsid9452502 S
\par 1        S - C}{\sub\insrsid155962\charrsid9452502 i}{\insrsid155962\charrsid9452502                   }{\insrsid11800919  }{\insrsid155962\charrsid9452502 (n - 1) * S
\par 2        (n - 2) * S + C}{\sub\insrsid155962\charrsid9452502 i}{\insrsid155962\charrsid9452502         }{\insrsid11800919  }{\insrsid155962\charrsid9452502 (n - 1)}{\super\insrsid155962\charrsid9452502 2}{\insrsid155962\charrsid9452502  * S
\par 3        (n}{\super\insrsid155962\charrsid9452502 2}{\insrsid155962\charrsid9452502  - 3n + 3) * S + C}{\sub\insrsid155962\charrsid9452502 i}{\insrsid155962\charrsid9452502   }{\insrsid11800919  }{\insrsid155962\charrsid9452502 (n - 1)}{
\super\insrsid155962\charrsid9452502 3}{\insrsid155962\charrsid9452502  * S
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
In particular, note that the coefficient of S in cow i's number on the t-th turn is (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 1}{\f2\fs20\insrsid155962\charrsid9452502  - (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 2}{
\f2\fs20\insrsid155962\charrsid9452502  + (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 3}{\f2\fs20\insrsid155962\charrsid9452502  - ... \'b1 (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 1}{\f2\fs20\insrsid155962\charrsid9452502  }{
\f36\fs20\insrsid155962\charrsid9452502 \u8723\'3f}{\f2\fs20\insrsid155962\charrsid9452502  (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 0}{\f2\fs20\insrsid155962\charrsid9452502 , and the coefficient of C}{
\f2\fs20\sub\insrsid155962\charrsid9452502 i}{\f2\fs20\insrsid155962\charrsid9452502  is (-1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t}{\f2\fs20\insrsid155962\charrsid9452502 . (Both of these statements can be proven by induction.)
\par Now, all we need to do to solve the problem is evaluate this sum (modulo 98,765,431). However, the sum can have 1 billion terms, so we need to find an ef
ficient way of doing this. Two possible methods, that can both be implemented in O(log t), are described below:
\par The first is to evaluate the sum somewhat directly. Note that (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 1}{\f2\fs20\insrsid155962\charrsid9452502  - (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 2}{
\f2\fs20\insrsid155962\charrsid9452502  + (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 3}{\f2\fs20\insrsid155962\charrsid9452502  - (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 4}{\f2\fs20\insrsid155962\charrsid9452502  + ... 
\'b1 (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 1}{\f2\fs20\insrsid155962\charrsid9452502  }{\f36\fs20\insrsid155962\charrsid9452502 \u8723\'3f}{\f2\fs20\insrsid155962\charrsid9452502  (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 0}{
\f2\fs20\insrsid155962\charrsid9452502  = (n - 2) * (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 2}{\f2\fs20\insrsid155962\charrsid9452502  + (n - 2) * (n - 1)}{\f2\fs20\super\insrsid155962\charrsid9452502 t - 4}{
\f2\fs20\insrsid155962\charrsid9452502  + ..., with two possible endings for the sum depending on whether t is even or odd. We can compute the value of the sum for values of t that are powers of two, and then combine these values to find our actual sum.

\par The second method is to find the sum using matrix powering. We note that on each turn, the coefficient of S in each cow's number is multiplied by (n - 1), and then 1 is either added to the coefficient or subtracted from it, depending on whether
 t is even or odd. In order to simulate this using matrix powering, we would like to create a 2-element vector V and a 2 x 2 matrix M such that V [0] is the coefficient of S, and V [1] is either 1 or -1. Multiplying V by the matrix M once should simulate 
one turn. In particular, we want to multiply V [0] by n - 1, and then add V [1] to it, and we want to 'flip' V [1] between 1 and -1 each time. Thus, M should be the following matrix:
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid9452502 | n - 1   0 |
\par |           |
\par |   1    -1 |
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
When V is multiplied by M, V [0]
 becomes (n - 1) * V [0] + 1 * V [1], and V [1] becomes 0 * v [0] + (-1) * V [1], which was exactly what we wanted. Thus, multiplying V by M a total of t times will suffice, but instead we can use efficient O(log t) matrix powering to do this.
\par Two solutions are presented corresponding to the two methods given above. The following is a power of two summation solution from Neal Wu:
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid11800919 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "sumsums.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "sumsums.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 in\hich\af2\dbch\af37\loch\f2 t}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  MAXN = 50005, MAXL = 35;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  MOD = 98765431;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  N, T, nums [MAXN];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  power [MAXL], ssum [MAXL];
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 // computes A^(B - 1) - A^(B - 2) + ... +/- A -/+ 1
\par \hich\af2\dbch\af37\loch\f2 // by computing (A - 1) * A^(B - 2) + ...
\par \hich\af2\dbch\af37\loch\f2 // takes O(log B) time
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  calc (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  A, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 i\hich\af2\dbch\af37\loch\f2 nt}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  B)
\par \{
\par \hich\af2\dbch\af37\loch\f2     power [0] = A % MOD;
\par \hich\af2\dbch\af37\loch\f2     ssum [0] = (A - 1) % MOD;
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 // power [i] = A^(2^i)
\par \hich\af2\dbch\af37\loch\f2 // ssum [i] = the sum of the first 2^i terms of the second sum above
\par 
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i + 1 < MAXL; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \hich\af2\dbch\af37\loch\f2 power [i + 1] = (power [i] * power [i]) % MOD;
\par \tab \hich\af2\dbch\af37\loch\f2 ssum \hich\af2\dbch\af37\loch\f2 [i + 1] = (ssum [i] * power [i + 1] + ssum [i]) % MOD;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 bool}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  odd = (B & 1);
\par \hich\af2\dbch\af37\loch\f2     B >>= 1;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  p = 1, total = 0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; (1 << i) <= B; i++)
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (B & (1 << i))
\par \tab \{
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 // combine the sums for each power of two in the binary repre\hich\af2\dbch\af37\loch\f2 sentation of B
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \tab \hich\af2\dbch\af37\loch\f2     total = (total + ssum [i] * p) % MOD;
\par \tab \hich\af2\dbch\af37\loch\f2     p = (p * power [i + 1]) % MOD;
\par \tab \}
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 // do a special case for odd B
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  (odd)
\par \tab \hich\af2\dbch\af37\loch\f2 total = (total * A + 1) % MOD;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  total;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 Void }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  main ()
\par \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , &N, &T);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  sum = 0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2     \{
\par \tab \hich\af2\dbch\af37\loch\f2 fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , nums + i);
\par \tab \hich\af2\dbch\af37\loch\f2 sum += nums [i];
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     sum %= MOD;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  add = (sum * calc (N - 1, T)) % MOD;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \tab \hich\af2\dbch\af37\loch\f2 fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , (add + (T & 1 ? -nums [i] :
\hich\af2\dbch\af37\loch\f2  nums [i]) + MOD) % MOD);
\par \}
\par 
\par \hich\af2\dbch\af37\loch\f2 The following is a matrix multiplication solution from Richard Peng:
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\par \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 <cstring>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  MAXN\tab 50000
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  M\tab 98765431
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  res[2],v[2][2],tem[2][2],t,t1;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  lis[MAXN],dif[MAXN],n;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  tot;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 vo\hich\af2\dbch\af37\loch\f2 id}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  mul(}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  a[2][2],}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  b[2][2])\{
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i,j,k;
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=0;i<2;i++)
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (j=0;j<2;j++)
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (tem[i][j]=0,k=0;k<2;k++)
\par \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 tem[i][j]=(tem[i][j]+(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 )a[i][k]*b[k][j])%M;
\par \tab \tab 
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  main()\{
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i;
\par \hich\af2\dbch\af37\loch\f2 freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "sumsums.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,stdin);
\par \hich\af2\dbch\af37\loch\f2 freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "sumsums.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,s\hich\af2\dbch\af37\loch\f2 tdout);
\par \tab \hich\af2\dbch\af37\loch\f2 scanf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&n,&t);
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=tot=0,0;i<n;i++)\{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 scanf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&lis[i]);
\par \tab \tab \hich\af2\dbch\af37\loch\f2 dif[i]=lis[i]-lis[0];
\par \tab \tab \hich\af2\dbch\af37\loch\f2 tot+=dif[i];
\par \tab \}
\par \tab \hich\af2\dbch\af37\loch\f2 memset(v,0,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (v));
\par \tab \hich\af2\dbch\af37\loch\f2 memset(res,0,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (res));
\par \tab \hich\af2\dbch\af37\loch\f2 res[0]=lis[0]%M;
\par \tab \hich\af2\dbch\af37\loch\f2 res[1]=tot%M;
\par \tab \hich\af2\dbch\af37\loch\f2 v[0][0]=(n-1)%M;
\par \tab \hich\af2\dbch\af37\loch\f2 v[0][1]=1;
\par \tab \hich\af2\dbch\af37\loch\f2 v[1][1]=-1;
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (t1=\hich\af2\dbch\af37\loch\f2 t;t1;t1/=2)\{
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (t1%2)\{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 res[0]=((}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 )res[0]*v[0][0]+(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 )res[1]*v[0][1])%M;
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 res[1]=((}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 )res[1]*v[1][1])%M;
\par \tab \tab \}
\par \tab \tab \hich\af2\dbch\af37\loch\f2 mul(v,v);
\par \tab \tab \hich\af2\dbch\af37\loch\f2 memcpy(v,tem,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (v));
\par \tab \}
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=0;i<n;i++)
\par \tab \tab \hich\af2\dbch\af37\loch\f2 printf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
,((res[0]+((t%2==0)?(dif[i]):(-dif[i])))%M+M\hich\af2\dbch\af37\loch\f2 )%M);\}
\par 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9452502\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248235}The Bovine Accordion and Banjo Orchestra [Lei Huang, 2007]{\*\bkmkend _Toc188248235}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par The 2*N (3 <= N <= 1,000) cows have assembled the Bovine Accordion}{\insrsid9452502  }{\insrsid155962\charrsid2631230 and Banjo Orchestra!  They possess various levels of skill on their}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
respective instruments: accordionist i has an associated talent}{\insrsid9452502  }{\insrsid11800919 level A}{\sub\insrsid155962\charrsid11800919 i}{\insrsid155962\charrsid2631230  (0 <= }{\insrsid11800919 A}{\sub\insrsid11800919\charrsid11800919 i}{
\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 <= 1,000); banjoist j has an associated talent}{\insrsid9452502  }{\insrsid155962\charrsid2631230 level B}{\sub\insrsid11800919\charrsid11800919 j}{\insrsid155962\charrsid2631230 (0 <= }{
\insrsid11800919\charrsid2631230 B}{\sub\insrsid11800919\charrsid11800919 j}{\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 <= 1,000).
\par 
\par The combined `awesomeness' of a pairing between cows with talents}{\insrsid9452502  }{\insrsid11800919 A}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 and }{\insrsid11800919\charrsid2631230 B}
{\sub\insrsid11800919\charrsid11800919 j}{\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 is directly proportional to the talents of each cow in}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the pair so a conce
rt with those two cows will earn FJ precisely}{\insrsid9452502  }{\insrsid11800919 A}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 * }{\insrsid11800919\charrsid2631230 B}{
\sub\insrsid11800919\charrsid11800919 j}{\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 dollars in "charitable donations".  FJ wishes to maximize}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
the sum of all revenue obtained by his cows by pairing them up in}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the most profitable way.
\par 
\par Unfortunately, FJ's accordionists are a bit stuck up and stubborn.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 If accordionist i is paired with banjoist j, then accordionists}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
i+1..N refuse to be paired with banjoists 1..j-1. This creates}{\insrsid9452502  }{\insrsid155962\charrsid2631230 restrictions on which pairs FJ can form. FJ thus realizes that in}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
order to maximize his profits, he may have to leave some cows}{\insrsid9452502  }{\insrsid155962\charrsid2631230 unpaired.
\par 
\par To make matters worse, when one or more of the musicians is skipped,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 they will be greatly upset at their wasted talent and will engage}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
in massive binge drinking to wash away their sorrows.
\par 
\par After all pairings are made, a list is constructed of the groups}{\insrsid9452502  }{\insrsid155962\charrsid2631230 of each of the consecutive skipped musicians (of either instrument).}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
Every group of one or more consecutive skipped cows will gather}{\insrsid9452502  }{\insrsid155962\charrsid2631230 together to consume kegs of ice cold orange soda in an amount}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
proportional to the square of the sum of their wasted talent.
\par 
\par Specifically, FJ has calculated that if the x-th to y-th accordionists}{\insrsid9452502  }{\insrsid155962\charrsid2631230 are skipped,}{\insrsid11800919  they will consume precisely (A}{\sub\insrsid155962\charrsid11800919 x}{\insrsid11800919  + A}{
\sub\insrsid155962\charrsid11800919 x+1}{\insrsid11800919  + A}{\sub\insrsid155962\charrsid11800919 x+2}{\insrsid155962\charrsid2631230  + ...}{\insrsid9452502  }{\insrsid11800919 + A}{\sub\insrsid11800919\charrsid11800919 y}{\insrsid11800919 )}{
\super\insrsid155962\charrsid11800919 2}{\insrsid155962\charrsid2631230  dollars worth of orange soda in the process of drinking}{\insrsid9452502  }{\insrsid155962\charrsid2631230 themselves into oblivion. An identical relationship holds for the}{
\insrsid9452502  }{\insrsid155962\charrsid2631230 banjoists. FJ realizes that he'll end up getting stuck with the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 bill for his cows' drinking, and thus takes this into account when}{\insrsid9452502  }{
\insrsid155962\charrsid2631230 choosing which pairings to make.
\par 
\par Find the maximum amount of total profit that FJ can earn after the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 contributions are collected and the orange soda is paid for.
\par 
\par Memory Limit: 64MB
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N+1: Line i+1 contains the single integer: }{\insrsid11800919 A}{\sub\insrsid11800919 i}{\insrsid155962\charrsid2631230 
\par 
\par * Lines N+2..2*N+1: Line i+N+1 contains the single integer: }{\insrsid11800919\charrsid2631230 B}{\sub\insrsid11800919 i}{\insrsid155962\charrsid2631230 
\par 
\par 
\par SAMPLE INPUT (file baabo.in):
\par 
\par 3
\par 1
\par 1
\par 5
\par 5
\par 1
\par 1
\par 
\par INPUT DETAILS:
\par 
\par There are 6 cows: 3 accordionists and 3 banjoists. The accordionists have
\par talent levels (1, 1, 5), and the banjoists have talent levels (5, 1, 1).
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer that represents the maximum amount of cash}{\insrsid11800919  }{\insrsid155962\charrsid2631230 that FJ can earn.
\par 
\par SAMPLE OUTPUT (file baabo.out):
\par 
\par 17
\par 
\par OUTPUT DETAILS:
\par 
\par FJ pairs accordionist 3 with banjoist 1 to get earn A_3 * B_1 = 5 * 5 = 25}{\insrsid9452502  }{\insrsid155962\charrsid2631230 in profit.  He loses a total of (1 + 1)^2 + (1 + 1)^2 = 8 dollars due to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
the cost of soda for his remaining cows. Thus his final (net) profit is 25
\par - 8 = 17.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
Since the pairings cannot intersect, this problem can be solved using DP with the state being the last 'pair' of accordionist and banjoist (denoted A and B}{\f2\fs20\insrsid11800919  from here on). This gives O(N}{
\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 ) states and O(}{\f2\fs20\insrsid11800919 N}{\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 
) state transitions for each state as there are O(}{\f2\fs20\insrsid11800919 N}{\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 ) possible previous pairs, the state transition function is:
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid9452502 Best(i,j)=max\{i1<i,j1<j|Best(i1,j1)-SQR(sum(A_i1...A_(i-1)))-SQR(sum(B_j1...B_(j-1)))\}+A_i*B_j
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 wher
e SQR is the square of a number.
\par This gives an O(}{\f2\fs20\insrsid11800919 N}{\f2\fs20\super\insrsid11800919 4}{\f2\fs20\insrsid155962\charrsid9452502 ) solution, which we try to optimize all the way down to O(}{\f2\fs20\insrsid11800919 N}{
\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 ). The first observation we make is we cannot skip cows in both A and B when we go from the current pair to the previous one. This because pairi
ng any two from those skipped ones will increase the total profit. So this gives an O(n^3) solution, sufficient to get 60% of the points.
\par Now we try to get down to O(}{\f2\fs20\insrsid11800919 N}{\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 ) by optimizing the state transition using convexity. We first consider the case where n
o cows in A are skipped, or when i1=i-1. So we need to find:
\par max\{j1<j|Best(i-1,j)-SQR(sum(B_j1...B_(j-1))\}+A_i*B_j
\par If we let SB denote the partial sum of the B array, then our transition formula becomes:
\par max\{j1<j|Best(i-1,j)-SQR(SB_(j-1)-SB(j1-1))\}+A_i*B_j =max\{j1<j|Best(i-1,j)-SQR(SB_(j1-1))+2*SB_(j1-1)*SB_(j-1)\}+A_i*B_j+SQR(SB_(j-1))
\par We can ignore the last two terms since they're constant depending only on i and j. If we look at the first term, we're looking for the max of a linear combination of two values depending on j1 where the ratio is dependent on j.
\par Geometrically, this is equivalent to taking the y-intercept of a line with a given slope within a set of points. With some proof, it can be shown that only points on the convex hull matters. So we can i
nsert values of (2*SB_j,Best(i-1,j)-SQR(SB_(j-1)))) into the convex hull (note SB_j is always increasing, so we can do this using a stack). And when we query, we can show the point where this value is minimized/maximized is always monotone in respect to x
. This gives an algorithm that does this in O(1) amortized cost.
\par The case where nothing in B is skipped can be dealt with similarly. The only catch is that should we process the states in incremental i and then incremental j, we'll need to keep track of N+1
 convex hulls, one for the previous 'row' and one for each of the columns.
\par This gives the desired O(}{\f2\fs20\insrsid11800919 N}{\f2\fs20\super\insrsid11800919\charrsid11800919 2}{\f2\fs20\insrsid155962\charrsid9452502 ) algorithm. 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid11800919 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
#include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 <cstring>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  MAXN 1200
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  n;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  a[MAXN],b[MAXN],bes[MAXN][MAXN],ans;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  s1[MAXN],s2[MAXN];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 doubl\hich\af2\dbch\af37\loch\f2 e}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  sqr(}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x)\{}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x*x;\}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hull[MAXN][MAXN][2];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hullt[MAXN],p[MAXN];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  initialize(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  id)\{
\par \tab \hich\af2\dbch\af37\loch\f2 hullt[id]=p[id]=0;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  crossp(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  a[2],}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  b[2],}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  c[2])\{
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (b[0]-a[0])*(c[1]-a[1])-(c[0]-a[0])*(b[1]-a[1]);
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hulladd\hich\af2\dbch\af37\loch\f2 (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  id,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  y)\{
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  point[2];
\par \tab \hich\af2\dbch\af37\loch\f2 point[0]=x;
\par \tab \hich\af2\dbch\af37\loch\f2 point[1]=y;
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ((hullt[id]>0)&&(x==hull[id][hullt[id]-1][0]))\{
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (y>hull[id][hullt[id]-1][1]) hullt[id]--;
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 else}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ;
\par \tab \}
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ((hullt[id]>1)&&(crossp(point,hull[id][hullt[id]-1],hull[id][hu
\hich\af2\dbch\af37\loch\f2 llt[id]-2])<=0))
\par \tab \tab \hich\af2\dbch\af37\loch\f2 hullt[id]--;
\par \tab \hich\af2\dbch\af37\loch\f2 hull[id][hullt[id]][0]=x;
\par \tab \hich\af2\dbch\af37\loch\f2 hull[id][hullt[id]][1]=y;
\par \tab \hich\af2\dbch\af37\loch\f2 p[id]<?=hullt[id];
\par \tab \hich\af2\dbch\af37\loch\f2 hullt[id]++;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  query(}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  id,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  a)\{
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 double}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  tem,tem1;
\par \tab \hich\af2\dbch\af37\loch\f2 tem=hull[id][p[id]][0]*a+hull[id][p[id]][1];
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ((p[id]+1<hullt[id])&&((tem1=(hu\hich\af2\dbch\af37\loch\f2 
ll[id][p[id]+1][0]*a+hull[id][p[id]+1][1]))>tem))\{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 tem=tem1;
\par \tab \tab \hich\af2\dbch\af37\loch\f2 p[id]++;
\par \tab \}
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  tem;
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  main()
\par \{
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i,j,i1,j1;
\par \tab \hich\af2\dbch\af37\loch\f2 freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "mkpairs.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,stdin);
\par \tab \hich\af2\dbch\af37\loch\f2 freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "mkpairs.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,stdout);
\par \tab \hich\af2\dbch\af37\loch\f2 scanf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&n);
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=0;i<n;i++)\tab scanf(}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%lf"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&a[i]);
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (s1[\hich\af2\dbch\af37\loch\f2 0]=a[0],i=1;i<n;i++) s1[i]=s1[i-1]+a[i];

\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=0;i<n;i++)\tab scanf(}{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%lf"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&b[i]);
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (s2[0]=b[0],i=1;i<n;i++) s2[i]=s2[i-1]+b[i];
\par 
\par \tab \hich\af2\dbch\af37\loch\f2 memset(bes,0,}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (bes));
\par 
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i=1;i<n;i++)
\par \tab \tab \hich\af2\dbch\af37\loch\f2 initialize(i);
\par \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (ans=i=0;i<n;i++)\{
\par \tab \tab \hich\af2\dbch\af37\loch\f2 initialize(0);
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (j=0;j<n;j++)\{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 bes[i][j]=-((i==0)?0:sqr(s1[i-1]))-((j==0)?0:sqr(s2[j-1]));
\par 
\par \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (i>0)\{
\par \tab \tab \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (j>0)\{
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 bes[i][j]>?=query(0,2*s2[j-1])-sqr(s2[j-1]);
\par \tab \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 bes[i][j]>?=query(j,2*s1[i-1])-sqr(s1[i-1]);
\par \tab \tab \tab \tab \}
\par \tab \tab \tab \tab \hich\af2\dbch\af37\loch\f2 hulladd(0,s2[j],bes[i-1][j]-sqr(s2[j]));
\par \tab \tab \tab \}
\par \tab \tab 
\par 
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 bes[i][\hich\af2\dbch\af37\loch\f2 j]+=a[i]*b[j];
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 ans>?=bes[i][j]-sqr(s1[n-1]-s1[i])-sqr(s2[n-1]-s2[j]);
\par \tab \tab \}
\par \tab \tab }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (j=0;j+1<n;j++)\{
\par \tab \tab \tab \hich\af2\dbch\af37\loch\f2 hulladd(j+1,s1[i],bes[i][j]-sqr(s1[i]));
\par \tab \tab \}
\par \tab \}
\par \tab \hich\af2\dbch\af37\loch\f2 printf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%0.0lf\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,ans);
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248236}Treasure [Yang Yi, 2007]{\*\bkmkend _Toc188248236}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Canmuu and his friends have recently acquired a large cache of}{\insrsid9452502  }{\insrsid155962\charrsid2631230 plutonium and have agreed to bury their newfound treasure at some}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
road intersection deep in the Canadian wilderness. Any sort of treasure}{\insrsid9452502  }{\insrsid155962\charrsid2631230 burial calls for a treasure map so they've decided to create one}{\insrsid9452502  }{\insrsid155962\charrsid2631230 of their own.

\par 
\par The road network consists of N (4 <= N <= 100,000) intersections}{\insrsid9452502  }{\insrsid155962\charrsid2631230 (conveniently numbered 1..N) with N roads connecting them. As busy}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
intersections confuse everybody, every intersection has at least}{\insrsid9452502  }{\insrsid155962\charrsid2631230 one road that leads to it, and no intersection has more than four}{\insrsid9452502  }{\insrsid155962\charrsid2631230 roads connected to 
it. Excellent maintenance has ensured that a}{\insrsid9452502  }{\insrsid155962\charrsid2631230 moose can always run either way between any pair of intersections.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
Furthermore, Canmuu has decided the plutonium should not be buried}{\insrsid9452502  }{\insrsid155962\charrsid2631230 at any of the 4-way intersections since busy traffic decreases the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 secrecy of
 the buried treasure.
\par 
\par The treasure map will contain all the roads and all the intersections.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 But, to conceal the treasure's location, only one road intersection}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
on the treasure map is to be labeled: the intersection at which the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 treasure is buried (which has a big red 'X', of course).
\par 
\par Ever the alert moose, Canmuu drew some trial maps to see what they}{\insrsid9452502  }{\insrsid155962\charrsid2631230 would look like depending on where the treasure was buried. Canmuu}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
noticed that the moose might draw similar maps even if they bury}{\insrsid9452502  }{\insrsid155962\charrsid2631230 their treasure in two different locations. Their curiosity piqued,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
the herd began trying to figure out how many distinct maps they}{\insrsid9452502  }{\insrsid155962\charrsid2631230 could end up making.
\par 
\par Maps are indistinct if it is possible to assign a mapping such that:
\par 
\par   * the X-labeled intersections on both maps correspond,
\par 
\par   * a correspondence can be created for the other intersections,
\par     such that
\par 
\par   * when the well-chosen intersection correspondence is determined,
\par     the roads that connect the intersections also correspond.
\par 
\par By way of example, consider the maps below where N = 4; the treasure}{\insrsid9452502  }{\insrsid155962\charrsid2631230 might be buried at any of four intersections:
\par 
\par         +             +             X           +
\par        /|            /|            /|          /|
\par   X---+ |       +---X |       +---+ |     +---+ |
\par        \\|            \\|            \\|          \\|
\par         +             +             +           X
\par 
\par The final two maps, however, are not distinct since one can create}{\insrsid9452502  }{\insrsid155962\charrsid2631230 a correspondence for the vertices (consider the map upside down)}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
and then the roads correspond exactly. Thus, only three maps are}{\insrsid9452502  }{\insrsid155962\charrsid2631230 distinct.
\par 
\par How many distinct maps are possible for a given set of roads?
\par 
\par TIME LIMIT: 1 second; might be increased for big test cases
\par 
\par MEMORY LIMIT: 64MB
\par 
\par *Some extra feedback will be provided for the first 10 submissions to this}{\insrsid9452502  }{\insrsid155962\charrsid2631230 problem.
\par 
\par PROBLEM NAME: treasure
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N + 1: Two space-separated integers: A and B (1 <= A <= N;
\par         1 <= B <= N), indicating that there is a road connecting
\par         intersections A and B
\par 
\par SAMPLE INPUT (file treasure.in):
\par 
\par 4
\par 1 2
\par 2 3
\par 3 1
\par 1 4
\par 
\par INPUT DETAILS:
\par 
\par Here is a drawing of the roads and the intersections.
\par 
\par                    4---1---2
\par                         \\ /
\par                          3
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer that is the number of distinct treasure
\par         maps
\par 
\par SAMPLE OUTPUT (file treasure.out):
\par 
\par 3
\par 
\par OUTPUT DETAILS:
\par 
\par The treasure can be buried at any intersection. However, burying it at}{\insrsid9452502  }{\insrsid155962\charrsid2631230 intersections 2 and 3 yields maps that are identical to each other. So the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
total number of distinct treasure maps is 3.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
To tackle this problem most effectively, we first establish that the road network described in the problem is a cycle with trees 'coming off' it. So we can root all the trees by the vertex they have on the cycle and denote nodes by 'parent' an
d children'. 
\par We essentially want to assign an 'id' to the graph surrounding each of the vertices, which is a collection of several subtrees (its children) and a graph that contains the cycle. 
\par There are two ways of doing this, either by computing hash val
ues for each subgraph or by computing 'ids' as we proceed and only hash cyclic shifts of the cycle. The first method is faster in practice and just accurate, but the second is slightly easier to code due to usage of C++ STL. 
\par Since a tree is a collection of its subtrees, we can assign 'id's to all the subtrees rooted at each vertex by proceeding at the outermost layer and proceed inwards. 
\par Then we have to distinguish between all the cyclic shifts (with reflections) of the cycles (which is how we could 'orie
nt' the cycle with respect to the tree the treasure is buried in). This can be accomplished by the standard Rabin-Karp string hash, done once clockwise and once counter clockwise. 
\par Then for each distinct tree, we can just count the trees that have distinct
 ids by going down recursively, and when we're at a node, only count its children that have distinct ids (so if two of its children have the same subtree, only count one of them). This is correct since the 'root' is now a special node (an orientation of t
he cycle). 
\par This runs in O(N) time if hashing is used and O(NlogN) if set/map is used. The test data were generated as follows: 
\par Case 1: Sample. 
\par Case 2: 3 chains with different lengths. 
\par Case 3: random tree with edge 
\par Case 4: random tree with edge 
\par Case 5: 10 trees with AAABBCCCBB pattern, N = 53, the trees are specially designed that they cover almost every simple cases. 
\par Case 6: 50 same trees. 
\par Case 7: 20 trees each with 20 nodes. 
\par Case 8: random tree with edge 
\par Case 9: Twin fibonacci trees. 
\par Case 10: A sequence repeated 7 times. 
\par Case 11: A cycle connected with a chain. 
\par Case 12: Repeated ABCACBA pattern. 
\par Case 13: Repeated AB pattern, changed one B into a special big tree. 
\par Case 14: A sequence repeated 6 times with reflection. 
\par Case 15: random tree with edge
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid11800919 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 {\*\bkmkstart _Toc188248237}
\hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 <stdio.h>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 <string.h>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  maxn 100000
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  maxh 200003
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 #define}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  maxH 1000000003LL
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  ind[maxn], next[maxn * 2], to[maxn * 2], p;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  n;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  used[maxn];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  f;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  stack[maxn], sp;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hash[maxh], hashans[maxh], hp;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hashli\hich\af2\dbch\af37\loch\f2 b[maxh][3];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  h1[maxn], h2[maxn];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hash2[maxh];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  addhash (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  *data) \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  c = 123456;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < 3; i ++)
\par \hich\af2\dbch\af37\loch\f2         c = c * 47 ^ data[i];
\par \hich\af2\dbch\af37\loch\f2     c = c * 47 % maxh;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (hash[c] != -1 && (hashlib[c][0] != data[
\hich\af2\dbch\af37\loch\f2 0] || hashlib[c][1] !=
\par \hich\af2\dbch\af37\loch\f2 data[1] || hashlib[c][2] != data[2])) \{
\par \hich\af2\dbch\af37\loch\f2         c ++;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (c == maxh)
\par \hich\af2\dbch\af37\loch\f2             c = 0;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (hash[c] == -1) \{
\par \hich\af2\dbch\af37\loch\f2         hashlib[c][0] = data[0];
\par \hich\af2\dbch\af37\loch\f2         hashlib[c][1] = data[1];
\par \hich\af2\dbch\af37\loch\f2         hashlib[c][2] = data[2];
\par \hich\af2\dbch\af37\loch\f2    \hich\af2\dbch\af37\loch\f2      hash[c] = hp ++;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  hash[c];
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  add2 (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  i) \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  c = x % maxh;
\par \hich\af2\dbch\af37\loch\f2     c = c * 47 % maxh;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (hash2[c] != -1 && hash2[c] != x) \{
\par \hich\af2\dbch\af37\loch\f2         c ++;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (c == maxh)
\par \hich\af2\dbch\af37\loch\f2             c = 0;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2   \hich\af2\dbch\af37\loch\f2   }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (hash2[c] == -1) \{

\par \hich\af2\dbch\af37\loch\f2         hash2[c] = x;
\par \hich\af2\dbch\af37\loch\f2         hash[c] = i;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  -1;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 else
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  hash[c];
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  test (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  a, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  b) \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
 (stack[i + a >= sp? i + a - sp: i + a] != stack[i\hich\af2\dbch\af37\loch\f2  + b >= sp? i
\par \hich\af2\dbch\af37\loch\f2 + b -
\par \hich\af2\dbch\af37\loch\f2 sp: i + b])
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  1;    
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  dfs2 (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  dad) \{
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  lib[3], lp = 0;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = ind[x]; i != -1; i = next[i])
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (to[i] != dad && !used[to[i]])
\par \hich\af2\dbch\af37\loch\f2             lib[lp ++] = dfs2(\hich\af2\dbch\af37\loch\f2 to[i], x);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (dad == -1)
\par \hich\af2\dbch\af37\loch\f2         lib[lp ++] = maxh - 2;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (lp < 3)
\par \hich\af2\dbch\af37\loch\f2         lib[lp ++] = maxh - 1;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < 3; i ++)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  j = 0; j < 2; j ++)
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (lib[j] > lib[j + 1])
\par \hich\af2\dbch\af37\loch\f2                 lib[j] ^= lib[j + 1] ^\hich\af2\dbch\af37\loch\f2 = lib[j] ^= lib[j + 1];
\par \hich\af2\dbch\af37\loch\f2     lp = addhash(lib);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  ans = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = 0; i < 3; i ++)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
 (lib[i] != maxh - 1 && lib[i] != maxh - 2 && (i == 0
\par \hich\af2\dbch\af37\loch\f2 || lib[i] !=
\par \hich\af2\dbch\af37\loch\f2 lib[i-1]))
\par \hich\af2\dbch\af37\loch\f2             ans += hashans[lib[i]];
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (lib[2] == maxh - 1)
\par \hich\af2\dbch\af37\loch\f2        \hich\af2\dbch\af37\loch\f2  ans ++;
\par \hich\af2\dbch\af37\loch\f2     hashans[lp] = ans;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  lp;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  dfs (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  x, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  dad) \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (f)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (used[x] != 0xFEFEFEFE) \{
\par \hich\af2\dbch\af37\loch\f2         f = 1;
\par \hich\af2\dbch\af37\loch\f2         sp = 0;
\par \hich\af2\dbch\af37\loch\f2         dad = to[dad];
\par \hich\af2\dbch\af37\loch\f2         stack[sp ++] = dad;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 while}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (dad != x) \{
\par \hich\af2\dbch\af37\loch\f2      \hich\af2\dbch\af37\loch\f2        dad = used[dad];
\par \hich\af2\dbch\af37\loch\f2             stack[sp ++] = dad;
\par \hich\af2\dbch\af37\loch\f2             \}
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     used[x] = dad == -1? -1 : to[dad];
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i = ind[x]; i != -1; i = next[i])
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i != dad)
\par \hich\af2\dbch\af37\loch\f2             dfs(to[i], i^1);
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  main () \{
\par \hich\af2\dbch\af37\loch\f2   \hich\af2\dbch\af37\loch\f2   }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  i, a, b, c;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "cowmstr.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , stdin);
\par \hich\af2\dbch\af37\loch\f2     freopen(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "cowmstr.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , stdout);
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     scanf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&n);
\par \hich\af2\dbch\af37\loch\f2     p = 0;
\par \hich\af2\dbch\af37\loch\f2     memset(ind, -1, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (ind));
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; i < n; i ++) \{
\par \hich\af2\dbch\af37\loch\f2         scanf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 ,&a,&b);
\par \hich\af2\dbch\af37\loch\f2         a --;
\par \hich\af2\dbch\af37\loch\f2         b\hich\af2\dbch\af37\loch\f2  --;
\par \hich\af2\dbch\af37\loch\f2         
\par \hich\af2\dbch\af37\loch\f2         next[p] = ind[a];
\par \hich\af2\dbch\af37\loch\f2         to[p] = b;
\par \hich\af2\dbch\af37\loch\f2         ind[a] = p ++;
\par 
\par \hich\af2\dbch\af37\loch\f2         next[p] = ind[b];
\par \hich\af2\dbch\af37\loch\f2         to[p] = a;
\par \hich\af2\dbch\af37\loch\f2         ind[b] = p ++;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     memset(used, -2, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (used));
\par \hich\af2\dbch\af37\loch\f2     f = 0;
\par \hich\af2\dbch\af37\loch\f2     sp = 0;
\par \hich\af2\dbch\af37\loch\f2     dfs(0, -1);
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     memset\hich\af2\dbch\af37\loch\f2 (used, 0, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 
(used));
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         used[stack[i]] = 1;
\par 
\par }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 /*
\par \hich\af2\dbch\af37\loch\f2     for (i = 0; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         printf("%d\\n",stack[i]);
\par \hich\af2\dbch\af37\loch\f2     fflush(stdout);
\par \hich\af2\dbch\af37\loch\f2 */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     memset(hash, -1, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (hash));
\par \hich\af2\dbch\af37\loch\f2     hp = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         stack[i] = dfs2(stack[i], -1);
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 long}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  big = 1;
\par \hich\af2\dbch\af37\loch\f2     h1[0] = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = sp - 1; i >= 0; i --) \{
\par \hich\af2\dbch\af37\loch\f2         h1[0] = (h1[0] * 147804523 + stack[i]) % maxH;
\par \hich\af2\dbch\af37\loch\f2         big = big * 147804523 % maxH;
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = sp - 1; i > 0; i --)
\par \hich\af2\dbch\af37\loch\f2         h1[i] = (h1[(i + 1) % sp] * 147804523 % maxH + stack[i] + maxH - big *
\par \hich\af2\dbch\af37\loch\f2 stack[i] % maxH) % maxH;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     h2[0] = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 1; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         h2[0] = (h2[0] * 147804523 + stack[i]) % maxH;
\par \hich\af2\dbch\af37\loch\f2     h2[0] = (h2[0] * 147804523 + stack[0]) % ma\hich\af2\dbch\af37\loch\f2 xH;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 1; i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         h2[i] = (h2[i - 1] * 147804523 % maxH + stack[i] + maxH - big *
\par \hich\af2\dbch\af37\loch\f2 stack[i] % maxH) % maxH;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     memset(hash2, -1, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 (hash2));
\par \hich\af2\dbch\af37\loch\f2     a = -1;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; a == -1 && i < sp; i ++)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  ((b = add2(h1[i], \hich\af2\dbch\af37\loch\f2 
i)) != -1)
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (test(b, i))
\par \hich\af2\dbch\af37\loch\f2                 a = i - b;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (a == -1)
\par \hich\af2\dbch\af37\loch\f2         a = sp;
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     b = 0;
\par \hich\af2\dbch\af37\loch\f2     c = 0;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; i < sp; i ++) \{
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (h1[i] == h2[i]) \{
\par \hich\af2\dbch\af37\loch\f2             b |= 1;
\par \hich\af2\dbch\af37\loch\f2             c = i;
\par \hich\af2\dbch\af37\loch\f2             \}
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (h1[\hich\af2\dbch\af37\loch\f2 
i] == h2[(i + 1) % sp] && !(b&1)) \{
\par \hich\af2\dbch\af37\loch\f2             b |= 2;
\par \hich\af2\dbch\af37\loch\f2             c = (i + 1) % sp;
\par \hich\af2\dbch\af37\loch\f2             \}
\par \hich\af2\dbch\af37\loch\f2         \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (b & 1)
\par \hich\af2\dbch\af37\loch\f2         a = a / 2 + 1;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 else
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 
\hich\af2\dbch\af37\loch\f2  (b & 2)
\par \hich\af2\dbch\af37\loch\f2             a = a / 2;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  ans = 0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2  (i = 0; i < a; i ++)
\par \hich\af2\dbch\af37\loch\f2         an\hich\af2\dbch\af37\loch\f2 s += hashans[stack[(i + c) % sp]];
\par \hich\af2\dbch\af37\loch\f2     
\par \hich\af2\dbch\af37\loch\f2     printf(}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid11800919 \hich\af2\dbch\af37\loch\f2 , ans);
\par 
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }\pard\plain \s1\qc \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
Elite 2007 December Competition contest{\*\bkmkend _Toc188248237}
\par }\pard\plain \s2\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid11800919 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9452502 
\par }\pard \s2\ql \fi720\li2160\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin2160\itap0\pararsid9452502 {\insrsid11800919 {\*\bkmkstart _Toc188248238}       }{\insrsid155962\charrsid2631230 BRONZE PROBLEMS
{\*\bkmkend _Toc188248238}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 ******************************************************}{\insrsid11800919 *******}{\insrsid155962\charrsid2631230 ****************
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248239}Bookshelf [Neal Wu, 2007]{\*\bkmkend _Toc188248239}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Farmer John recently bought a bookshelf for cow library, but the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 shelf is getting filled up quite quickly, and now the only available}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
space is at the top.
\par 
\par Each of the N cows (1 <= N <= 20,000) has some height of H}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid155962\charrsid2631230  (1 <=}{\insrsid9452502  }{\insrsid11800919\charrsid2631230 H}{\sub\insrsid11800919\charrsid11800919 i}{
\insrsid11800919\charrsid2631230  }{\insrsid155962\charrsid2631230 <= 10,000) and a total height summed across all N cows of S.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 The bookshelf has a height of B (1 <= B <= S < 2,000,000,007).
\par 
\par To reach the top of the bookshelf taller than the tallest cow, one}{\insrsid9452502  }{\insrsid155962\charrsid2631230 or more of the cows can stand on top of each other in a stack, so}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
that their total height is the sum of each of their individual}{\insrsid9452502  }{\insrsid155962\charrsid2631230 heights. This total height must be no less than the height of the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
bookshelf. Since more cows than necessary in the stack can be}{\insrsid9452502  }{\insrsid155962\charrsid2631230 dangerous, your job is to find the set of cows that produces a stack}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
of the smallest number of cows possible such that the stack can}{\insrsid9452502  }{\insrsid155962\charrsid2631230 reach the bookshelf.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and B
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: }{\insrsid11800919\charrsid2631230 H}{\sub\insrsid11800919\charrsid11800919 i}{\insrsid155962\charrsid2631230 
\par 
\par SAMPLE INPUT (file shelf.in):
\par 
\par 6 40
\par 6
\par 18
\par 11
\par 13
\par 19
\par 11
\par 
\par INPUT DETAILS:
\par 
\par Six cows; bookshelf height 40. Cow heights fall in the range 6..19.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer representing the size of the smallest set}{\insrsid11800919  }{\insrsid155962\charrsid2631230 of cows that can reach the bookshelf.
\par 
\par SAMPLE OUTPUT (file shelf.out):
\par 
\par 3
\par 
\par OUTPUT DETAILS:
\par 
\par One way to reach 40 with 3 cows is 18+11+13; many others exist
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid155962\charrsid9452502 
Note that if it is possible to reach the bookshelf with a certain set of C cows, then it must be possible with the C tallest cows. Thus, in order to determine if it is possible to reach the bookshelf with C
 cows, we must check only the C tallest cows. So we can loop over each C in increasing order, and find the first C that satisfies the conditions.
\par To do this, we must sort the numbers in non-increasing order beforehand in O(N log N) time, which can be done 
by either coding the sort yourself (using an efficient sort such as quicksort or mergesort) or by using the provided libraries. Afterward, loop over all k from 1 to N, until we find the first k that produces a large enough sum. We must be careful to accum
ulate the sum with our loop efficiently to avoid having an O(N}{\f2\fs20\super\insrsid155962\charrsid9452502 2}{\f2\fs20\insrsid155962\charrsid9452502 ) runtime.
\par With a properly-coded solution, the overall runtime will be O(N}{\f2\fs20\sub\insrsid155962\charrsid82799 log}{\f2\fs20\insrsid155962\charrsid9452502 N), as the majority of the runtime comes from the initial sort. The following is a sample solution:

\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid82799 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 #include}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2 <algorithm>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  MAXN = 20005;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  N, B;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  heights [MAXN];
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  solve () \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  sum = 0;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++) \{
\par \hich\af2\dbch\af37\loch\f2         sum \hich\af2\dbch\af37\loch\f2 += heights [i];
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (sum >= B)
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i + 1;
\par \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  -1;   }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // should not happen
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  main () \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , &N, &B);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , heights + i);
\par 
\par \hich\af2\dbch\af37\loch\f2     sort (heights, he\hich\af2\dbch\af37\loch\f2 ights + N);                   
\par \hich\af2\dbch\af37\loch\f2     reverse (heights, heights + N);
\par 
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , solve ());
\par \}
\par 
\par 
\par 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9452502 
\par }{\insrsid8718046\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248240}Bookshelf 2 [Neal Wu, 2007]{\*\bkmkend _Toc188248240}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Farmer John recently bought another bookshelf for the cow library,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 but the shelf is getting filled up quite quickly, and now the only}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
available space is at the top.
\par 
\par FJ has N cows (1 <= N <= }{\insrsid82799 20) each with some height of H}{\sub\insrsid82799\charrsid82799 i}{\insrsid155962\charrsid2631230  (1 <= }{\insrsid82799 H}{\sub\insrsid82799\charrsid82799 i}{\insrsid82799\charrsid2631230  }{
\insrsid155962\charrsid2631230 <= 1,000,000 - these are very tall cows). The bookshelf has a height}{\insrsid9452502  }{\insrsid155962\charrsid2631230 of B (1 <= B <= S, where S is the sum of the heights of all cows).
\par 
\par To reach the top of the bookshelf, one or more of the cows can stand}{\insrsid9452502  }{\insrsid155962\charrsid2631230 on top of each other in a stack, so that their total height is the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
sum of each of their individual heights. This total height must be}{\insrsid9452502  }{\insrsid155962\charrsid2631230 no less than the height of the bookshelf in order for the cows to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 reach the top.

\par 
\par Since a taller stack of cows than necessary can be dangerous, your}{\insrsid9452502  }{\insrsid155962\charrsid2631230 job is to find the set of cows that produces a stack of the smallest}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
height possible such that the stack can reach the bookshelf. Your}{\insrsid9452502  }{\insrsid155962\charrsid2631230 program should print the minimal 'excess' height between the optimal}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
stack of cows and the bookshelf.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and B
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: }{\insrsid82799 H}{\sub\insrsid82799\charrsid82799 i}{\insrsid155962\charrsid2631230 
\par 
\par SAMPLE INPUT (file shelf2.in):
\par 
\par 5 16
\par 3
\par 1
\par 3
\par 5
\par 6
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer representing the (non-negative) difference between the total height of the optimal set of cows and the  height of the shelf.
\par 
\par SAMPLE OUTPUT (file shelf2.out):
\par 
\par 1
\par 
\par OUTPUT DETAILS:
\par 
\par Here we use cows 1, 3, 4, and 5, for a total height of 3 + 3 + 5 + 6 = 17.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 It is not possible to obtain a total height of 16, so the answer is 1.
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 To solve this problem, we simply need to look at the sums of all 2}{\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 N}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502  subsets of the numbers. (This is possible since N <= 20, and so there are at most a
round one million such subsets.) There are several methods of doing this, but two fairly simple methods are the following:
\par The first method is to iterate over all binary numbers from 0 to 2}{\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 N}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
 - 1, inclusive. In each binary number, we can imagine it as having exactly N bits (similar to base 10 'digits'). A '1' in bit number i means that we should use cow i, while a '0' means that we should not. Thus, each binary number from 0 to 2}{
\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 N}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502  - 1 represents a subset of the N cows, and in fact they represent every subset
. This approach gives us a runtime of O(N 2}{\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 N}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 ).
\par The second method is to use recursion to generate every sum. For each cow, we have two possibilities: we either use the cow or we don't. This gives us a fairly simple solution that is O(2}{
\fs20\super\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 N}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 ) with a medium overhead of function calls.
\par Both the bitmask and the recursive solutions are presented:
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid82799 {\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf2.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf2.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  INF = 1000000000;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  MAXN = 25;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  \hich\af2\dbch\af37\loch\f2 N, B;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  heights [MAXN];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  sum, best = INF;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  main () \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , &N, &B);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , heights + i);
\par 
\par \hich\af2\dbch\af37\loch\f2    }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // iterate over every bitmask
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  mask = 0; mask < (1 << N); mask++) \{
\par \hich\af2\dbch\af37\loch\f2         sum = 0;
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // calculate the sum of the subset
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2             }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (mask & (1 << i))           }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // is bit number i set?
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2                 sum += heights [i];
\par 
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (sum >= B && sum < best)
\par \hich\af2\dbch\af37\loch\f2             best = s\hich\af2\dbch\af37\loch\f2 um;
\par \hich\af2\dbch\af37\loch\f2     \}
\par 
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , best - B);
\par 
\par 
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2 <cstdio>
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 using}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
namespace}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  std;
\par 
\par \hich\af2\dbch\af37\loch\f2 FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf2.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2 FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "shelf2.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  INF = 1000000000;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 const}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  MAXN = 25;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  N, B;
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  heights [MAXN];
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  best = INF;
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  solve (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  num, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{
\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  sum) \{
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // update our best value
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 (sum >= B && sum < best)
\par \hich\af2\dbch\af37\loch\f2         best = sum;
\par 
\par \hich\af2\dbch\af37\loch\f2    }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // either we are finished or our current sum is worse than the best so far
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 (num == N || sum >= best)
\par \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 ;
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 // two options - use the next number or not
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2     solve (num + 1, sum + heights [num]);
\par \hich\af2\dbch\af37\loch\f2     solve (num + 1, sum);
\par \}
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 void}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  main () 
\par \{
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , &N, &B);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  i = 0; i < N; i++)
\par \hich\af2\dbch\af37\loch\f2         fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , heights + i);
\par \hich\af2\dbch\af37\loch\f2     solve (0,\hich\af2\dbch\af37\loch\f2  0);
\par \hich\af2\dbch\af37\loch\f2     fprintf (fout, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , best - B);
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248241}Card Stacking [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248241}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Bessie is playing a card game with her N-1 (2 <= N <= 100) cow}{\insrsid9452502  }{\insrsid155962\charrsid2631230 friends using a deck with K (N <= K <= 100,000; K is a multiple of}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
N) cards.  The deck contains M = K/N "good" cards and K-M "bad"}{\insrsid9452502  }{\insrsid155962\charrsid2631230 cards. Bessie is the dealer and, naturally, wants to deal herself}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
all of the "good" cards. She loves winning.
\par 
\par Her friends suspect that she will cheat, though, so they devise a}{\insrsid9452502  }{\insrsid155962\charrsid2631230 dealing system in an attempt to prevent Bessie from cheating. They}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
tell her to deal as follows:
\par 
\par    1. Start by dealing the card on the top of the deck to the cow
\par       to her right
\par 
\par    2. Every time she deals a card, she must place the next P (1 <=
\par       P <= 10) cards on the bottom of the deck; and
\par 
\par    3. Continue dealing in this manner to each player sequentially
\par       in a counterclockwise manner
\par 
\par Bessie, desperate to win, asks you to help her figure out where she}{\insrsid9452502  }{\insrsid155962\charrsid2631230 should put the "good" cards so that she gets all of them. Notationally,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
the top card is card #1, next card is #2, and so on.
\par 
\par PROBLEM NAME: cheat
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Three space-separated integers: N, K, and P
\par 
\par SAMPLE INPUT (file cheat.in):
\par 
\par 3 9 2
\par 
\par INPUT DETAILS:
\par 
\par Bessie is playing cards with two cow friends and a deck of 9 cards.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 She must place two cards on the bottom of the deck each time she}{\insrsid9452502  }{\insrsid155962\charrsid2631230 deals one.
\par 
\par OUTPUT FORMAT:
\par 
\par * Lines 1..M: Positions from top in ascending order in which Bessie
\par         should place "good" cards, such that when dealt, Bessie will
\par         obtain all good cards.
\par 
\par SAMPLE OUTPUT (file cheat.out):
\par 
\par 3
\par 7
\par 8
\par 
\par OUTPUT DETAILS:
\par 
\par Bessie should put the "good" cards in positions 3, 7, and 8. The}{\insrsid9452502  }{\insrsid155962\charrsid2631230 cards will be dealt as follows; the card numbers are "position in}{\insrsid9452502  }{\insrsid155962\charrsid2631230 original deck":
\par                                       Card Deck         P1      P2    Bessie
\par  Initial configuration           1 2 3 4 5 6 7 8 9  - - -   - - -   - - -
\par  Deal top card [1] to Player 1   2 3 4 5 6 7 8 9    1 - -   - - -   - - -
\par  Top card to bottom (#1 of 2)    3 4 5 6 7 8 9 2    1 - -   - - -   - - -
\par  Top card to bottom (#2 of 2)    4 5 6 7 8 9 2 3    1 - -   - - -   - - -
\par  Deal top card [4] to Player 2   5 6 7 8 9 2 3      1 - -   4 - -   - - -
\par  Top card to bottom (#1 of 2)    6 7 8 9 2 3 5      1 - -   4 - -   - - -
\par  Top card to bottom (#2 of 2)    7 8 9 2 3 5 6      1 - -   4 - -   - - -
\par  Deal top card [7] to Bessie     8 9 2 3 5 6        1 - -   4 - -   7 - -
\par  Top card to bottom (#1 of 2)    9 2 3 5 6 8        1 - -   4 - -   7 - -
\par  Top card to bottom (#2 of 2)    2 3 5 6 8 9        1 - -   4 - -   7 - -
\par  Deal top card [2] to Player 1   3 5 6 8 9          1 2 -   4 - -   7 - -
\par  Top card to bottom (#1 of 2)    5 6 8 9 3          1 2 -   4 - -   7 - -
\par  Top card to bottom (#2 of 2)    6 8 9 3 5          1 2 -   4 - -   7 - -
\par  Deal top card [6] to Player 2   8 9 3 5            1 2 -   4 6 -   7 - -
\par  Top card to bottom (#1 of 2)    9 3 5 8            1 2 -   4 6 -   7 - -
\par  Top card to bottom (#2 of 2)    3 5 8 9            1 2 -   4 6 -   7 - -
\par  Deal top card [3] to Bessie     5 8 9              1 2 -   4 6 -   7 3 -
\par  Top card to bottom (#1 of 2)    8 9 5              1 2 -   4 6 -   7 3 -
\par  Top card to bottom (#2 of 2)    9 5 8              1 2 -   4 6 -   7 3 -
\par  Deal top card [9] to Player 1   5 8                1 2 9   4 6 -   7 3 -
\par  Top card to bottom (#1 of 2)    8 5                1 2 9   4 6 -   7 3 -
\par  Top card to bottom (#2 of 2)    5 8                1 2 9   4 6 -   7 3 -
\par  Deal top card [5] to Player 2   8                  1 2 9   4 6 5   7 3 -
\par  Top card to bottom (#1 of 2)    8                  1 2 9   4 6 5   7 3 -
\par  Top card to bottom (#1 of 2)    8                  1 2 9   4 6 5   7 3 -
\par  Deal top card [8] to Bessie     -                  1 2 9   4 6 5   7 3 8
\par 
\par Bessie will end up with the "good cards" that have been placed in
\par positions 3, 7, and 8 in the original deck.
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 This problem is one of data structure manipulation. The explicit example in the directions shows everything one needs to solve the task: 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li720\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx720\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin720\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Read the parameters 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Set up a 'dummy' deck so you can see where the cards end up 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Deal out the cards according to the procedure (making special note when Betsy's cards go by) 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Sort Betsy's positions 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Output Betsy's positions 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
The simplest brute force approach is simple until it comes time to "put the top card on the bottom". One can implement this in a few ways: 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li720\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx720\aspalpha\aspnum\faauto\ls3\adjustright\rin0\lin720\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 sa
ve the top card, move all the cards 'up' one slot in an array, set the bottom card to the saved top card 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}a linked list: remove the head element and place it on the end 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}an oversized array that is large enough to accommodate a large number of cards-moved-t
o-bottom; keep an index of the 'decktop' and 'deckbottom'. Moving a card to the bottom just increments decktop and deckbottom while copying the first card to the bottom. 
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 My solution (below) uses the third method since it's pretty darn simple to implement: }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid82799 {\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 #include}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2 <stdio.h>
\par 
\par }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  cmp (}{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  *a, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 
\hich\af2\dbch\af37\loch\f2  *b) \{ }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 return}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  *a - *b; \}
\par 
\par \hich\af2\dbch\af37\loch\f2 main () \{
\par \hich\af2\dbch\af37\loch\f2     FILE *fin = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "cheat.in"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "r"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     FILE *fout = fopen (}{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "cheat.out"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "w"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 );
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  n, k, p, i, j;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 deck[100000 * 11], decktop, deckbottom, betsy[100000], nbetsy;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  player;
\par \hich\af2\dbch\af37\loch\f2     fscanf (fin, }{\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d %d %d"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , &n, &k, &p);
\par 
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (i = 0; i < k; i++) deck[i] = i;
\par \hich\af2\dbch\af37\loch\f2     player = decktop = 0;
\par \hich\af2\dbch\af37\loch\f2     deckbottom = k-1;
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (i = 0; i < k; i++) \{        }{
\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 /* k cards to be dealt */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 /*printf ("deal %d to player %d\\n", \hich\af2\dbch\af37\loch\f2 
deck[decktop]+1, player);*/
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 if}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 (player == n-1) betsy[nbetsy++] = deck[decktop]+1;
\par \hich\af2\dbch\af37\loch\f2         player = (player + 1) % n;
\par \hich\af2\dbch\af37\loch\f2         decktop++;              }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 /* that card is gone */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2         }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 
 (j = 0; j < p; j++)
\par \hich\af2\dbch\af37\loch\f2             deck[++deckbottom] = deck[deckt\hich\af2\dbch\af37\loch\f2 op++];   }{\f2\fs20\cf11\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 /* card to bottom */
\par }{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2     \}
\par \hich\af2\dbch\af37\loch\f2     qsort(betsy, k/n, }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 sizeof}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (}{
\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 int}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 ), cmp);
\par \hich\af2\dbch\af37\loch\f2     }{\f2\fs20\cf2\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 for}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2  (i = 0; i < k/n; i++) fprintf (fout, }{
\f2\fs20\cf13\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 "%d\\n"}{\f2\fs20\lang1024\langfe1024\noproof\insrsid82799 \hich\af2\dbch\af37\loch\f2 , betsy[i]);
\par \hich\af2\dbch\af37\loch\f2     exit (0);
\par \}
\par 
\par 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par }\pard\plain \s2\ql \fi720\li2160\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin2160\itap0\pararsid9452502 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid82799       }{
\insrsid155962\charrsid2631230    {\*\bkmkstart _Toc188248242}SILVER PROBLEMS{\*\bkmkend _Toc188248242}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 **********************************************************************}{\insrsid8718046 *******}{\insrsid155962\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248243}Charm Bracelet [Kolstad/Cox, 2006]{\*\bkmkend _Toc188248243}
\par }{\f2\insrsid155962\charrsid2631230 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 Bessie has gone to the mall's jewelry store and spies a charm}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
bracelet. Of course, she'd like to fill it with the best charms}{\insrsid9452502  }{\insrsid155962\charrsid2631230 possible from the N (1 <= N <= 3,402) available charms. Each charm}{\insrsid9452502  }{\insrsid155962\charrsid2631230 i in the supplied 
list has a weight W}{\sub\insrsid8718046\charrsid8718046 i}{\insrsid155962\charrsid2631230  (1 <= W}{\sub\insrsid8718046\charrsid8718046 i}{\insrsid155962\charrsid2631230  <= 400), a}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
'desirability' factor D}{\sub\insrsid8718046\charrsid8718046 i}{\insrsid155962\charrsid2631230  (1 <= D}{\sub\insrsid8718046\charrsid8718046 i}{\insrsid155962\charrsid2631230  <= 100), and can be used at}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
most once.  Bessie can only support a charm bracelet whose weight}{\insrsid9452502  }{\insrsid155962\charrsid2631230 is no more than M (1 <= M <= 12,880).
\par 
\par Given that weight limit as a constraint and a list of the charms}{\insrsid9452502  }{\insrsid155962\charrsid2631230 with their weights and desirability rating, deduce the maximum}{\insrsid9452502  }{\insrsid155962\charrsid2631230 possible sum of ratings.

\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and M
\par 
\par * Lines 2}{\insrsid8857118\charrsid2631230 ...N}{\insrsid155962\charrsid2631230 +1: Line i+1 describes charm i with two space-separated}{\insrsid8857118  }{\insrsid155962\charrsid2631230 integers: }{\insrsid8857118\charrsid2631230 W}{
\sub\insrsid8857118\charrsid8718046 i}{\insrsid8857118\charrsid2631230  }{\insrsid155962\charrsid2631230 and }{\insrsid8857118\charrsid2631230 D}{\sub\insrsid8857118\charrsid8718046 i}{\insrsid155962\charrsid2631230 
\par 
\par SAMPLE INPUT (file charm.in):
\par 
\par 4 6
\par 1 4
\par 2 6
\par 3 12
\par 2 7
\par 
\par INPUT DETAILS:
\par 
\par Four potential charms; maximum weight 6
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer that is the greatest sum of charm}{\insrsid9452502  }{\insrsid155962\charrsid2631230         desirabilities that can be achieved given the weight}{\insrsid9452502  }{\insrsid155962\charrsid2631230 constraints
\par 
\par SAMPLE OUTPUT (file charm.out):
\par 
\par 23
\par 
\par OUTPUT DETAILS:
\par 
\par Without the second possible charm, the 4+12+7=23 is the highest}{\insrsid9452502  }{\insrsid155962\charrsid2631230 value for weight 1+2+3 <= 6
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 This is one of the classic "knapsack" problems: 'Items' with a 'value' and 'size' can be stuffed an
 integer number of times into a container of some limited size with the goal of maximizing the value of the items inserted. 
\par The classic solution pivots on a list of the best possible value that can be obtained for the set of items so far seen. The array's subscript is 'size'; it's value is "the best value that can be obtained for the items so far processed. 
\par Initially, of course, the array's values are all zero. Adding the first element is easy: bestvalue[itemweight] = itemvalue. 
\par Subsequent items are proc
essed one-by-one as follows. The item's weight and value are (experimentally) added to each of the *existing* weight/value pairs in the bestvalue array (including the 0/0 element). If the new weight/value pair is better, it replaces the old weight value. 

\par By way of example, consider the four items from the problem description: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 1 4
\par 2 6
\par 3 12
\par 2 7
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 The maximum allowed weight is 6, so 6+1 elements are needed in the 'bestvalue' array: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502    0   0   0   0   0   0   0   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 The first element (weight 1, value 4) is easy to insert: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502    0   4   0   0   0   0   0   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 The second element (weight 2, value 6) requires two additi
ons. For purposes of explanation, we will first add it to the 0/0 element: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502    V-------V
\par    0   4  *6*  0   0   0   0   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 and then to the weight=1 element, which currently has value 4: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502        V-------V
\par    0   4   6 *10*  0   0   0   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\b\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Important point:}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 It is now clear that we can run into trouble if, for instance, our weight was 1. In that case, we'd be modif
ying sequential elements -- elements whose new value should be based on the original 'best' matrix value and not the newly increased values. Thus, }{\b\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
we must either make a new (properly copied) best matrix so modifications are made properly OR we must modify the 'best' matrix from the larger elements to smaller}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502  
\par The third element (weight 3, value 12) requires }{\b\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 four}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
 additions (to weights 0, 1, 2, and 3). We will start at weight 3 and proceed 'backwards': 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502                V-----------V
\par    0   4   6  10   0   0 *22*  <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par 
\par            V-----------V
\par    0   4   6  10   0 *12* 22   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par 
\par        V-----------V
\par    0   4   6  10 *16* 12  22   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 In the final case, we will }{
\b\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 overwrite}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502  a now inferior 'best value' element: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502    V-----------V
\par    0   4   6 *12* 16  12  22   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
The fourth and final element (weight 2, value 7) will require potential augmentation of all 7 of the best values since all slots are now occupied. Working backwards: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502                            V-------V
\par    0   4   6  12  16  12  22   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 No modifications since the aggregate weight is too large. Likewise: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502                        V-------V
\par    0   4   6  12  16  12  22   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
Regular calculations and potential modifications then commence. The 6th item is overwritten since 16+7 > 22 (and so on): 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502                    V-------V
\par    0   4   6  12  16  12 *23*  <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par 
\par                V-------V
\par    0   4   6  12  16 *19* 23   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 For weight 2 + 2, the new value 6+7=13 is less than the current best 
value of 16, so no modification occurs: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502            V-------V
\par    0   4   6  12  16  19  23   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Likewise for weight 1 + 2 no modificastion occurs since 4+7=11 < 12: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502        V-------V
\par    0   4   6  12  16  19  23   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 The final weight 0+2 has a new best value: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502    V-------V
\par    0   4  *7* 12  16  19  23   <-- best value
\par    0   1   2   3   4   5   6   <-- for this weight (subscript)
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 
Having now processed all the input, the 'best value' array is complete. In this case element bestvalue[6]=23 is the largest of all the values. One can well imagine this would not be the case if, e.g., an item with weight 5 and value 1,
000 existed. That might make the largest value appear in some slot other than the final one (i.e., if the other weights were all > 1). Thus we scan the best value array to find the largest element, which is the highest possible value that can be created w
ithin the size/weight constraints. 
\par I coded this task using two arrays and inefficient copy operators: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid2631230 #include <stdio.h>
\par 
\par #define MAX 12880
\par int best[MAX+1], newbest[MAX+1], nb;
\par 
\par main () \{
\par     FILE *fin = fopen ("charm.in", "r");
\par     FILE *fout = fopen ("charm.out", "w");
\par     int n, m, w, d, i, j, biggest;
\par 
\par     fscanf (fin, "%d %d", &n, &m);
\par     bzero (best, (m+1)*sizeof(int));
\par     bzero (newbest, (m+1)*sizeof(int));
\par     for (i = 0; i < n; i++) \{
\par \tab fscanf (fin, "%d %d", &w, &d);
\par \tab for (j = 0; j <= m; j++) \{
\par \tab     if (j != 0 && best[j] == 0 || j+w > m) continue;
\par \tab     nb = best[j] + d;
\par \tab     if (nb > newbest[j+w]) newbest[j+w] = nb;
\par \tab \}
\par \tab bcopy (newbest, best, (m+1)*sizeof(int));
\par \tab /*for (j = 0; j <= m; j++) printf("%2d ", best[j]);
\par \tab   printf (" -- %d %d\\n", w, d);  /* debug */
\par     \}
\par     biggest = best[0];
\par     for (j = 1; j <= m; j++) 
\par \tab if (best[j] > biggest) biggest = best[j];
\par     fprintf (fout, "%d\\n", biggest);
\par     exit (0);
\par \}}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9452502\charrsid2631230 
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Richard Peng, who has coded tasks like this many times, has evolved a more sophisticated
 solution that requires but one array (processed in reverse order) and uses the cool '>?=' operator for replacing 'improved' elements. Note that his loops are generally 'correct by construction' -- no need to check for out-of-bounds indices since the loop
s are properly constrained. Of course his solution is also just about as fast as we know how to solve a task like this: }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9452502\charrsid9452502 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid2631230 #include <cstdio>
\par #include <cstring>
\par 
\par int bes[12880], n, m, a, b, i, j;
\par 
\par int main () \{
\par     freopen ("charm.in", "r", stdin);
\par     freopen ("charm.out", "w", stdout);
\par     scanf ("%d%d", &n, &m);
\par     memset (bes, 0, sizeof (bes));
\par     for (i=0; i<n; i++)\{
\par \tab scanf ("%d%d", &a, &b);
\par \tab for (j=m; j>=a; j--)
\par \tab     bes[j]>?=bes[j-a]+b;
\par     \}
\par     printf ("%d\\n", bes[m]);
\par     return 0;
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248244}Building }{\insrsid8857118\charrsid2631230 Roads [}{\insrsid155962\charrsid2631230 Richard Ho, 2007]{\*\bkmkend _Toc188248244}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Farmer John had just acquired several new farms! He wants to connect}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the farms with roads so that he can travel from any farm to any}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
other farm via a sequence of roads; roads already connect some of}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the farms.
\par 
\par Each of the N (1 <= N <= 1,000) farms (conveniently numbered 1}{\insrsid8857118\charrsid2631230 ...N}{\insrsid155962\charrsid2631230 )}{\insrsid9452502  }{\insrsid155962\charrsid2631230 is represented by a position (X_i, Y_i) on the plane (0 <= X_i <=}{
\insrsid9452502  }{\insrsid155962\charrsid2631230 1,000,000; 0 <= Y_i <= 1,000,000).  Given the preexisting M roads}{\insrsid9452502  }{\insrsid155962\charrsid2631230 (1 <= M <= 1,000) as pairs of connected farms, help Farmer John}{\insrsid9452502  }{
\insrsid155962\charrsid2631230 determine the smallest length of additional roads he must build to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 connect all his farms.
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\insrsid155962\charrsid2631230 

\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and M
\par 
\par * Lines 2..N+1: Two space-separated integers: X_i and Y_i
\par 
\par * Lines N+2..N+M+2: Two space-separated integers: i and j, indicating}{\insrsid9452502  }{\insrsid155962\charrsid2631230         that there is already a road connecting the farm i and farm j.
\par 
\par SAMPLE INPUT (file roads.in):
\par 
\par 4 1
\par 1 1
\par 3 1
\par 2 3
\par 4 3
\par 1 4
\par 
\par INPUT DETAILS:
\par 
\par Four farms at locations (1,1), (3,1), (2,3), and (4,3). Farms 1 and 4 are}{\insrsid9452502  }{\insrsid155962\charrsid2631230 connected by a road.
\par 
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\insrsid155962\charrsid2631230 OU
TPUT FORMAT:
\par 
\par * Line 1: Smallest length of additional roads required to connect all}{\insrsid9452502  }{\insrsid155962\charrsid2631230         farms, printed without rounding to two decimal places. Be sure}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
to calculate distances as 64-bit floating point numbers.}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
\par SAMPLE OUTPUT (file roads.out):
\par 
\par 4.00
\par 
\par OUTPUT DETAILS:
\par 
\par Connect farms 1 and 2 with a road that is 2.00 units long, then connect}{\insrsid9452502  }{\insrsid155962\charrsid2631230 farms 3 and 4 with a road that is 2.00 units long. This is the best we can}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
do, and gives us a total of 4.00 unit lengths.
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 We note that since all edges have non-negative w
eights, there will not be a cycle in the final version of the graph. Thus, this problem is equivalent to finding the minimum spanning tree in a graph where the edge weights are the Euclidean distances (with the exception of a few whose distances are set t
o zero). 
\par Several minimum spanning tree algorithms can be use here. Since we're finding the MST of a dense graph, the best option is probably the O(n^2) version of the Prim algorithm: 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li720\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx720\aspalpha\aspnum\faauto\ls4\adjustright\rin0\lin720\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Start with the tree being a single vertex 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Keep a list of distances of every other vertex to the tree 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid155962\charrsid9452502 \loch\af3\dbch\af0\hich\f3 \'b7\tab}At each iteration 
\par {\listtext\pard\plain\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 \hich\af2\dbch\af0\loch\f2 o\tab}}\pard \qj \fi-360\li1440\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx1440\aspalpha\aspnum\faauto\ls4\ilvl1\adjustright\rin0\lin1440\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 Add the closest vertex to the tree 
\par {\listtext\pard\plain\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 \hich\af2\dbch\af0\loch\f2 o\tab}Update the distances accordingly. 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid9452502 This runs in O(n^2) time, which suffices for this problem. 

\par By the way: This problem can actually be done in O(nlogn+m) time. The idea 
is basically the edges that could potentially be in the minimum spanning tree must belong to what's known as the Delaunay triangulation, which has O(n) edges. We can find the Delaunary triangulation in O(nlogn) time and apply a fast version of Kruskal's a
lgorithm for sparse graphs to get the desired runtime. 
\par Below is Chinese sophomore ShiMen Xu's compact solution (which might or might not match the description above): 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid155962\charrsid2631230 #include <iostream>
\par #include <fstream>
\par #include <cmath>
\par using namespace std;
\par 
\par ifstream fin ("roads.in");
\par 
\par struct Tpoint \{
\par     long long x, y;
\par \};
\par Tpoint\tab p[1010];
\par double\tab dis[1010];
\par int\tab N, M;
\par 
\par int\tab us  [1010];
\par double\tab ans;
\par 
\par void\tab init ();
\par int\tab findRoot (int i);
\par void\tab work ();
\par 
\par int main () \{
\par     FILE   *f = fopen ("roads.out", "w");
\par     init ();
\par     work ();
\par     fprintf (f, "%0.2lf\\n", ans);
\par     return 0;
\par \}
\par 
\par int findRoot (int i) \{
\par     if (us[i] == i)
\par \tab return i;
\par     return us[i] = findRoot (us[i]);
\par \}
\par 
\par void init () \{
\par     fin >> N >> M;
\par     for (int i = 1; i <= N; i++)
\par \tab fin >> p[i].x >> p[i].y;
\par 
\par     for (int i = 0; i <= N; i++)
\par \tab us[i] = i;
\par 
\par     for (int i = 0; i < M; i++) \{
\par \tab int\tab a  , b, a1, b1;
\par \tab fin >> a >> b;
\par \tab if ((a1 = findRoot (a)) != (b1 = findRoot (b)))
\par \tab     us[a1] = b1;
\par     \}
\par \}
\par 
\par void work () \{
\par     int\tab     root, cnt[1010], id;
\par 
\par     root = findRoot (1);
\par     memset (cnt, 0, sizeof (cnt));
\par     for (int i = 0; i <= N; i++)
\par \tab dis[i] = 10000000.0 * 1000000.0;
\par     for (id = 1;; id++) \{
\par \tab for (int i = 1; i <= N; i++)
\par \tab     if (cnt[i] == 0)
\par \tab \tab if (root == findRoot (i))
\par \tab \tab     cnt[i] = id;
\par \tab double\tab mindis = dis[0];
\par \tab int\tab minj = 0;
\par 
\par \tab for (int i = 1; i <= N; i++)
\par \tab     if (cnt[i] == id)
\par \tab \tab for (int j = 2; j <= N; j++)
\par \tab \tab     if (cnt[j] == 0) \{
\par \tab \tab \tab double\tab d1 = sqrt ((p[j].x - p[i].x) * (p[j].x - p[i].x) +
\par                                               (p[j].y - p[i].y) * (p[j].y - p[i].y));
\par \tab \tab \tab dis[j] <? = d1;
\par \tab \tab \tab if (dis[j] < mindis) \{
\par \tab \tab \tab     mindis = dis[j];
\par \tab \tab \tab     minj = j;
\par \tab \tab \tab \}
\par \tab \tab     \}
\par \tab if (minj == 0)
\par \tab     break;
\par \tab int\tab j1 = findRoot (minj);
\par \tab ans += mindis;
\par \tab us[j1] = root;
\par     \}
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9452502 
\par }{\insrsid9452502\charrsid2631230 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
{\*\bkmkstart _Toc188248245}Mud Puddles [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248245}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid155962\charrsid2631230 
\par Farmer John is leaving his house promptly at 6 AM for his daily}{\insrsid9452502  }{\insrsid155962\charrsid2631230 milking of Bessie. However, the previous evening saw a heavy rain,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
and the fields are quite muddy. FJ starts at the point (0, 0) in}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the coordinate plane and heads toward Bessie who is located at (X,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 Y) (-
500 <= X <= 500; -500 <= Y <= 500). He can see all N (1 <= N}{\insrsid9452502  }{\insrsid155962\charrsid2631230 <= 10,000) puddles of mud, located at points (A_i, B_i) (-500 <= A_i}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
<= 500; -500 <= B_i <= 500) on the field. Each puddle occupies only}{\insrsid9452502  }{\insrsid155962\charrsid2631230 the point it is on.
\par 
\par Having just bought new boots, Farmer John absolutely does not want}{\insrsid9452502  }{\insrsid155962\charrsid2631230 to dirty them by stepping in a puddle, but he also wants to get to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
Bessie as quickly as possible. He's already late because he had to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 count all the puddles. If Farmer John can only travel parallel to}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
the axes and turn at points with integer coordinates, what is the}{\insrsid9452502  }{\insrsid155962\charrsid2631230 shortest distance he must travel to reach Bessie and keep his boots}{\insrsid9452502  }{\insrsid155962\charrsid2631230 
clean? There will always be a path without mud that Farmer John can}{\insrsid9452502  }{\insrsid155962\charrsid2631230 take to reach Bessie.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Three space-separate integers: X, Y, and N.
\par 
\par * Lines 2}{\insrsid8857118\charrsid2631230 ...N}{\insrsid155962\charrsid2631230 +1: Line i+1 contains two space-separated integers: A_i}{\insrsid9452502  }{\insrsid155962\charrsid2631230         and B_i
\par 
\par SAMPLE INPUT (file mud.in):
\par 
\par 1 2 7
\par 0 2
\par -1 3
\par 3 1
\par 1 1
\par 4 2
\par -1 1
\par 2 2
\par 
\par INPUT DETAILS:
\par 
\par Bessie is at (1, 2). Farmer John sees 7 mud puddles, located at (0,}{\insrsid9452502  }{\insrsid155962\charrsid2631230 2); (-1, 3); (3, 1); (1, 1); (4, 2); (-1, 1) and (2, 2). Pictorially:
\par 
\par    4 . . . . . . . . 
\par    3 . M . . . . . . 
\par Y  2 . . M B M . M . 
\par    1 . M . M . M . . 
\par    0 . . * . . . . . 
\par   -1 . . . . . . . . 
\par     -2-1 0 1 2 3 4 5 
\par            X
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The minimum distance that Farmer John has to travel to reach
\par         Bessie without stepping in mud.
\par 
\par SAMPLE OUTPUT (file mud.out):
\par 
\par 11
\par 
\par OUTPUT DETAILS:
\par 
\par The best path for Farmer John is (0, 0); (-1, 0); (-2, 0); (-2, 1);
\par (-2, 2); (-2, 3); (-2, 4); (-1, 4); (0, 4); (0, 3); (1, 3); and (1,
\par 2), finally reaching Bessie.
\par 
\par    4 ******* . . . . 
\par    3 * M . * . . . . 
\par Y  2 * . M B M . M . 
\par    1 * M . M . M . . 
\par    0 ***** . . . . . 
\par   -1 . . . . . . . . 
\par     -2-1 0 1 2 3 4 5 
\par 
\par            X
\par 
\par }\pard\plain \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 This is a classic 'Flood fill' algorithm. The idea is that one seeds a 'flood fill' with an initial point followed by massive recursion to find the points around that point. 
\par Using a small 5 x 5 matrix as an example: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534  4 . . . . .
\par  3 . . . . .
\par  2 . . * . .
\par  1 . . . . .
\par  0 . . . . .
\par    0 1 2 3 4
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 
one can easily imagine starting at point 2,2 and then examining points around it after marking those points with the 'distance' from the initial point: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534  4 . . . . .
\par  3 . . 1 . .
\par  2 . 1 * 1 .
\par  1 . . 1 . .
\par  0 . . . . .
\par    0 1 2 3 4
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 and then examining points around those 1's: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534  4 . . 2 . .
\par  3 . 2 1 2 .
\par  2 2 1 * 1 2
\par  1 . 2 1 2 .
\par  0 . . 2 . .
\par    0 1 2 3 4
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 and so on until all distances are determined: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534  4|4 3 2 3 4
\par  3|3 2 1 2 3
\par  2|2 1 * 1 2
\par  1|3 2 1 2 3
\par  0|4 3 2 3 4
\par   +---------
\par    0 1 2 3 4
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 Adding in obstacles just makes some of the distances a bit different since certain cells can not be used in the recursive search. Here is the flooded version of the sample input data: }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534\charrsid9007534 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534    4| 6  7  8  9 10 11 10  9  
\par    3| 5  M  9 10 11 10  9  8 
\par Y  2| 4  5  M  B  M 11  M  7 
\par    1| 3  M  1  M  3  M  5  6 
\par    0| 2  1  *  1  2  3  4  5 
\par   -1| 3  2  1  2  3  4  5  6 
\par     +-----------------------
\par      -2 -1  0  1  2  3  4  5 
\par                  X
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 The final '11' has not been written on to the 'B' square on which 
Bessie sits, but it's clear that 11 is the answer. 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 
The obvious way to implement this algorithm is so simple (yet wrong): 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 check(x,y,dist) \{
\par     if (dist > matrix[x,y]) return;
\par     matrix[x,y] = dist;
\par     if (validsubscript (x+1, y  ) check (x+1, y  , dist+1);
\par     if (validsubscript (x-1, y  ) check (x-1, y  , dist+1);
\par     if (validsubscript (x  , y+1) check (x  , y+1, dist+1);
\par     if (validsubscript (x  , y-1) check (x  , y-1, dist+1);
\par \}
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 The pleasing intuitive brevity, though, is nothing but a trap. Why? B
ecause, as shown, the subprogram will quickly recurse to check(x+1, ...), check (x+2, ...) and so on down the x axis instead of the geometrically nice circular pattern exhibited a few paragraphs back. Will the algorithm still get the right answer? Yes! Is
 there a way to implement the algorithm that will take longer to get to the right answer? Probably not. 
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 
Instead, one needs to implement a FIFO queue structure so that all four of the 'next elements to search' are queued before any of them is examined. Bonu
s performance for knowing if an element is already queued (and thus avoiding requeueing it). Note that one should requeue elements whose value has changed -- but it's hardly ever an advantage to have the same element on the queue more than once. 
\par }{\i\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 Aside: qu
eues can be nicely implemented with linked lists. Such lists are slightly tricky to get 'right the first time' and sometimes are implemented to allocate a tiny bit of storage for each element added to the list. In contest programming, one might as well ju
st make a big array and circle through it. If you need more space than the array allows, you would have needed more linked-list space -- and failed very late in the program's execution. Better to expose the potential failure up front!}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534  
\par The final challenge i
n this task was the coordinate scheme: it starts at some large negative number, so all subscripts need to be shifted into a valid range. The first program below does this with #define's; the second explicitly codes the shift into each subscript. 
\par My soluti
on is intended to be straightforward with the tiny trick of using a bit more storage to set up a 'border' around the edges of the matrix. This avoids having to validate every possible enqueueing to ensure the subscripts will not go out of bounds for the a
rray: 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include <stdio.h>
\par 
\par #define RANGE 500
\par #define FIELD(i,j) field[(i)+RANGE+2][(j)+RANGE+2]
\par #define DONE(i,j) done[(i)+RANGE+2][(j)+RANGE+2]
\par #define QUEUED(i,j) queued[(i)+RANGE+2][(j)+RANGE+2]
\par 
\par short field[2*RANGE+5][2*RANGE+5];
\par char done[2*RANGE+5][2*RANGE+5], queued[2*RANGE+5][2*RANGE+5];\tab 
\par 
\par struct q \{ int x, y; \} queue[800000];
\par int nq = 0, head = 0; tail = 0;
\par 
\par tryenq (x,y,thisdist) \{
\par     if (FIELD(x,y) != 0 && thisdist >= FIELD(x,y)) return;
\par     if (QUEUED(x,y)) return;
\par     QUEUED(x,y) = 1;
\par     FIELD(x,y) = thisdist;
\par     if (++nq >= 790000) exit (9);
\par     queue[tail].x = x;
\par     queue[tail].y = y;
\par     if (++tail >= 800000) tail = 0;
\par \}
\par 
\par main () \{
\par     FILE *fin = fopen ("mud.in", "r");
\par     FILE *fout = fopen ("mud.out", "w");
\par     int X, Y, N, i, j, A, B;
\par 
\par     fscanf (fin, "%d %d %d", &X, &Y, &N);
\par     for (i = 0; i < N; i++) \{
\par \tab fscanf (fin, "%d %d", &A, &B);
\par \tab DONE(A,B) = -1;
\par     \}
\par \tab /* set up a border so we don't look outside box: */
\par     for (i = -RANGE; i <= RANGE; i++)
\par \tab FIELD(-RANGE-1,i) = FIELD(RANGE+1,i) = FIELD(i,RANGE+1) =
\par \tab \tab \tab \tab \tab FIELD(i,-RANGE-1) = -1;
\par     tryenq (0,0,0);
\par     while (nq) \{
\par \tab int x=queue[head].x; \tab \tab /* dequeue */
\par \tab int y=queue[head].y;
\par \tab QUEUED(x,y) = 0;
\par \tab nq--;
\par \tab if (++head >= 800000) head = 0;
\par 
\par \tab /* enqueue if needed: */
\par \tab if (DONE(x,y)) continue;
\par \tab DONE(x,y) = 1;
\par \tab tryenq(x+1, y  , FIELD(x,y)+1);
\par \tab tryenq(x-1, y  , FIELD(x,y)+1);
\par \tab tryenq(x  , y+1, FIELD(x,y)+1);
\par \tab tryenq(x  , y-1, FIELD(x,y)+1);
\par     \}
\par 
\par     fprintf (fout, "%d\\n", FIELD(X,Y));
\par     exit (0);
\par \}
\par }\pard \qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 Richard Peng's solution is a bit shorter (a
s usual). Among the techniques for compaction: 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid11289134\charrsid9007534 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \qj \fi-360\li720\ri0\sb100\sa100\sbauto1\saauto1\widctlpar
\jclisttab\tx720\aspalpha\aspnum\faauto\ls6\adjustright\rin0\lin720\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 
The 'dir' array of the four pairs of integers that describe the four potential squares to be newly examined 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid11289134\charrsid9007534 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Using array subscripts rather than an structure for storing the queue (probably a bit more obscure 
to understand if you look at the program six months later) 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid11289134\charrsid9007534 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Omission of tagging to prevent extra queueing/checking 
\par {\listtext\pard\plain\fs20\loch\af3\hich\af3\dbch\af0\insrsid11289134\charrsid9007534 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Inclusion of negative elements in the 'vis' array to prevent extra processing (probably a big win) 
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 Richard's program is over 1.5x faster than the program above. }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534\charrsid9007534 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include <cstdio>
\par #include <cstring>
\par 
\par short vis[1020][1020], r, c, shif, q[1100000][2];
\par int a, b, x, y, n, tai;
\par int dir[4][2]=\{-1, 0, 1, 0, 0, -1, 0, 1\};
\par 
\par void add (int r1, int c1, int d) \{
\par     if (r1>=0 && r1<r && c1>=0 && c1<c && vis[r1][c1]==-1) \{
\par         vis[r1][c1]=d;
\par         q[tai][0]=r1;
\par         q[tai][1]=c1;
\par         tai++;
\par     \}
\par \}
\par 
\par int main () \{
\par     int i, j;
\par     freopen ("mud.in", "r", stdin);
\par     freopen ("mud.out", "w", stdout);
\par     r = 1010;  c = 1010;  shif = 505;
\par     tai = 0;
\par     scanf ("%d%d%d", &x, &y, &n);
\par     for (i = 0; i < r; i++)
\par         for (j = 0; j < c; j++)
\par             vis[i][j] = -1;
\par     for (i = 0; i < n; i++)\{
\par         scanf ("%d%d", &a, &b);
\par         vis[a+shif][b+shif] = -2;
\par     \}
\par     tai = 0;
\par     add (shif, shif, 0);
\par     for (i = 0; i < tai; i++)
\par         for (j = 0; j < 4; j++)
\par             add (q[i][0]+dir[j][0], q[i][1]+dir[j][1], vis[q[i][0]][q[i][1]]+1);
\par     printf ("%d\\n", vis[x+shif][y+shif]);
\par     return 0;
\par \}
\par 
\par }\pard\plain \s2\ql \fi720\li2880\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin2880\itap0\pararsid9007534 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\insrsid11289134\charrsid2631230  {\*\bkmkstart _Toc188248246}GOLD PROBLEMS{\*\bkmkend _Toc188248246}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 **********************************************************************}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 *******}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248247}Sightseeing Cows [Reid Barton, 2007]{\*\bkmkend _Toc188248247}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par Farmer John has decided to reward his cows for their hard work by}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 taking them on a tour of the big city! The cows must decide how}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 best to spend their free time.
\par 
\par Fortunately, they have a detailed city map showing the L (2 <= L}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 <= 1000) major landmarks (conveniently numbered 1.. L) and the P}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 (2 <= P <= 5000) unidirectional cow paths that join them. Farmer}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 John will drive the cows to a starting landmark of their choice,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
from which they will walk along the cow paths to a series of other}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 landmarks, ending back at their starting landmark where Farmer John}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 will pick them up and take them back to the  farm. Because space}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 in the city is at a premium, the cow paths are very narrow and so}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
travel along each cow path is only allowed in one fixed direction.
\par 
\par While the cows may spend as much time as they like in the city,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 they do tend to get bored easily. Visiting each new landmark is}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 fun, but walking between them takes time. The cows know the exact}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 fun values F_i (1 <= F_i <= 1000) for each landmark i.
\par 
\par The cows also know about the cowpaths. Cowpath i connects landmark}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 L1_i to L2_i (in the direction L1_i -> L2_i) and requires time T_i}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 (1 <= T_i <= 1000) to traverse.
\par 
\par In order to have the best possible day off, the cows want to maximize}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 the average fun value per unit time of their trip.  Of course, the}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 landmarks are only fun the first time they are visited; the cows}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 may pass through the landmark more than once, but they do not}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 perceive 
its fun value again. Furthermore, Farmer John is making}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 the cows visit at least two landmarks, so that they get some exercise}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 during their day off.
\par 
\par Help the cows find the maximum fun value per unit time that they}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 can achieve.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: L and P
\par 
\par * Lines 2..L+1: Line i+1 contains a single one integer: F_i
\par 
\par * Lines L+2..L+P+1: Line L+i+1 describes cow path i with three}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 space-separated integers: L1_i, L2_i, and T_i
\par 
\par SAMPLE INPUT (file sightsee.in):
\par 
\par 5 7
\par 30
\par 10
\par 10
\par 5
\par 10
\par 1 2 3
\par 2 3 2
\par 3 4 5
\par 3 5 2
\par 4 5 5
\par 5 1 3
\par 5 2 2
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single number given to two decimal places (do not perform}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
        explicit rounding), the maximum possible average fun per unit}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 time, or 0 if the cows cannot plan any trip at all in}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 accordance with the above rules.
\par 
\par SAMPLE OUTPUT (file sightsee.out):
\par 
\par 6.00
\par 
\par OUTPUT DETAILS:
\par 
\par The trip 1 -> 2 -> 3 -> 5 -> 1 has a total fun value of 60 and a}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 length of 10 units for an average fun per unit time of 6. The trip}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 2 -> 3 -> 5 -> 2 only has an average fun per unit time of 30/6 =}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 5, and any trip involving landmark 4 has an average fun per unit}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
time of less than 4.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
This problem involves a graph in which each edge e has an associated length L(e) and fun value F(e). Our goal is to find a directed c
ycle C minimizing L(C) / F(C), where L(C) denotes the total length of all edges in C and F(C) denotes the total fun value of all edges in C (note: the actual problem asks us to maximize F(C) / L(C), but I've converted it to a minimization problem since th
is is more common when we discuss shortest path type problems). 
\par To solve this problem quickly, we employ a common trick: binary search on the answer. Let us make a guess that the answer is X. By running one instance of the Bellman-Ford shortest path algori
thm (in O(LP) time), we will be able to tell if this guess is too high or too low, thereby homing in on the correct answer. The one feature of the Bellman-Ford algorithm we use here is the fact that it can detect whether or not a negative-length direct cy
cle exists in a graph (we won't go into how this is done here, since this is a common algorithm). 
\par How can negative cycle detection tell us if our guess X is too high or too low? Well, we would like to check if the minimum value of L(C)/F(C) over all cycles
 C is less than X (i.e., if there exists a cycle C such that L(C)/F(C) <= X). If so, then our guess is too high; otherwise it is too low. But asking whether there exists a cycle C such that L(C)/F(C) <= X is the same as asking whether there exists a cycle
 
C such that L(C) <= X F(C), which is the same as asking whether there exists a cycle C such that L(C) - X F(C) <= 0. So if we define the cost of each edge e as Z(e) = L(e) - X F(e), then this turns into a negative cycle detection problem with respect to t
he Z(e)'s! 
\par Below is Chinese Junior Danqi Chen's full-credit beautifully formatted PASCAL solution (this is precisely as she submitted it) which might or might not match the description above. 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230   program sightsee;
\par 
\par     const
\par       finp  =  'sightsee.in';
\par       fout  =  'sightsee.out';
\par       maxn  =  1000 + 5;
\par       eps   =  1e-4;
\par 
\par     type
\par        nodeptr  =  ^node;
\par           node   =  record
\par              p, len  :   longint;
\par              next    :   nodeptr;
\par           end;
\par 
\par     var
\par        hash        :   array [1 .. maxn] of boolean;
\par        queue, edge :   array [1 .. maxn] of longint;
\par        dist        :   array [1 .. maxn] of extended;
\par        a           :   array [1 .. maxn] of nodeptr;
\par        cost        :   array [1 .. maxn] of longint;
\par        n, m        :   longint;    
\par 
\par     procedure create(x, y, c  :  longint);
\par       var
\par          tmp      :   nodeptr;
\par       begin
\par          new(tmp); tmp ^.p := y; tmp ^. len := c;
\par          tmp ^.next := a[x]; a[x] := tmp;
\par       end;
\par 
\par     procedure init;
\par       var
\par          i        :   longint;
\par          x, y, c  :   longint;
\par       begin
\par          read(n, m);
\par          for i := 1 to n do read(cost[i]);
\par          for i := 1 to n do a[i] := nil;
\par          for i := 1 to m do 
\par            begin
\par              read(x, y, c);
\par              create(x, y, c);
\par            end;
\par       end;
\par  
\par     function nxt(i  :  longint):  longint;
\par       begin
\par          if i = maxn then nxt := 1 else nxt := i + 1;
\par       end;
\par 
\par     function check(limit  :  extended):  boolean;
\par       var
\par          h, t, i :   longint;
\par          tmp     :   nodeptr;
\par          v       :   extended;
\par       begin
\par          check := true;
\par          fillchar(hash, sizeof(hash), false);
\par          h := 0; t := 0;
\par          for i := 1 to n do 
\par            begin
\par              inc(t); queue[t] := i; hash[i] := true;
\par              dist[i] := 0; edge[i] := 0;
\par            end;
\par          while (h <> t) do
\par            begin
\par              h := nxt(h);
\par              tmp := a[queue[h]];
\par              while (tmp <> nil) do
\par                begin
\par                  v := tmp ^. len * limit - cost[tmp^.p];
\par                  if (dist[queue[h]] + v < dist[tmp^.p]) then
\par                    begin
\par                      dist[tmp^.p] := dist[queue[h]] + v;
\par                      edge[tmp^.p] := edge[queue[h]] + 1;
\par                      if edge[tmp ^. p] > n then exit; 
\par                      if not hash[tmp^.p] then
\par                        begin
\par                          t := nxt(t);
\par                          queue[t] := tmp^. p;
\par                          hash[tmp ^.p] := true;
\par                        end;
\par                    end;
\par                  tmp := tmp ^. next;
\par                end;
\par               hash[queue[h]] := false;
\par            end;
\par          check := false;
\par       end;
\par 
\par     procedure work;
\par       var
\par          l, r, mid  :  extended;
\par       begin
\par          l := 0; r := 1000;
\par          while (r - l > eps) do
\par            begin
\par              mid := (l + r) / 2;
\par              if check(mid) then l := mid else r := mid;
\par            end;
\par          writeln(l : 0 : 2);
\par       end;
\par 
\par     begin
\par        assign(input, finp); reset(input);
\par        assign(output, fout); rewrite(output);
\par          init;
\par          work;
\par        close(input); close(output);
\par     end.
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248248}Gourmet Grazers [Alex Schwendner, 2007]{\*\bkmkend _Toc188248248}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par Like so many others, the cows have developed very haughty tastes}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 and will no longer graze on just any grass. Instead, Farmer John}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 must purchase gourmet organic grass at the Green Grass Grocers store}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 for each of his N (1 <= N <= 100,000) cows.
\par 
\par Each cow_i demands grass of price at least A_i (1 <= A_i <=}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 1,000,000,000) and with a greenness score at least B_i (1 <= B_i}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 <= 1,000,000,000). The GGG store has M (1 <= M <= 100,000) different}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 types of grass available, each with a price C_i (1 <= C_i <=}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
1,000,000,000) and a greenness score of D_i (1 <= D_i <= 1,000,000,000).}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 Of course
, no cow would sacrifice her individuality, so no two cows}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 can have the same kind of grass.
\par 
\par Help Farmer John satisfy the cows' expensive gourmet tastes while}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 spending as little money as is necessary.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and M.
\par 
\par * Lines 2..N+1: Line i+1 contains two space-separated integers: A_i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         and B_i
\par 
\par * Lines N+2..N+M+1: Line i+N+1 contains two space-separated integers:}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         C_i and D_i
\par 
\par SAMPLE INPUT (file gourmet.in):
\par 
\par 4 7
\par 1 1
\par 2 3
\par 1 4
\par 4 2
\par 3 2
\par 2 1
\par 4 3
\par 5 2
\par 5 4
\par 2 6
\par 4 4
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer which is the minimum cost to satisfy all}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         the cows. If that is not possible, output -1.
\par 
\par SAMPLE OUTPUT (file gourmet.out):
\par 
\par 12
\par 
\par OUTPUT DETAILS:
\par 
\par Cow 1 eats grass 2 at cost 2, cow 2 eats grass 3 at cost 4, cow 3 eats}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
grass 6 at cost 2, and cow 4 eats grass 7 at cost 4, for a total cost of 12.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
The greedy solution works for this task. The first observation is if we sort the requests and grasses by decreasing order of green-ness, the set of grass
 we need to consider for each request is precisely the set of all grass that hasn't been used yet that has a higher greenness. So we can add grasses to the set as we 'sweep' by them and remove the grasses as we use them. 
\par Let's just consider the prices. Th
e claim is that at each moment, we can pick the cheapest grass that will satisfy the cow. This is true since suppose we pick a more expensive grass and use the cheaper one later, we can swap the choices while keeping both cows satisfied without increasing
 the total cost. 
\par Now the problem becomes a data structure problem, we need to support the following operations: insertion, deletion, find the first element with key bigger than a given value and we want to do each operation in O(logn) time. 
\par This can be do
ne using STL set. It's also possible to do this without STL using a binary index tree by first assigning values from 1 to n to the prices, then construct a full binary tree with the prices at leafs and track on each node whether the subtree below has valu
es. Both give O(nlogn) solutions. 
\par Below is an extraordinarily compact full-credit solution submitted by Belarus's Gennady Korotkevich: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <iterator>
\par #include <fstream>
\par #include <vector>
\par #include <algorithm>
\par #include <set>
\par 
\par #define __int64 long long
\par 
\par using namespace std;
\par 
\par vector < pair <int,int> > c,f;
\par set < pair <int,int> > a;
\par 
\par int main () \{
\par     FILE *in  = fopen ("gourmet.in","r");
\par     FILE *out = fopen ("gourmet.out","w");
\par     int n, m, i, q, w;
\par     fscanf (in, "%d%d", &n, &m);
\par     for (i=0; i<n; i++) \{
\par        fscanf (in, "%d%d", &q, &w);
\par        c.push_back (make_pair (w, q));
\par     \}
\par     for (i=0; i<m; i++) \{
\par         fscanf (in, "%d%d", &q, &w);
\par         f.push_back (make_pair (w, q));
\par     \}
\par     sort (c.begin (), c.end ());
\par     sort (f.begin (), f.end ());
\par     int r = m - 1;
\par 
\par     __int64 ans = 0;
\par     a.clear ();
\par     for  (i=n-1;i>=0;i--) \{
\par         while (1) \{
\par             if (r < 0) break;
\par             if (f[r].first >= c[i].first) \{
\par                 a.insert (make_pair (f[r].second, r));
\par                 r--;
\par             \}
\par             else break;
\par         \}
\par         set< pair <int,int> >::iterator d =
\par                           a.lower_bound (make_pair (c[i].second, -1));
\par         if  (d == a.end ()) \{
\par             fprintf (out, "-1\\n");
\par             return 0;
\par         \}
\par         ans +=  (*d).first;
\par         a.erase (d);
\par     \}
\par     fprintf (out, "%Ld\\n", ans);
\par     return 0;
\par \}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9007534 
\par }{\insrsid11289134\charrsid2631230 {\*\bkmkstart _Toc188248249}Best Cow Line, Gold [Christos Tzamos, 2007]{\*\bkmkend _Toc188248249}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par FJ is about to take his N (1 <= N <= 30,000) cows to the annual}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 "Farmer of the Year" competition. In this contest every farmer}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 arranges his cows in a line and herds them past the judges.
\par 
\par The contest organizers adopted a new registration scheme this year:}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 simply register the initial letter of every cow in the order they}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 will appear (e.g., If FJ takes Bessie, Sylvia, and Dora in that}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 order, he just registers BSD). After the registration phase ends,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
every group is judged in increasing lexicographic order (i.e.,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 alphabetical order) according to the string of the initials of the}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 cows' names.
\par 
\par FJ is very busy this year and has to hurry back to his farm, so he}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 wants to be judged as early as possible. He decides to rearrange}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 his cows, who have already lined up, before registering them.
\par 
\par FJ marks a location for a new line of the competing cows. He then}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 proceeds to marshal the cows from the old line to the new one by}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 repeatedly sending either the first or last cow in the (remainder}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 of the) original line to the end of the new line. When he's finished,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
FJ takes his cows for registration in this new order.
\par 
\par Given the initial order of his cows, determine the least lexicographic}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 string of initials he can make this way.
\par 
\par PROBLEM NAME: bclgold
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N+1: Line i+1 contains a single initial ('A'..'Z') of the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         cow in the ith position in the original line
\par 
\par SAMPLE INPUT (file bclgold.in):
\par 
\par 6
\par A
\par C
\par D
\par B
\par C
\par B
\par 
\par INPUT DETAILS:
\par 
\par FJ has 6 cows in this order: ACDBCB
\par 
\par OUTPUT FORMAT:
\par 
\par The least lexicographic string he can make. Every line (except perhaps}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 the last one) contains th
e initials of 80 cows ('A'..'Z') in the new}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 line.
\par 
\par SAMPLE OUTPUT (file bclgold.out):
\par 
\par ABCBCD
\par 
\par OUTPUT DETAILS:
\par 
\par   Step   Original     New
\par    #1     ACDBCB
\par    #2      CDBCB     A
\par    #3      CDBC      AB
\par    #4      CDB       ABC
\par    #5      CD        ABCB
\par    #6       D        ABCBC
\par    #7                ABCBCD
\par 
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 
This problem can be solved with dynamic programming on the intervals of cows but there is also a simple greedy strategy. \line \line Between the two cows in the edges, you must always pick the cow with the smallest
 initial letter. If both cows have the same initial letter in order to decide you must look a little bit deeper and check the second cows in the line's edges or the third ones if those are equal and so on until you find two cows that are different. Then y
ou pick the cow from the s}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 ide of the smallest one. \line \line This }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 process can be summarized as follows. \line \line 
At any given interval [a,b] with string S([a,b]) you choose: \line \line Cow a if S([a,b]) < rev( S([a,b]) )\line Cow b otherwise \line where rev(S) is the reverse string e.g. rev("abc") = "cba" \line \line 
This can be implemented in O(N^2) but we can achieve O(NlogN) by using suffix arrays. \line \line Here are the two implementations:}{\fs24\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230  \line \line }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 The O(N^2)}{\fs24\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230  
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include<cstdio>
\par 
\par char S[2010],ln=0;
\par 
\par void prnt(char a) \{
\par \tab if(ln==80) \{printf("\\n");ln=0;\}
\par \tab printf("%c",a);ln++;
\par \}
\par 
\par int main() \{
\par \tab int i,j,N,pi,pj,val;
\par \tab freopen("bcl.in" ,"r",stdin );
\par \tab freopen("bcl.out","w",stdout);
\par \tab scanf("%d",&N);
\par \tab for(i=0;i<N;i++) scanf(" %c ",S+i);
\par \tab i=0,j=N-1;
\par \tab while(i<=j) \{
\par \tab \tab if(S[i]<S[j])\tab \tab \{prnt(S[i]);i++;\}
\par \tab \tab else if(S[i]>S[j])\tab \{prnt(S[j]);j--;\}
\par \tab \tab else \{
\par \tab \tab \tab pi=i+1;pj=j-1;val=S[i];
\par \tab \tab \tab while( pj-pi>1 && S[pi]==S[pj]) \{pi++,pj--;\}
\par \tab \tab \tab if(S[pi]<S[pj]) prnt(S[i]),i++;
\par \tab \tab \tab else prnt(S[j]),j--;
\par \tab \tab \}
\par \tab \}
\par \tab printf("\\n");
\par \tab return 0;
\par \}
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs24\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 \line }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 And the O(NlogN) 

\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include<cstdio>
\par #include<cstring>
\par #include<cstdlib>
\par 
\par #define MAXN 500050
\par 
\par char S[2*MAXN];
\par int N,ln=0;
\par int o[2][2*MAXN], t[2*MAXN][2];
\par int A[2*MAXN], B[2*MAXN], C[2*MAXN], D[2*MAXN];
\par 
\par void prnt(char a) \{
\par \tab if(ln==80) \{printf("\\n");ln=0;\}
\par \tab printf("%c",a);ln++;
\par \}
\par 
\par int main() \{
\par \tab 
\par \tab int i, j, jj, x, k;
\par \tab 
\par \tab freopen("bcl.in" ,"r",stdin );
\par \tab freopen("bcl.out","w",stdout);
\par \tab scanf("%d",&N);
\par \tab for(i=0;i<N;i++) \{
\par \tab \tab scanf(" %c ",S+i);
\par \tab \tab S[N+i] = S[i];
\par \tab \}
\par 
\par \tab memset(A, 0, sizeof(A));
\par \tab for (i = 0; i < 2*N; ++i) A[(int)(S[i]-'A')] = 1;
\par \tab for (i = 1; i < 26; ++i) A[i] += A[i-1];
\par \tab for (i = 0; i < 2*N; ++i) o[0][i] = A[(int)(S[i]-'A')];
\par \tab x=0;
\par \tab for (j = 0, jj = 1, k = 0; jj < N && k < 2*N; ++j, jj <<= 1) \{
\par 
\par \tab \tab memset(A, 0, sizeof(A));
\par \tab \tab memset(B, 0, sizeof(B));
\par 
\par \tab \tab for (i = 0; i < N; ++i) \{
\par \tab \tab \tab ++A[ t[i][0] = o[x][i] ];
\par \tab \tab \tab ++B[ t[i][1] = (i+jj<N) ? o[x][i+jj] : 0 ];
\par \tab \tab \}
\par \tab \tab 
\par \tab \tab for (i = N; i < 2*N; ++i) \{
\par \tab \tab \tab ++A[ t[i][0] = o[x][i] ];
\par \tab \tab \tab ++B[ t[i][1] = (i-jj>=N) ? o[x][i-jj] : 0 ];
\par \tab \tab \}
\par 
\par \tab \tab for (i = 1; i <= 2*N; ++i) \{
\par \tab \tab \tab A[i] += A[i-1];
\par \tab \tab \tab B[i] += B[i-1];
\par \tab \tab \}
\par 
\par \tab \tab for (i = 2*N-1; i >= 0; --i)
\par \tab \tab \tab C[--B[t[i][1]]] = i;
\par 
\par \tab \tab for (i = 2*N-1; i >= 0; --i)
\par \tab \tab \tab D[--A[t[C[i]][0]]] = C[i];
\par 
\par \tab \tab x ^= 1;
\par \tab \tab o[x][D[0]] = k = 1;
\par \tab \tab for (i = 1; i < 2*N; ++i)
\par \tab \tab \tab o[x][D[i]] = (k += (t[D[i]][0] != t[D[i-1]][0] || t[D[i]][1] != t[D[i-1]][1]));
\par 
\par \tab \}
\par \tab i=0,j=N-1;
\par \tab while(i<=j) \{
\par \tab \tab if(S[i]<S[j])\tab \tab \{prnt(S[i]);i++;\}
\par \tab \tab else if(S[i]>S[j])\tab \{prnt(S[j]);j--;\}
\par \tab \tab else if(o[x][i]<o[x][N+j]) \{prnt(S[i]);i++;\}
\par \tab \tab else \{prnt(S[j]);j--;\}
\par \tab \}
\par \tab printf("\\n");
\par \tab return 0;
\par \}
\par 
\par 
\par }\pard\plain \s1\qc \li0\ri0\sb480\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs36\cf17\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248250}Elite 2007 November Competition contest{\*\bkmkend _Toc188248250}
\par }\pard\plain \s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248251}BRONZE PROBLEMS{\*\bkmkend _Toc188248251}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 **********************************************************************
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248252}Exploration [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248252}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
\par Bessie is traveling on a road teeming with interesting landmarks.}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 The road is labeled just like a number line, and Bessie starts at}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
the "origin" (x = 0). A total of N (1 <= N <= 50,000) landmarks are}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 located at points x_1, x_2, ..., x_N  (-100,000 <= x_i <= 100,000).}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
Bessie wants to visit as many landmarks as possible before sundown,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 which occurs in T (1 <= T <= 1,000,000,000) minutes. She travels 1}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
distance unit in 1 minute.
\par 
\par Bessie will visit the landmarks in a particular order. Since the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 landmarks closer to the origin are more important to Farmer John,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
she always heads for the unvisited landmark closest to the origin.}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 No two landmarks will be the same distance away from the origin.
\par 
\par Help Bessie determine the maximum number of landmarks she can visit}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 before the day ends.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: T and N
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer that is the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         location of the ith landmark: x_i
\par 
\par SAMPLE INPUT (file explore.in):
\par 
\par 25 5
\par 10
\par -3
\par 8
\par -7
\par 1
\par 
\par INPUT DETAILS:
\par 
\par Bessie has 25 minutes before sundown, and there are 5 landmarks}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 located at positions 10, -3, 8, -7, and 1.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The maximum number of landmarks Bessie can visit.
\par 
\par SAMPLE OUTPUT (file explore.out):
\par 
\par 4
\par 
\par OUTPUT DETAILS:
\par 
\par Bessie sequentially visits the landmarks at locations 1, -3, -7,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 and 8, after which she has traveled a total of 24 minutes.  She}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
cannot visit the next intended landmark at position 10, since this}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 would extend her total travel time to 26 minutes.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
This is another 'ad hoc' problem: no generic algorithm. It was intended to be the easy problem but ended ranked the most difficult. I expect many folks read far more into it than was required. 
\par This is not an optimization problem (it is not one where you find an optimal route). The route procedure was explicit: visit the next unvisited node that is closest to the origin. We know that in one dimension, distance is the absolute value between
 two points so the distance to the origin for point Z is just |Z|, the absolute value of Z. 
\par Thus, the problem devolves into finding the route (sorting the absolute value of the input data) and then simulating the traversal (i.e., visit successive landmark
s until the time runs out). The problem was unclear about whether the time limit was < T or <= T, but the test data did not exploit this. 
\par The only 'tricky part' is that the data was chosen such that an O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 2}{\f2\fs20\insrsid11289134\charrsid9007534 ) sort would not succeed on the largest test case
s. One needed to invoke a system sort (e.g., qsort) or include a 'good' sort in the submitted program. 
\par Below is my straightforward solution: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <stdio.h>
\par #include <stdlib.h>
\par 
\par abs(i) \{ return i < 0 ? -i:i; \}
\par 
\par int compare_abs(int *a, int *b) \{
\par     return abs(*a) - abs(*b);
\par \}
\par 
\par int list[50000];
\par main() \{
\par     FILE *fin = fopen ("explore.in", "r");
\par     FILE *fout = fopen ("explore.out", "w");
\par     int T, N, i, j, bessloc, nvisit, timevisit;
\par 
\par     fscanf (fin, "%d %d", &T, &N);
\par 
\par     for (i = 0; i < N; i++)
\par         fscanf (fin, "%d", &list[i]);
\par 
\par     qsort (list, N, sizeof(int), compare_abs);
\par 
\par     /* start visiting: */
\par     bessloc = 0;
\par     nvisit = 0;
\par     timevisit = 0;
\par     for (i = 0; i < N; i++) \{
\par         timevisit += abs(list[i] - bessloc);
\par         if (timevisit > T) break;
\par         nvisit++;
\par         bessloc = list[i];
\par     \}
\par     fprintf (fout, "%d\\n", nvisit);
\par     exit (0);
\par \}
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9007534 
\par 
\par }{\insrsid11289134\charrsid2631230 {\*\bkmkstart _Toc188248253}Speed Reading [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248253}
\par }{\f2\insrsid11289134\charrsid2631230 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 All K (1 <= K <= 1,000) of the cows are participating in Farmer}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 John's annual reading contest. Th
e competition consists of reading}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 a single book with N (1 <= N <= 100,000) pages as fast as possible}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 while understanding it.
\par 
\par Cow i has a reading speed S_i (1 <= S_i <= 100) pages per minute,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 a maximum consecutive reading time T_i (1 <= T_i <= 100) minutes,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
and a minimum rest time R_i (1 <= R_i <= 100) minutes.  The cow can}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 read at a rate of S_i pages per minute, but only for T_i minutes}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
at a time. After she stops reading to rest, she must rest for R_i}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 minutes before commencing reading again.
\par 
\par Determine the number of minutes (rounded up to the nearest full}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 minute) that it will take for each cow to read the book.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and K
\par 
\par * Lines 2..K+1: Line i+1 contains three space-separated integers: S_i,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         T_i, and R_i
\par 
\par SAMPLE INPUT (file read.in):
\par 
\par 10 3
\par 2 4 1
\par 6 1 5
\par 3 3 3
\par 
\par INPUT DETAILS:
\par 
\par The book has 10 pages; 3 cows are competing. The first cow reads}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 at a rate of 2 pages per minute, can read for at most 4 minutes at}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
a time, and must rest for 1 minute after reading. The second reads}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 at a rate of 6 pages per minute, can read for at most 1 minute at}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
a time, and must rest 5 minutes after reading. The last reads at a}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 rate of 3 pages per minute, can read for at most 3 minutes at a}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
time, and must rest for 3 minutes after reading.
\par 
\par OUTPUT FORMAT:
\par 
\par * Lines 1..K: Line i should indicate how many minutes (rounded up to}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         the nearest full minute) are required for cow i to read the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 whole book.

\par 
\par SAMPLE OUTPUT (file read.out):
\par 
\par 6
\par 7
\par 7
\par 
\par OUTPUT DETAILS:
\par 
\par The first cow can read 8 pages in 4 minutes, rest for 1 minute, and}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 read the last 2 pages in a minute. The second reads 6 pages in a}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
minute, rests for 5 minutes, and finishes in the next minute. The}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 last reads 9 pages in 3 minutes, rests for 3 minutes, and finishes}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 in the ne
xt minute.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
This is an 'ad hoc' programming problem: just 'figure it out' and make it work. No commonly used algorithm or anything like that. 
\par I personally read this as a sort of 'simulation' problem so I wrote the simple solution that would simulate what'
s going on in a step-by-step way. I ran a counter for the minutes and reduced the number of pages remaining by the speed for each minute that went by (and incremented the busy counter so I'd know when to rest). When it was time to rest, I incremented the 
minutes so that resting would take place and then reset my busy counter. I think the solution is simple -- and it surely runs quickly enough: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <stdio.h>
\par #include <stdlib.h>
\par 
\par main() \{
\par     FILE *fin = fopen ("read.in", "r");
\par     FILE *fout = fopen ("read.out", "w");
\par     int N, K, speed, timex, rest, i, t, minutes, pages, busy;
\par 
\par     fscanf(fin, "%d %d", &N, &K);
\par     for (i = 0; i < K; i++) \{
\par         fscanf (fin, "%d %d %d", &speed, &timex, &rest);
\par         pages = N;
\par         busy = 0;
\par         for (minutes = 1; ; minutes++) \{
\par             pages -= speed;
\par             busy++;
\par             if (pages <= 0) break;
\par             if (busy == timex) \{
\par                 minutes += rest;
\par                 busy = 0;
\par             \}
\par         \}
\par         fprintf (fout, "%d\\n", minutes);
\par     \}
\par     exit (0);
\par \}
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
Richard Peng (and a host of others), on the other hand, created tricky (in my opinion) formulae that would yield the answer at least somewhat directly (at least without looping). One of these solutions is below. Unfortunately, 
another coach who tried the same thing got wrong answers on some of the cases. Half those who submitted solutions to this problem missed the final test case; it appears at least some of them tried the trickier math procedures. 
\par Here's Richard's compact quick solution: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <cstdio>
\par 
\par int ans, n, r, s, t;
\par 
\par int main() \{
\par     int ct;
\par     freopen ("read.in", "r", stdin);
\par     freopen ("read.out", "w", stdout);
\par     scanf ("%d%d", &n, &ct);
\par     while (ct--) \{
\par         scanf ("%d%d%d", &r, &s, &t);
\par         ans = (s+t)*(n/(r*s));
\par         if( n%(r*s)==0 && n!=0) ans -= t;
\par         ans += ((n%(r*s))+r-1)/r;
\par         printf("%d\\n",ans);
\par     \}
\par     return 0;
\par \}
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248254}Avoid The Lakes [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248254}
\par }{\f2\insrsid11289134\charrsid2631230 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 Farmer John's farm was flooded in the most recent storm, a fact}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 only aggr
avated by the information that his cows are deathly afraid}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 of water. His insurance agency will only repay him, however, an}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
amount depending on the size of the largest "lake" on his farm.
\par 
\par The farm is represented as a rectangular grid with N (1 <= N <=}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 100) rows and M (1 <= M <= 100) columns. Each cell in the grid is}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
either dry or submerged, and exactly K (1 <= K <= N*M) of the cells}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 are submerged. As one would expect, a lake has a central cell to}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
which other cells connect by sharing a long edge (not a corner).}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 Any cell that shares a long edge with the central cell or shares a}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
long edge with any connected cell becomes a connected cell and is}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 part of the lake.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Three space-separated integers: N, M, and K
\par 
\par * Lines 2..K+1: Line i+1 describes one submerged location with two}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         space separated integers that are its row and column: R and C
\par 
\par SAMPLE INPUT (file lake.in):
\par 
\par 3 4 5
\par 3 2
\par 2 2
\par 3 1
\par 2 3
\par 1 1
\par 
\par INPUT DETAILS:
\par 
\par The farm is a grid with three rows and four columns; five of the cells}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 are submerged. They are located in the positions (row 3, column 2);}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
(row 2, column 2); (row 3, column 1); (row 2, column 3); (row 1,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 column 1):
\par               # . . .
\par               . # # .
\par               # # . .
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The number of cells that the largest lake contains.
\par 
\par SAMPLE OUTPUT (file lake.out):
\par 
\par 4
\par 
\par OUTPUT DETAILS:
\par 
\par The largest lake consists of the input's first four cells.
\par 
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
This is one of the incarnations of the absolute classic 'flood fill' problems. The goal is to figure out which squares are 4-connected (no diagonals) to a given square. 
\par The solution relies on simple scanning of the 'lake' looking for water spots. When one is found, a count is commenced for that spot and, recursively, its neighbors (see the four invocations of 'lsiz
e' inside 'lsize' itself). Each spot that is scanned is marked so that scanning will not be attempted for that spot again. Thus, the algorithm is linear in the number of squares scanned, O(R*C). 
\par One can implement a queue for scanning (a sort of 'breadth-f
irst' approach) or use simple recursion as the solution below indicates. Simple recursion works because the 'marking' occurs before any of the recursive calls, each of which is conditional on checking the 'marking'. 
\par The solution here is clever in that it creates a buffer zone of 'marked' (i.e., 0-valued) squares around the input matrix. Thus no range- or bounds-checking is required to ensure that the test for 4-connectedness stays in the legal range. 
\par Here is coach Dr. Brian Dean's solution: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <stdio.h>
\par #include <stdlib.h>
\par #define MAX(a,b) ((a) > (b) ? (a) : (b))
\par #define MAX_N 100
\par 
\par int N, M, K, map[MAX_N+2][MAX_N+2];
\par 
\par int lsize(int i, int j) \{
\par     int a = 1;          /* this square gets single count */
\par     map[i][j] = 0;
\par     if (map[i][j-1]) a += lsize(i,j-1);
\par     if (map[i][j+1]) a += lsize(i,j+1);
\par     if (map[i-1][j]) a += lsize(i-1,j);
\par     if (map[i+1][j]) a += lsize(i+1,j);
\par     return a;
\par \}
\par 
\par int main(void) \{
\par     FILE *fp;
\par     int i, j, k, best=0;
\par 
\par     fp = fopen ("lake.in", "r");
\par     fscanf (fp, "%d %d %d", &N, &M, &K);
\par     for (k=0; k<K; k++) \{
\par         fscanf (fp, "%d %d", &i, &j);
\par         map[i][j] = 1;
\par     \}
\par     fclose (fp);
\par 
\par     for (i=1; i<=N; i++)
\par         for (j=1; j<=M; j++)
\par             if (map[i][j])
\par                 best = MAX (best, lsize(i,j));
\par 
\par   fp = fopen ("lake.out", "w");
\par   fprintf (fp, "%d\\n", best);
\par   fclose (fp);
\par 
\par   return 0;
\par \}
\par 
\par 
\par }\pard\plain \s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248255}SILVER PROBLEMS{\*\bkmkend _Toc188248255}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 **********************************************************************}{\insrsid9007534 *******}{\insrsid11289134\charrsid2631230 
\par                
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248256}Cow Hurdles [Neal Wu, 2007]{\*\bkmkend _Toc188248256}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
\par Farmer John wants the cows to prepare for the county jumping}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 competition, so Bessie and the gang are practicing jumping over}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
hurdles. They are getting tired, though, so they want to be able}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 to use as little energy as possible to jump over the hurdles.
\par 
\par Obviously, it is not very difficult for a cow to jump over several}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 very short hurdles, but one tall hurdle can be very stressful. Thus,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
the cows are only concerned about the height of the tallest hurdle}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 they have to jump over.
\par 
\par The cows' practice room has N (1 <= N <= 300) stations, conveniently}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 labeled 1..N. A set of M (1 <= M <= 25,000) one-way paths connects}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
pairs of stations; the paths are also conveniently labeled 1..M.}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 Path i travels from station S_i to station E_i and contains exactly}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
one hurdle of height H_i (1 <= H_i <= 1,000,000). Cows must jump}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 hurdles in any path they traverse.
\par 
\par The cows have T (1 <= T <= 40,000) tasks to complete. Task i comprises}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 two distinct numbers, A_i and B_i (1 <= A_i <= N; 1 <= B_i <= N),}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
which connote that a cow has to travel from station A_i to station}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 B_i (by traversing over one or more paths over some route). The}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
cows want to take a path the minimizes the height of the tallest}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 hurdle they jump over when traveling from A_i to B_i. Your job is to}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
write a program that determines the path whose tallest hurdle is}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 smallest and report that height.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Three space-separated integers: N, M, and T
\par 
\par * Lines 2..M+1: Line i+1 contains three space-separated integers: S_i,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         E_i, and H_i
\par 
\par * Lines M+2..M+T+1: Line i+M+1 contains two space-separated integers}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         that describe task i: A_i and B_i
\par 
\par SAMPLE INPUT (file hurdles.in):
\par 
\par 5 6 3
\par 1 2 12
\par 3 2 8
\par 1 3 5
\par 2 5 3
\par 3 4 4
\par 2 4 8
\par 3 4
\par 1 2
\par 5 1
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Lines 1..T: Line i contains the result for task i and tells the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         smallest possible maximum height necessary to travel between the stations. Output -1 if it is impossible to travel between}{
\insrsid9007534  }{\insrsid11289134\charrsid2631230 the two stations.
\par 
\par SAMPLE OUTPUT (file hurdles.out):
\par 
\par 4
\par 8
\par -1
\par 
\par OUTPUT DETAILS:
\par 
\par Query #1: The best way is to simply travel on the path from station 3 to
\par station 4.
\par Query #2: There is a path from station 1 to station 2, but a better way
\par would be to travel from station 1 to station 3 and then to station 2.
\par Query #3: There are no paths that start at station 5, so it is clear that
\par there is no way to reach station 1 from station 5.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
First of all, it is clear that this problem can be converted into a (directed) graph, and for each of the T queries, we wish to find the shortest path between two nodes A and B.
\par One possible solution is for every query, use either a single-source shortest path algorithm (such as Dijkstra) or do a depth-first search to find the shortest path. However, this can take up to O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 2}{
\f2\fs20\insrsid11289134\charrsid9007534 ) time for each query, and would then have a total running time of O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 2}{\f2\fs20\insrsid11289134\charrsid9007534  T), which is too la
rge for this problem's constraints.
\par Thus we instead want to find a way to precompute all of the shortest paths beforehand. We do this by initializing all distances between two nodes A and B to the cost of the edge between A and B, or infinity if no such ed
ge exists. Then we run the standard Floyd-Warshall algorithm (more info can be found in the Training pages or }{\field\fldedit{\*\fldinst {\insrsid4082891 HYPERLINK "http://en.wikipedia.org/wiki/Floyd-Warshall_algorithm"}}{\fldrslt {
\cs19\f2\fs20\ul\cf2\insrsid11289134\charrsid9007534 here}}}{\f2\fs20\insrsid11289134\charrsid9007534 ) to compute the shortest paths, with one difference: If cost (a, b, c,...
) represents the cost of traveling from a to b and then from b to c, etc., then instead of
\par cost (i, j, k) = cost (i, j) + cost (j, k)
\par we now have
\par cost (i, j, k) = max (cost (i, j), cost (j, k)).
\par (The proof that this method does correctly find the shortest path is left to the reader.)
\par Another possibility is to compute the all-pairs shortest path beforehand with a different method, such as doing Dijkstra from each node. However, this is still O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 3}{
\f2\fs20\insrsid11289134\charrsid9007534 ) and has a slightly higher constant factor.
\par After computing th
e all-pairs shortest paths, we then input each query and output the result (in constant time for each query). Note that if the distance between A and B is still infinity after running the shortest path algorithm, it means that no path exists from A to B, 
so we output -1.
\par Our total running time is thus O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 3}{\f2\fs20\insrsid11289134\charrsid9007534  + T), since the Floyd-Warshall takes O(N}{\f2\fs20\super\insrsid11289134\charrsid9007534 3}{
\f2\fs20\insrsid11289134\charrsid9007534 ) time to compute the shortest paths, and each query takes O(1) time.
\par The following is a solution using this idea:
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <cstdio>
\par #include <cstring>
\par using namespace std;
\par 
\par FILE *fout = fopen ("hurdles.out", "w");
\par FILE *fin = fopen ("hurdles.in", "r");
\par 
\par const int INF = 1000000000;
\par const int MAXN = 505;
\par 
\par int N, M, T;
\par int dist [MAXN][MAXN];
\par 
\par inline void minimize (int &a, int b) \{ if (b < a) a = b; \}
\par 
\par int main () \{
\par     // initialize to 'infinity'
\par     memset (dist, 63, sizeof (dist));
\par 
\par     fscanf (fin, "%d %d %d", &N, &M, &T);
\par 
\par     int a, b, c;
\par 
\par     // input data
\par     for (int i = 0; i < M; i++) \{
\par \tab fscanf (fin, "%d %d %d", &a, &b, &c);
\par         a--, b--;   // use 0-based indexing
\par         dist [a][b] <?= c;
\par     \}
\par 
\par     // compute the shortest paths using Floyd-Warshall
\par     for (int k = 0; k < N; k++)
\par         for (int i = 0; i < N; i++)
\par \tab     if (dist [i][k] < INF)
\par \tab \tab for (int j = 0; j < N; j++)
\par \tab \tab     minimize (dist [i][j], dist [i][k] >? dist [k][j]);
\par 
\par     // output results
\par     for (int i = 0; i < T; i++) \{
\par \tab fscanf (fin, "%d %d", &a, &b);
\par         a--, b--;
\par \tab fprintf (fout, "%d\\n", dist [a][b] < INF ? dist [a][b] : -1);
\par     \}
\par 
\par     return 0;
\par \}
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248257}Milking Time [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248257}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
\par Bessie is such a hard-working cow. In fact, she is so focused on}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 maximizing her productivity that she decides to schedule her next}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
N (1 <= N <= 1,000,000) hours (conveniently labeled 0..N-1) so that}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 she produces as much milk as possible.
\par 
\par Farmer John has a list of M (1 <= M <= 1,000) possibly overlapping}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 intervals in which he is available for milking. Each interval i has}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
a starting hour (0 <= starting_hour_i < N), an ending hour}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 (starting_hour_i < ending_hour_i <= N), and a corresponding efficiency}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 (1 <= ef
ficiency_i <= 1,000,000) which indicates how many gallons}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 of milk that he can get out of Bessie in that interval. Farmer John}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
starts and stops milking at the beginning of the starting hour and}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 ending hour, respectively. When being milked, Bessie must be milked}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
through an entire interval.
\par 
\par Even Bessie has her limitations, though. After being milked during}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 any interval, she must rest R (1 <= R <= N) hours before she can}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
start milking again. Given Farmer Johns list of intervals, determine}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 the maximum amount of milk that Bessie can produce in the N hours.}{\insrsid11289134 
\par }{\insrsid9007534\charrsid2631230 
\par }{\insrsid11289134\charrsid2631230 INPUT FORMAT:
\par 
\par * Line 1: Three space-separated integers: N, M, and R
\par 
\par * Lines 2..M+1: Line i+1 describes FJ's ith milking interval with}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         three space-separated integers: starting_hour_i,}{\insrsid9007534  e}{\insrsid11289134\charrsid2631230 nding_hour_i, a
nd efficiency_i
\par 
\par SAMPLE INPUT (file milkprod.in):
\par 
\par 12 4 2
\par 1 2 8
\par 10 12 19
\par 3 6 24
\par 7 10 31
\par 
\par INPUT DETAILS:
\par 
\par Bessie wants to schedule the next 12 hours; Farmer John has four}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 intervals in which he can milk her; Bessie must rest 2 hours after}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
every milking. The first interval lasts from hour 1 to hour 2, the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 second from hour 10 to hour 12, the third from hour 3 to hour 6,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
and the fourth from hour 7 to hour 10. Farmer John can get 8, 19,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 24, and 31 gallons of milk, respectively, from Bessie in those}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 intervals.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The maximum number of gallons of milk that Bessie can
\par         product in the N hours
\par 
\par SAMPLE OUTPUT (file milkprod.out):
\par 
\par 43
\par 
\par OUTPUT DETAILS:
\par 
\par If Bessie uses the first interval, she cannot use the third because}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 she needs 2 hours of rest. If she uses the second, she cannot use}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
the fourth.  Lastly, if she uses the third, she cannot use the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 fourth. The best situation is choosing the second and third intervals,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
producing 43 gallons of milk.
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid6967064 
The goal of this problem is to select a disjoi
nt set of intervals having maximum total efficiency. The technical term for such a problem would be to find a maximum-efficiency "packing" of intervals. If the intervals all have the same efficiency (i.e., if we simply want to select a maximum number of d
i
sjoint intervals), then this is a rather well-known problem with a simple greedy solution: repeatedly choose the interval ending earliest, remove all the intervals it overlaps from consideration, and repeat. Since our problem is a more complicated "weight
ed" version of this problem, however, we can no longer use a simple greedy approach, and we need to use dynamic programming instead. 
\par We begin by sorting the intervals according to their ending times. Let E(j) denote the maximum efficiency we can obtain by 
a disjoint collection of just intervals i...j. We will compute E(1), E(2), ..., E(n) in order. When it comes time to compute E(j), this will be easy since we will have already computed E(1) ... E(j-1). Here is the formula: 
\par E(j) = max(E(j-1), j.efficiency + max\{E(i) : i
\par <="j.start\})" i.end and> What does this mean? Well, the optimal solution for intervals 1...j either includes interval j or it doesn't. To cover both cases, we take the best of two solutions: the best solution for intervals 1...j that _doesn'
t_ contain j, and the best solution for intervals 1...j that _does_ contain j. In the first case, the optimal solution value is just E(j-1), since we only get to use intervals 1...j-1. In the second case, we get to count the efficiency of interval j towar
ds our total value, and then we finish off our solution by adding in E(i) for the "best" preceding interval i (where we only consider those intervals i ending before j starts). 
\par A straightforward application of the formula above to compute E(1), E(2), ..., E(n) gives us an O(n^2) running time, which is fine for this problem. With a bit of extra cleverness, we can actually get the running time down to O(n log n). 
\par If you would like to test whether or not you understand the principle behind this solution well,
 consider the following related problem: you are given n intervals that collectively cover the range 0....1,000,000, where each interval has an associated cost. Your goal is to find a minimum-cost subset of the intervals that still covers the range 0....1
,000,000. Target running time: O(n^2), or O(n log n) if you are extra clever. 
\par Here is an O(n^2) solution to the milking time problem by Brian Dean: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <stdio.h>
\par #include <stdio.h>
\par #define MAX_M 1000
\par 
\par typedef struct \{
\par   int start;
\par   int end;
\par   int efficiency;
\par \} Interval;
\par 
\par Interval I[MAX_M];
\par int N, M, K, Best[MAX_M];
\par 
\par static int Icomp(const void *p1, const void *p2)
\par \{
\par   Interval *I1 = (Interval *)p1;
\par   Interval *I2 = (Interval *)p2;
\par   return I1->end - I2->end;
\par \}
\par 
\par int main(void)
\par \{
\par   int i, j, best=-1;
\par   FILE *fp;
\par 
\par   fp = fopen ("milkprod.in", "r");
\par   fscanf (fp, "%d %d %d", &N, &M, &K);
\par   for (i=0; i<M; i++)
\par     fscanf (fp, "%d %d %d", &I[i].start, &I[i].end, &I[i].efficiency);
\par   fclose (fp);
\par   
\par   qsort (I, M, sizeof(Interval), Icomp);
\par   for (j=0; j<M; j++) \{
\par     Best[j] = I[j].efficiency;
\par     for (i=0; i<j; i++)
\par       if (I[i].end + K <= I[j].start && Best[i] + I[j].efficiency > Best[j])
\par         Best[j] = Best[i] + I[j].efficiency;
\par     if (Best[j] > best) best = Best[j];
\par   \}
\par 
\par   fp = fopen ("milkprod.out", "w");
\par   fprintf (fp ,"%d\\n", best);
\par   fclose (fp);
\par \} 
\par 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248258}Best Cow Line [Christos Tzamos, 2007]{\*\bkmkend _Toc188248258}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
\par FJ is about to take his N (1 <= N <= 2,000) cows to the annual}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 "Farmer of the Year" competition. In this contest every farmer}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
arranges his cows in a line and herds them past the judges.
\par 
\par The contest organizers adopted a new registration scheme this year:}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 simply register the initial letter of every cow in the order they}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
will appear (i.e., If FJ takes Bessie, Sylvia, and Dora in that}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 order he just registers BSD). After the registration phase ends,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
every group is judged in increasing lexicographic order according}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 to the string of the initials of the cows' names.
\par 
\par FJ is very busy this year and has to hurry back to his farm, so he}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 wants to be judged as early as possible. He decides to rearrange}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
his cows, who have already lined up, before registering them.
\par 
\par FJ marks a location for a new line of the competing cows. He then}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 proceeds to marshal the cows from the old line to the new one by}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
repeatedly sending either the first or last cow in the (remainder}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 of the) original line to the end of the new line. When he's finished,}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 
FJ takes his cows for registration in this new order.
\par 
\par Given the initial order of his cows, determine the least lexicographic}{\insrsid9007534   }{\insrsid11289134\charrsid2631230 string of initials he can make this way.
\par 
\par PROBLEM NAME: bcl
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: A single integer: N
\par 
\par * Lines 2..N+1: Line i+1 contains a single initial ('A'..'Z') of the}{\insrsid9007534  }{\insrsid11289134\charrsid2631230         cow in the ith position in the original line
\par 
\par SAMPLE INPUT (file bcl.in):
\par 
\par 6
\par A
\par C
\par D
\par B
\par C
\par B
\par 
\par INPUT DETAILS:
\par 
\par FJ has 6 cows in this order: ACDBCB
\par 
\par OUTPUT FORMAT:
\par 
\par The least lexicographic string he can make. Every line (except perhaps}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 the last one) contains the initials of 80 cows ('A'..'Z') in the new}{\insrsid9007534  }{\insrsid11289134\charrsid2631230 line.

\par 
\par SAMPLE OUTPUT (file bcl.out):
\par 
\par ABCBCD
\par 
\par OUTPUT DETAILS:
\par 
\par   Step   Original     New
\par    #1     ACDBCB
\par    #2      CDBCB     A
\par    #3      CDBC      AB
\par    #4      CDB       ABC
\par    #5      CD        ABCB
\par    #6       D        ABCBC
\par    #7                ABCBCD
\par 
\par }\pard\plain \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid6967064 This problem can be solved with dynamic programming on the intervals of cows but there is also a simple greedy strategy. \line \line 
Between the two cows in the edges, you must always pick the cow with the smallest initial letter. If both cows have the same initial letter in order to decide you must look a little bit
 deeper and check the second cows in the line's edges or the third ones if those are equal and so on until you find two cows that are different. Then you pick the cow from the s}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid6967064 ide of the smallest one. 
\line \line This }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid6967064 process can be summarized as follows. \line \line At any given interval [a,b] with string S([a,b]) you choose: \line \line Cow a if S([a,b]) < rev( S([a,b]) )\line 
Cow b otherwise \line where rev(S) is the reverse string e.g. rev("abc") = "cba" \line \line This can be implemented in O(N^2) but we can achieve O(NlogN) by using suffix arrays. \line \line Here are the two implementations: \line \line The O(N^2) 
\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include<cstdio>
\par 
\par char S[2010],ln=0;
\par 
\par void prnt(char a) \{
\par \tab if(ln==80) \{printf("\\n");ln=0;\}
\par \tab printf("%c",a);ln++;
\par \}
\par 
\par int main() \{
\par \tab int i,j,N,pi,pj,val;
\par \tab freopen("bcl.in" ,"r",stdin );
\par \tab freopen("bcl.out","w",stdout);
\par \tab scanf("%d",&N);
\par \tab for(i=0;i<N;i++) scanf(" %c ",S+i);
\par \tab i=0,j=N-1;
\par \tab while(i<=j) \{
\par \tab \tab if(S[i]<S[j])\tab \tab \{prnt(S[i]);i++;\}
\par \tab \tab else if(S[i]>S[j])\tab \{prnt(S[j]);j--;\}
\par \tab \tab else \{
\par \tab \tab \tab pi=i+1;pj=j-1;val=S[i];
\par \tab \tab \tab while( pj-pi>1 && S[pi]==S[pj]) \{pi++,pj--;\}
\par \tab \tab \tab if(S[pi]<S[pj]) prnt(S[i]),i++;
\par \tab \tab \tab else prnt(S[j]),j--;
\par \tab \tab \}
\par \tab \}
\par \tab printf("\\n");
\par \tab return 0;
\par \}
\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\fs24\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 \line }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid9007534 And the O(NlogN) 

\par }\pard \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 
\par }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 #include<cstdio>
\par #include<cstring>
\par #include<cstdlib>
\par 
\par #define MAXN 500050
\par 
\par char S[2*MAXN];
\par int N,ln=0;
\par int o[2][2*MAXN], t[2*MAXN][2];
\par int A[2*MAXN], B[2*MAXN], C[2*MAXN], D[2*MAXN];
\par 
\par void prnt(char a) \{
\par \tab if(ln==80) \{printf("\\n");ln=0;\}
\par \tab printf("%c",a);ln++;
\par \}
\par 
\par int main() \{
\par \tab 
\par \tab int i, j, jj, x, k;
\par \tab 
\par \tab freopen("bcl.in" ,"r",stdin );
\par \tab freopen("bcl.out","w",stdout);
\par \tab scanf("%d",&N);
\par \tab for(i=0;i<N;i++) \{
\par \tab \tab scanf(" %c ",S+i);
\par \tab \tab S[N+i] = S[i];
\par \tab \}
\par 
\par \tab memset(A, 0, sizeof(A));
\par \tab for (i = 0; i < 2*N; ++i) A[(int)(S[i]-'A')] = 1;
\par \tab for (i = 1; i < 26; ++i) A[i] += A[i-1];
\par \tab for (i = 0; i < 2*N; ++i) o[0][i] = A[(int)(S[i]-'A')];
\par \tab x=0;
\par \tab for (j = 0, jj = 1, k = 0; jj < N && k < 2*N; ++j, jj <<= 1) \{
\par 
\par \tab \tab memset(A, 0, sizeof(A));
\par \tab \tab memset(B, 0, sizeof(B));
\par 
\par \tab \tab for (i = 0; i < N; ++i) \{
\par \tab \tab \tab ++A[ t[i][0] = o[x][i] ];
\par \tab \tab \tab ++B[ t[i][1] = (i+jj<N) ? o[x][i+jj] : 0 ];
\par \tab \tab \}
\par \tab \tab 
\par \tab \tab for (i = N; i < 2*N; ++i) \{
\par \tab \tab \tab ++A[ t[i][0] = o[x][i] ];
\par \tab \tab \tab ++B[ t[i][1] = (i-jj>=N) ? o[x][i-jj] : 0 ];
\par \tab \tab \}
\par 
\par \tab \tab for (i = 1; i <= 2*N; ++i) \{
\par \tab \tab \tab A[i] += A[i-1];
\par \tab \tab \tab B[i] += B[i-1];
\par \tab \tab \}
\par 
\par \tab \tab for (i = 2*N-1; i >= 0; --i)
\par \tab \tab \tab C[--B[t[i][1]]] = i;
\par 
\par \tab \tab for (i = 2*N-1; i >= 0; --i)
\par \tab \tab \tab D[--A[t[C[i]][0]]] = C[i];
\par 
\par \tab \tab x ^= 1;
\par \tab \tab o[x][D[0]] = k = 1;
\par \tab \tab for (i = 1; i < 2*N; ++i)
\par \tab \tab \tab o[x][D[i]] = (k += (t[D[i]][0] != t[D[i-1]][0] || t[D[i]][1] != t[D[i-1]][1]));
\par 
\par \tab \}
\par \tab i=0,j=N-1;
\par \tab while(i<=j) \{
\par \tab \tab if(S[i]<S[j])\tab \tab \{prnt(S[i]);i++;\}
\par \tab \tab else if(S[i]>S[j])\tab \{prnt(S[j]);j--;\}
\par \tab \tab else if(o[x][i]<o[x][N+j]) \{prnt(S[i]);i++;\}
\par \tab \tab else \{prnt(S[j]);j--;\}
\par \tab \}
\par \tab printf("\\n");
\par \tab return 0;
\par \}
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
\par }\pard\plain \s2\qc \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid9007534 
\par 
\par }{\insrsid11289134\charrsid2631230 {\*\bkmkstart _Toc188248259}GOLD PROBLEMS{\*\bkmkend _Toc188248259}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 **************************************************************}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534 *******}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 ********
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248260}Telephone Wire [Jeffrey Wang, 2007]{\*\bkmkend _Toc188248260}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par Farmer John's cows are getting restless about their poor telephone}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 service; they want FJ to replace the old telephone wire with new,}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 more efficient wire. The new wiring will utilize N (2 <= N <=}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 100,000) already-installed telephone poles, each with some height_i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
meters (1 <= height_i <= 100). The new wire will connect the tops}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 of each pair of adjacent poles and will incur a penalty cost C *}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 the two poles' height difference for each section of wire where the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 poles are of different heights (1 <= C <= 100). The poles, of course,}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
are in a certain sequence and can not be moved.}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534   }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 Farmer John figures that if he makes some poles taller he can reduce}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 his penalties, though with some other additional cost. He can add}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 an integer X number of meters to a pole at a cost of X^2.
\par 
\par Help Farmer John determine the cheapest combination of growing pole}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 heights and connecting wire so that the cows can get their new and}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 improved service.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: N and C
\par 
\par * Lines 2..N+1: Line i+1 contains a single integer: height_i
\par 
\par SAMPLE INPUT (file telewire.in):
\par 
\par 5 2
\par 2
\par 3
\par 5
\par 1
\par 4
\par 
\par INPUT DETAILS:
\par 
\par There are 5 telephone poles, and the vertical distance penalty is}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 $2/meter. The poles initially have heights of 2, 3, 5, 1, and 4,}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 respectively.
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: The minimum total amount of money that it will cost Farmer}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         John to attach the new telephone wire.
\par 
\par SAMPLE OUTPUT (file telewire.out):
\par 
\par 15
\par 
\par OUTPUT DETAILS:
\par 
\par The best way is for Farmer John to raise the first pole by 1 unit and the}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 fourth pole by 2 units, making the heights (in 
order) 3, 3, 5, 3, and 4.}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 This costs $5. The remaining wiring will cost $2*(0+2+2+1) = $10, for a
\par total of $15.
\par 
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
Let H[i] be the original height of the i-th pole, and let f(n, h) be the minimum cost for n poles with the n-th pole having height h. Then: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid9007534 f(n, h) = min \{ (H[i]-h)^2 + f(n-1, h') + C|h'-h| \} for all h'
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
With a straightforward dynamic programming implementation, this runs in O(N*H}{\f2\fs20\super\insrsid11289134\charrsid9007534 2}{\f2\fs20\insrsid11289134\charrsid9007534 
), where H is the maximum height. However, by splitting up the recurrence relation into two cases, one where h' >= h and one where h' < h, we can rewrite it as: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid9007534 f(n, h) = (H[i]-h)^2 + min \{ -C*h + min \{ f(n-1, h')+C*h' \} (for h' >= h),
\par                               C*h + min \{ f(n-1, h')-C*h' \} (for h' < h) \}
\par 
\par Define low(n, h)  := min over h' >= h \{ f(n, h')+C*h' \}
\par    and high(n, h) := min over h' < h  \{ f(n, h')-C*h' \}
\par 
\par Then f(n, h) = (H[i]-h)^2 + min \{ -C*h+low(n-1, h), C*h+high(n-1, h) \}
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid9007534 
low(n, h) and high(n, h) for all n, h can be computed in O(N*H) time; thus f(n, h) can be computed in O(N*H) time as well. A final 
implementation detail: an array of size O(N*H) exceeds the the memory limit, but only two "rows" of the DP table are needed at a time, so an array of size 2*H is sufficient. 
\par Below is Richard Peng's solution: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <cstdio>
\par 
\par #define MAXN 110000
\par #define MAXH 101
\par 
\par int h[MAXN], bes[2][MAXH], ans, huge, bes1, c, n;
\par 
\par inline int sqr (int x)\{return x*x; \}
\par 
\par int main ()\{
\par     int i, j, pre, cur;
\par     freopen ("telewire.in", "r", stdin);
\par     freopen ("telewire.out", "w", stdout);
\par     huge = 2100000000;
\par     scanf ("%d%d", &n, &c);
\par     for (i = 0; i<n; i++)    scanf ("%d\\n", &h[i]);
\par     for (i = 0; i<MAXH; i++)
\par         bes[0][i] = (i> = h[0]) ? sqr(h[0]-i) : huge;
\par     for (i = 1; i<n; i++)\{
\par         pre = (i+1)%2;
\par         cur = i%2;
\par         for (bes1 = huge, j = 0; j<MAXH; j++)\{
\par             bes1 <?= bes[pre][j]-j*c;
\par             bes[cur][j] = bes1+j*c;
\par         \}
\par         for (bes1 = huge, j = MAXH-1; j> = 0; j--)\{
\par             bes1 <?= bes[pre][j]+j*c;
\par             bes[cur][j] <?= bes1-j*c;
\par         \}
\par         for (j = 0; j<MAXH; j++)
\par             bes[cur][j] = (j> = h[i])? (bes[cur][j] + sqr(j-h[i])) : huge;
\par     \}
\par     ans = huge;
\par     for (i = 0; i<MAXH; i++) ans<? = bes[cur][i];
\par     printf ("%d\\n", ans);
\par     return 0;
\par \}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248261}Cow Relays [Erik Bernhardsson, 2003]{\*\bkmkend _Toc188248261}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par For their physical fitness program, N (2 <= N <= 1,000,000) cows}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 have decided to run a relay race using the T (2 <= T <= 100) cow}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 trails throughout the pasture.
\par 
\par Each trail connects two different intersections (1 <= I1_i <= 1,000;}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 1 <= I2_i <= 1,000), each of which is the termination for at least}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 two trails. The cows know the length_i of each trail (1 <= length_i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 <= 1,000), the two intersections the trail connects, and they know}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
that no two intersections are directly connected by two different}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 trails. The trails form a structure known mathematically as a graph.

\par 
\par To run the relay, the N cows position themselves at various}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 intersections (some intersections might have more than one cow).}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 They must position themselves properly so that they can hand off}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 the baton cow-by-cow and end up at the proper finishing place.
\par 
\par Write a program to help position the cows. Find the shortest path}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 that connects the starting intersection (S) and the ending intersection}
{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 (E) and traverses exactly N cow trails.
\par 
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Four space-separated integers: N, T, S, and E
\par 
\par * Lines 2..T+1: Line i+1 describes trail i with three space-separated}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         integers: length_i, I1_i, and I2_i
\par 
\par SAMPLE INPUT (file relays.in):
\par 
\par 2 6 6 4
\par 11 4 6
\par 4 4 8
\par 8 4 9
\par 6 6 8
\par 2 6 9
\par 3 8 9
\par 
\par 
\par OUTPUT FORMAT:
\par 
\par * Line 1: A single integer that is the shortest distance from}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         intersection S to intersection E that traverses exactly N cow}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534   }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         trails.
\par 
\par SAMPLE OUTPUT (file relays.out):
\par 
\par 10
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid6967064 
First, note that there cannot be more than T distinct nodes in our graph, because there are exactly T edges in the graph, and each node is an endpoint for at least two edges.
\par The simplest solution that is reasonably fast is to let s[L][V] be the shortest path from node S to node V that has length L. We can compute the values in this ar
ray by iterating N times, each time trying to travel through one edge from each node. The memory for this can be reduced by using a sliding window (since computing the values for length L only uses the values for length L - 1), and this solution uses O(N 
T}{\f2\fs20\super\insrsid11289134\charrsid6967064 2}{\f2\fs20\insrsid11289134\charrsid6967064 ) time. To obtain a faster solution, we do the following.
\par Assume we have the shortest path, from S to E, of length N. Then we can break up this path into smaller paths whose lengths are powers of two. Thus, we can compute, for each power of two that is no
 greater than N, the shortest path between every pair of nodes that has a length of that power of two. This can be done using a method similar to Floyd-Warshall in O(T}{\f2\fs20\super\insrsid11289134\charrsid6967064 3}{
\f2\fs20\insrsid11289134\charrsid6967064  log N) time. (See the code below for more details.)
\par After we compute the shortest paths
 mentioned above, we can compute shortest paths, of length N, from S to every other node. We do this by breaking N up into its binary representation, and for each power of two that occurs, we compute shortest paths after adding in paths of length equal to
 this power. This can be done in O(T}{\f2\fs20\super\insrsid11289134\charrsid6967064 2}{\f2\fs20\insrsid11289134\charrsid6967064  log N) time. (Again, see the code below for more details.) Thus, our overall runtime is O(T}{
\f2\fs20\super\insrsid11289134\charrsid6967064 3}{\f2\fs20\insrsid11289134\charrsid6967064  log N).
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <cstdio>
\par #include <cstring>
\par using namespace std;
\par 
\par FILE *fout = fopen ("relays.out", "w");
\par FILE *fin = fopen ("relays.in", "r");
\par 
\par const int INF = 1000000000;
\par const int MAXV = 105;
\par const int MAXI = 1005;
\par const int MAXL = 20;
\par 
\par int N, V, T, S, E;
\par 
\par // compress nodes to smaller values
\par int change [MAXI];
\par 
\par // shortest path between two nodes with a length of a power of two
\par int dist [MAXL][MAXV][MAXV];
\par 
\par // best path from S to a node
\par int best [MAXV], best2 [MAXV];
\par 
\par // change a node to a 'compressed' value
\par inline void check (int &ind)
\par \{
\par     if (change [ind] == -1)
\par         change [ind] = V++;
\par 
\par     ind = change [ind];
\par \}
\par  
\par int main () \{
\par // initialize arrays
\par     memset (change, -1, sizeof (change));
\par     memset (dist, 63, sizeof (dist));
\par     memset (best, 63, sizeof (best));
\par 
\par     fscanf (fin, "%d %d %d %d", &N, &T, &S, &E);
\par 
\par     check (S);
\par     check (E);
\par 
\par     for (int i = 0; i < T; i++) \{
\par         int A, B, L;
\par 
\par         fscanf (fin, "%d %d %d", &L, &A, &B);
\par 
\par         check (A);
\par         check (B);
\par 
\par // edges are paths of length 1
\par         dist [0][A][B] <?= L;
\par         dist [0][B][A] <?= L;
\par     \}
\par 
\par // compute shortest paths whose lengths are powers of two
\par // a path of length 2^p can be made by two paths of length 2^(p - 1)
\par     for (int p = 1; (1 << p) <= N; p++)
\par         for (int i = 0; i < V; i++)
\par             for (int j = 0; j < V; j++)
\par                 if (dist [p - 1][i][j] < INF)
\par                     for (int k = 0; k < V; k++)
\par                         if (dist [p - 1][i][j] + dist [p - 1][j][k] < dist [p][i][k])
\par                             dist [p][i][k] = dist [p - 1][i][j] + dist [p - 1][j][k];
\par 
\par 
\par // combine results of each power of two in the binary representation of N
\par     best [S] = 0;
\par 
\par     for (int p = 0; (1 << p) <= N; p++)
\par         if (N & (1 << p)) \{
\par // use a temporary array 'best2' to hold the new values, and copy them to the old array afterward
\par             memset (best2, 63, sizeof (best2));
\par 
\par             for (int i = 0; i < V; i++)
\par                 if (best [i] < INF)
\par                     for (int j = 0; j < V; j++)
\par                         if (best [i] + dist [p][i][j] < best2 [j])
\par                             best2 [j] = best [i] + dist [p][i][j];
\par 
\par             memcpy (best, best2, sizeof (best2));
\par         \}
\par 
\par // best [E] is now the shortest path from S to E using N edges
\par     fprintf (fout, "%d\\n", best [E]);
\par 
\par     return 0;
\par \}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par 
\par }\pard\plain \s3\qc \li0\ri0\sb200\sl276\slmult1\keep\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6967064 \b\f38\fs22\cf18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 
{\*\bkmkstart _Toc188248262}Sunscreen [Russ Cox, 2001]{\*\bkmkend _Toc188248262}
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par To avoid unsightly burns while tanning, each of the C (1 <= C <=}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 2500) cows must cover her hide with sunscreen when they're at the}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 beach. Cow i has a minimum and maximum SPF rating (1 <= minSPF_i}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 <= 1,000; minSPF_i <= maxSPF_i <= 1,000) that will work. If the SPF}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
rating is too low, the cow suffers sunburn; if the SPF rating is}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 too high, the cow doesn't tan at all.
\par 
\par The cows have a picnic basket with L (1 <= L <= 2500) bottles of}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 sunscreen lotion, each bottle i with an SPF rating SPF_i (1 <= SPF_i}{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 <= 1,000). Lotion bottle i can cover cover_i cows with lotion. A}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid9007534  }{
\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 cow may lotion from only one bottle.
\par 
\par What is the maximum number of cows that can protect themselves}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7895457  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 while tanning given the available lotions?
\par 
\par PROBLEM NAME: tanning
\par 
\par INPUT FORMAT:
\par 
\par * Line 1: Two space-separated integers: C and L
\par 
\par * Lines 2..C+1: Line i describes cow i's lotion requires with two}{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7895457  }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         integers: minSPF_i and maxSPF_i
\par 
\par * Lines C+2..C+L+1: Line i+C+1 describes a sunscreen lotion bottle }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid7895457 I }{\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230         with space-separated integers: SPF_i and cover_i
\par 
\par SAMPLE INPUT (file tanning.in):
\par 
\par 3 2
\par 3 10
\par 2 5
\par 1 5
\par 6 2
\par 4 1
\par 
\par INPUT DETAILS:
\par 
\par 3 cows; 2 lotions.  Cows want SPF ratings of 3..10, 2..5, and 1..5. Lotions
\par available: 6 (for two cows), 4 (for 1 cow).  Cow 1 can use the SPF 6 lotion.
\par Either cow 2 or cow 3 can use the SPF 4 lotion.  Only 2 cows can be covered.
\par 
\par OUTPUT FORMAT:
\par 
\par A single line with an integer that is the maximum number of cows that
\par can be protected while tanning
\par 
\par SAMPLE OUTPUT (file tanning.out):
\par 
\par 2
\par 
\par }\pard\plain \s18\qj \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs20\insrsid11289134\charrsid6967064 
This problem is solvable by a simple greedy algorithm: consider the bottles of sunscreen in increasing order of SPF, and assign each one (if possible) to the cow having the lowest maxSPF rating. 
\par Why does this give an optimal solution? Let B denote a bottle of sunscreen with the lowest SPF rating. If no cow is compatible with B, t
hen clearly B cannot be assigned in any solution, so we can ignore B. Otherwise, let C be the cow having lowest maxSPF rating that is compatible with B. We claim that there is always an optimal solution in which C is paired with B, so it is "safe" to make
 
this assignment as our algorithm progresses (i.e., it will never make a wrong decision and end up in a situation where an optimal solution is no longer reachable). To see this, suppose there is an optimal solution S where C is _not_ paired with B, and con
sider a few cases: 
\par (i) C and B are both unassigned in S. This case cannot happen, since we could assign C with B and obtain an even better solution, contradicting the optimality of S. 
\par (ii) C is assigned in S but B is not. Here, by reassigning C to B, we obtain an equally-good solution in which C and B are assigned. 
\par (iii) B is assigned in S but C is not. Same as (ii), only we reassign B. 
\par (iv) C and B are both assigned in S. Let B' be the bottle assigned to C, and C' be the cow assigned to B. Here, you can check that it is valid to reassign C with B and C' with B', giving us an equally good assignment in which C and B are assigned. 
\par Hence, an optimal solution always exists in which C and B are paired, so it is safe to match them together. 
\par An alternate, sym
metric, solution to this problem is the following: process the cows in increasing order of maxSPF, and for each cow C in sequence, assign C to the minimum SPF bottle compatible with C. The analysis of this approach follows essentially the same reasoning a
s above. 
\par In terms of running time, one can implement either of the two algorithms above in O(n log n) time. One way to do this is the following (in the case of the first algorithm above): We first sort the bottles by SPF rating and the cows by minSPF ratin
g. We then scan the bottles in order and maintain a min-heap on the cows (keyed on maxSPF) with minSPF lower than the SPF of our current bottle. For each bottle B in order, we match it with the minimum cow from the heap (after first removing any cows from
 the heap having maxSPF less than the SPF of B). 
\par Here is a sample C++ solution written by Richard Peng: 
\par }\pard\plain \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11289134\charrsid2631230 #include <cstdio>
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\insrsid11289134\charrsid2631230 
#include <cstring>
\par }\pard \s16\qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\insrsid11289134\charrsid2631230 
#include <cstdlib>
\par #include <algorithm>
\par #include <queue>
\par using namespace std;
\par 
\par #define MAXN 20000
\par 
\par int n,m,ans;
\par pair<int,int> cow[MAXN],lotion[MAXN];
\par 
\par priority_queue<int> q;
\par 
\par void process()\{
\par         int i,i1;
\par         while(!q.empty()) q.pop();
\par         sort(cow,cow+n);
\par         sort(lotion,lotion+m);
\par         for(ans=i=i1=0;i<m;i++)\{
\par                 while((i1<n)&&(cow[i1].first<=lotion[i].first))
\par                         q.push(-cow[i1++].second);
\par                 while((!q.empty())&&(-(q.top())<lotion[i].first))
\par                         q.pop();
\par                 while((!q.empty())&&(lotion[i].second--))\{
\par                         ans++;
\par                         q.pop();
\par                 \}
\par         \}
\par \}
\par 
\par 
\par int main()\{
\par         int i,j;
\par \tab freopen("tanning.in","r",stdin);
\par \tab freopen("tanning.out","w",stdout);
\par         scanf("%d%d",&n,&m);
\par         for(i=0;i<n;i++)
\par                 scanf("%d%d",&cow[i].first,&cow[i].second);
\par         for(i=0;i<m;i++)
\par                 scanf("%d%d",&lotion[i].first,&lotion[i].second);
\par         ans=0;
\par         process();
\par         printf("%d\\n",ans);
\par         return 0;
\par \} 
\par }\pard\plain \qj \li0\ri0\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 
\fs22\lang1033\langfe1033\loch\af37\hich\af37\dbch\af37\cgrid\langnp1033\langfenp1033 {\fs20\loch\af2\hich\af2\dbch\af0\insrsid11289134\charrsid2631230 
\par }\pard \qj \li0\ri0\sa200\sl276\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11289134 {\b\f2\fs32\insrsid11289134\charrsid2631230 
\par }}