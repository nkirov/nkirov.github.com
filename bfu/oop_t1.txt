
Дадена е следната дефиниция обекти от тип клас:

class One {
public:
        One() { data=0; }
        int get_data() { return data; }
private:
        int data;
} one, *p_one=&one, &r_one=one;

Отбележете правилните обръщения към функцията get_data на класа
One от функция main.

+ one.get_data()

- One:get_data()

----
Отбележете правилните оператори и операции, като променливите са
от необходимите вградени (стандартни) типове на С++.

+ a = s?t:z;

- p_s=&sizeof(char);

----
Отбележете верните дефиниции на прототип на функция, която да може да
бъде конструктор на клас.

+ Times(int, int, int);

- No(&char);

----
Дадена е следната програма:

class CreateAndDestroy {
public:
   CreateAndDestroy(int v) { data = v; }
   ~CreateAndDestroy();
private:
   int data; };
CreateAndDestroy c1(1);
void main()
{  CreateAndDestroy c2(2);
   static CreateAndDestroy c3(3);
   CreateAndDestroy c4(4); }

Отбележете верните твърдения.

+ c3 е локална променлива.

- Деструктор за c4 се извиква преди конструктор за c1.

----
Даден е следният клас:

class Count {
   friend void setX(Count &c, int val);
public:
   Count() { x = 0; }
   void print() const { cout << x << endl; }
private:
   int x;   };
 
В програмата няма променлива с име x освен частният член на класа.
Може ли в тялото на функцията setX да се срещат следните оператори:

+ c.x = val;

- return val+1;

----
Даден е следният клас:

class Test {
public:
   Test(int a=0) { x = a; }
   void print() const;
private:
   int x;    };
 
Вярно ли е използването на указател this в тялото на член-функцията
print() на класа Test?

+ cout << this->x;

- cout << this.x;

----
Даден е обект t:
 
class Time {
public:
   Time(int = 0, int = 0, int = 0);
   Time &setHour(int);   int getHour() const;
   Time &setMinute(int); int getMinute() const;
   Time &setSecond(int); int getSecond() const;
private:
   int hour; int minute; int second;
} t;
 
Отбележете вярното използване на верижка в главна функция main.

+ t.setHour(1).setMinute(2).setSecond(3);

- getHour().setSecond(1);

----
Даден е клас:
 
class Empl {
public:
   Empl(const char*);
   ~Empl();
   char *Name() const;
   static int getCount();
private:
   char *name;
   static int count;
} *ePtr;
 
Отбележете операторите, които могат да се срещат в тялото на
външна за класа функция.

+ ePtr=new Empl("Petko");

- ePtr=new Empl;

----
Дадена е следната дефиниция на клас и обекти от класа:
 
class PhoneNumber {
friend ostream &operator<<(ostream &,
                                const PhoneNumber &);
friend istream &operator>>(istream &, PhoneNumber &);
public:
   char areaCode[4];
private:
   char exchange[4];
   char line[5];
} ph1, ph2;
 
Отбележете операторите, които съдържат поне една предефинирана
в класа операция.

+ cin >> ph1;

- cout << "Hello!";

----
Отбележете верните дефиниции на прототип на функция, която да може да
бъде деструктор на клас.

+ ~Data();

- ~Eho() { return 0; }

