
Дадени са следните дефиниции:
class Test1 {
public:
        Test1() { int1 = 10; }
        int get_int1() { return int1; }
private:
        int int1;
} t, *p_t=&t, &r_t=t;
Отбележете правилните обръщения към функцията get_int1 на класа
Test1 от функция main.

+ t.get_int1()
- *p_t->get_int1()


Даден е следният клас:
class Point {
   friend void setXY(Point &p, int v);
public:
   Point()  { x = 0; y = 0; }
   void pr_pt() const { cout<<x<<" "<<y; }
private:
   int x, y;};
В програмата няма променливи с имена x и y.
Може ли в тялото на функцията setXY да се срещат следните оператори:

+ p.x = v;
- Point p(2,2);


Дадени са клас и указател:
class Student {
public:
   Student(const char*);
   ~Student();
   char *Name() const;
   static int getNum();
private:
   char *name;
   static int num;
} *spt;
Отбележете операторите, които могат да се срещат в тялото на външна за
класа функция.

+ cout << (*spt).getNum();
- cout << Student::num;


Даден е абстрактен базов клас К без членове-данни и с чисто виртуална
функция void fk(). K1 и K2 са производни на K класове, а K3 е производен
на K2 клас. Нека pk, pk1, pk2, pk3 са указатели, а k1, k2 и k3 са глобални
обекти съответно от класовете K, K1, K2 и K3. Отбележете верните двойки
оператори от главна функция main.

+ pk=&k1; pk->fk();
- pk3=pk2; pk3->fk();


Дадена е следната програма:
#include <iostream.h>
class Term {
public:
   Term(int ti=0, int i=1);
   int addTerm() { return temp+=inc; }
   int subTerm() { return temp-=inc; }
private:
   int temp;
   const int inc; };
Term::Term(int ti, int i):inc(i) {temp=ti;}
void main()
{ Term ... ;
 cout<<t1.addTerm()*t2.subTerm()<<"\n"; }
Отбележете дефинициите, които трябва да се поставят на
мястото на ... така, че да се изведе числото 60.

+ t1(4), t2(t1.addTerm(),-5)
- t1(12,2), t2(7)


Дадени са:
class Circle : public Point {
   friend ostream &operator<<
                     (ostream &, const Circle &);
public:
   Circle(float r=0.0, float x=0.0, float y=0.0);
   float getRadius() const;
   virtual float area() const;
private:
   float radius; } c1(1,0,0), c2, *pt_c;
Отбележете верните оператори от функцията main:

+ cout << c1 << c2;
- float r=c1.radius;


Отбележете верните оператори за работа с потоци, като променливата
c е от тип char, а pc е от тип char*.

+ cout << flush;
- cout.put(cin.get(c));


Отбележете верните оператори за работа с потокови манипулатори.

+ cout<<setprecision(8);
- cout.setf(left);


Отбележете верните оператори за състояние на входния поток.

+ cout<<cin.eof();
- cout<<ios::badbit;
